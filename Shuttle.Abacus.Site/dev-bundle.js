/*[system-bundles-config]*/
System.bundles = {"dev-bundle.css!":["shuttle-canstrap@1.0.60#canstrap.css!steal-css@1.3.2#css","font-awesome@4.7.0#css/font-awesome.css!steal-css@1.3.2#css","bootstrap@4.1.2#dist/css/bootstrap.css!steal-css@1.3.2#css"]};
/*can-namespace@1.0.0#can-namespace*/
define('can-namespace@1.0.0#can-namespace', function (require, exports, module) {
    module.exports = {};
});
/*can-define-validate-validatejs@1.1.0#can-define-validate-validatejs*/
define('can-define-validate-validatejs@1.1.0#can-define-validate-validatejs', [
    'require',
    'exports',
    'module',
    'can-validate-validatejs',
    'can-define',
    'can-assign',
    'can-reflect',
    'can-validate'
], function (require, exports, module) {
    'use strict';
    var validate = require('can-validate-validatejs');
    var define = require('can-define');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var formatErrors = require('can-validate').formatErrors;
    var getMapConstraints = function (Map) {
        var constraints = {};
        canReflect.eachKey(Map.prototype._define.definitions, function (prop, key) {
            if (prop.validate && canReflect.size(prop.validate) !== 0) {
                constraints[key] = prop.validate;
            }
        });
        return constraints;
    };
    var validateMap = function (Map, validator) {
        var mapDefinition = Map.prototype._define;
        Map.prototype.testSet = function () {
            var values = {};
            var useNewObject = false;
            if (arguments.length) {
                if (typeof arguments[0] === 'object' && Boolean(arguments[0])) {
                    values = arguments[0];
                    useNewObject = Boolean(arguments[1]);
                }
                if (typeof arguments[0] === 'string') {
                    values[arguments[0]] = arguments[1];
                }
                if (useNewObject) {
                    values = new Map(values);
                } else {
                    var mapClone = this.serialize();
                    assign(mapClone, values);
                    values = mapClone;
                }
                return validator(values);
            } else {
                return this.errors();
            }
        };
        Map.prototype.errors = function () {
            var _errors = this._errors;
            var errors;
            if (arguments.length) {
                var errorsObj = formatErrors(_errors, 'errors-object');
                errors = [];
                canReflect.eachIndex(arguments, function (key) {
                    [].push.apply(errors, errorsObj ? errorsObj[key] : []);
                });
                errors = errors.length > 0 ? errors : undefined;
            } else {
                errors = _errors;
            }
            return errors;
        };
        define.property(Map.prototype, '_errors', {
            get: function () {
                var errors = validator(this);
                return errors;
            }
        }, mapDefinition.dataInitializers, mapDefinition.computedInitializers);
    };
    var decorator = function (Map) {
        var constraints = getMapConstraints(Map);
        var validator = validate.many(constraints);
        validateMap(Map, function (map) {
            var errors = validator(map);
            return formatErrors(errors, 'errors');
        });
    };
    decorator.validatejs = validate.validatejs;
    module.exports = decorator;
});
/*can-reflect@1.17.0#reflections/helpers*/
define('can-reflect@1.17.0#reflections/helpers', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = {
        makeGetFirstSymbolValue: function (symbolNames) {
            var symbols = symbolNames.map(function (name) {
                return canSymbol.for(name);
            });
            var length = symbols.length;
            return function getFirstSymbol(obj) {
                var index = -1;
                while (++index < length) {
                    if (obj[symbols[index]] !== undefined) {
                        return obj[symbols[index]];
                    }
                }
            };
        },
        hasLength: function (list) {
            var type = typeof list;
            if (type === 'string' || Array.isArray(list)) {
                return true;
            }
            var length = list && (type !== 'boolean' && type !== 'number' && 'length' in list) && list.length;
            return typeof list !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in list);
        }
    };
});
/*can-reflect@1.17.0#reflections/type/type*/
define('can-reflect@1.17.0#reflections/type/type', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var helpers = require('../helpers');
    var plainFunctionPrototypePropertyNames = Object.getOwnPropertyNames(function () {
    }.prototype);
    var plainFunctionPrototypeProto = Object.getPrototypeOf(function () {
    }.prototype);
    function isConstructorLike(func) {
        var value = func[canSymbol.for('can.new')];
        if (value !== undefined) {
            return value;
        }
        if (typeof func !== 'function') {
            return false;
        }
        var prototype = func.prototype;
        if (!prototype) {
            return false;
        }
        if (plainFunctionPrototypeProto !== Object.getPrototypeOf(prototype)) {
            return true;
        }
        var propertyNames = Object.getOwnPropertyNames(prototype);
        if (propertyNames.length === plainFunctionPrototypePropertyNames.length) {
            for (var i = 0, len = propertyNames.length; i < len; i++) {
                if (propertyNames[i] !== plainFunctionPrototypePropertyNames[i]) {
                    return true;
                }
            }
            return false;
        } else {
            return true;
        }
    }
    var getNewOrApply = helpers.makeGetFirstSymbolValue([
        'can.new',
        'can.apply'
    ]);
    function isFunctionLike(obj) {
        var result, symbolValue = obj[canSymbol.for('can.isFunctionLike')];
        if (symbolValue !== undefined) {
            return symbolValue;
        }
        result = getNewOrApply(obj);
        if (result !== undefined) {
            return !!result;
        }
        return typeof obj === 'function';
    }
    function isPrimitive(obj) {
        var type = typeof obj;
        if (obj == null || type !== 'function' && type !== 'object') {
            return true;
        } else {
            return false;
        }
    }
    function isBuiltIn(obj) {
        if (isPrimitive(obj) || Array.isArray(obj) || isPlainObject(obj) || Object.prototype.toString.call(obj) !== '[object Object]' && Object.prototype.toString.call(obj).indexOf('[object ') !== -1) {
            return true;
        } else {
            return false;
        }
    }
    function isValueLike(obj) {
        var symbolValue;
        if (isPrimitive(obj)) {
            return true;
        }
        symbolValue = obj[canSymbol.for('can.isValueLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = obj[canSymbol.for('can.getValue')];
        if (value !== undefined) {
            return !!value;
        }
    }
    function isMapLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        var isMapLike = obj[canSymbol.for('can.isMapLike')];
        if (typeof isMapLike !== 'undefined') {
            return !!isMapLike;
        }
        var value = obj[canSymbol.for('can.getKeyValue')];
        if (value !== undefined) {
            return !!value;
        }
        return true;
    }
    var onValueSymbol = canSymbol.for('can.onValue'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), onPatchesSymbol = canSymbol.for('can.onPatches');
    function isObservableLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        return Boolean(obj[onValueSymbol] || obj[onKeyValueSymbol] || obj[onPatchesSymbol]);
    }
    function isListLike(list) {
        var symbolValue, type = typeof list;
        if (type === 'string') {
            return true;
        }
        if (isPrimitive(list)) {
            return false;
        }
        symbolValue = list[canSymbol.for('can.isListLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = list[canSymbol.iterator];
        if (value !== undefined) {
            return !!value;
        }
        if (Array.isArray(list)) {
            return true;
        }
        return helpers.hasLength(list);
    }
    var supportsSymbols = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
    var isSymbolLike;
    if (supportsSymbols) {
        isSymbolLike = function (symbol) {
            return typeof symbol === 'symbol';
        };
    } else {
        var symbolStart = '@@symbol';
        isSymbolLike = function (symbol) {
            if (typeof symbol === 'object' && !Array.isArray(symbol)) {
                return symbol.toString().substr(0, symbolStart.length) === symbolStart;
            } else {
                return false;
            }
        };
    }
    var coreHasOwn = Object.prototype.hasOwnProperty;
    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        var proto = Object.getPrototypeOf(obj);
        if (proto === Object.prototype || proto === null) {
            return true;
        }
        var Constructor = coreHasOwn.call(proto, 'constructor') && proto.constructor;
        return typeof Constructor === 'function' && Constructor instanceof Constructor && funcToString.call(Constructor) === objectCtorString;
    }
    module.exports = {
        isConstructorLike: isConstructorLike,
        isFunctionLike: isFunctionLike,
        isListLike: isListLike,
        isMapLike: isMapLike,
        isObservableLike: isObservableLike,
        isPrimitive: isPrimitive,
        isBuiltIn: isBuiltIn,
        isValueLike: isValueLike,
        isSymbolLike: isSymbolLike,
        isMoreListLikeThanMapLike: function (obj) {
            if (Array.isArray(obj)) {
                return true;
            }
            if (obj instanceof Array) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            var value = obj[canSymbol.for('can.isMoreListLikeThanMapLike')];
            if (value !== undefined) {
                return value;
            }
            var isListLike = this.isListLike(obj), isMapLike = this.isMapLike(obj);
            if (isListLike && !isMapLike) {
                return true;
            } else if (!isListLike && isMapLike) {
                return false;
            }
        },
        isIteratorLike: function (obj) {
            return obj && typeof obj === 'object' && typeof obj.next === 'function' && obj.next.length === 0;
        },
        isPromise: function (obj) {
            return obj instanceof Promise || Object.prototype.toString.call(obj) === '[object Promise]';
        },
        isPlainObject: isPlainObject
    };
});
/*can-reflect@1.17.0#reflections/call/call*/
define('can-reflect@1.17.0#reflections/call/call', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    module.exports = {
        call: function (func, context) {
            var args = [].slice.call(arguments, 2);
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        apply: function (func, context, args) {
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        'new': function (func) {
            var args = [].slice.call(arguments, 1);
            var makeNew = func[canSymbol.for('can.new')];
            if (makeNew) {
                return makeNew.apply(func, args);
            } else {
                var context = Object.create(func.prototype);
                var ret = func.apply(context, args);
                if (typeReflections.isPrimitive(ret)) {
                    return context;
                } else {
                    return ret;
                }
            }
        }
    };
});
/*can-reflect@1.17.0#reflections/get-set/get-set*/
define('can-reflect@1.17.0#reflections/get-set/get-set', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue'), getKeyValueSymbol = canSymbol.for('can.getKeyValue'), getValueSymbol = canSymbol.for('can.getValue'), setValueSymbol = canSymbol.for('can.setValue');
    var reflections = {
        setKeyValue: function (obj, key, value) {
            if (typeReflections.isSymbolLike(key)) {
                if (typeof key === 'symbol') {
                    obj[key] = value;
                } else {
                    Object.defineProperty(obj, key, {
                        enumerable: false,
                        configurable: true,
                        value: value,
                        writable: true
                    });
                }
                return;
            }
            var setKeyValue = obj[setKeyValueSymbol];
            if (setKeyValue !== undefined) {
                return setKeyValue.call(obj, key, value);
            } else {
                obj[key] = value;
            }
        },
        getKeyValue: function (obj, key) {
            var getKeyValue = obj[getKeyValueSymbol];
            if (getKeyValue) {
                return getKeyValue.call(obj, key);
            }
            return obj[key];
        },
        deleteKeyValue: function (obj, key) {
            var deleteKeyValue = obj[canSymbol.for('can.deleteKeyValue')];
            if (deleteKeyValue) {
                return deleteKeyValue.call(obj, key);
            }
            delete obj[key];
        },
        getValue: function (value) {
            if (typeReflections.isPrimitive(value)) {
                return value;
            }
            var getValue = value[getValueSymbol];
            if (getValue) {
                return getValue.call(value);
            }
            return value;
        },
        setValue: function (item, value) {
            var setValue = item && item[setValueSymbol];
            if (setValue) {
                return setValue.call(item, value);
            } else {
                throw new Error('can-reflect.setValue - Can not set value.');
            }
        },
        splice: function (obj, index, removing, adding) {
            var howMany;
            if (typeof removing !== 'number') {
                var updateValues = obj[canSymbol.for('can.updateValues')];
                if (updateValues) {
                    return updateValues.call(obj, index, removing, adding);
                }
                howMany = removing.length;
            } else {
                howMany = removing;
            }
            if (arguments.length <= 3) {
                adding = [];
            }
            var splice = obj[canSymbol.for('can.splice')];
            if (splice) {
                return splice.call(obj, index, howMany, adding);
            }
            return [].splice.apply(obj, [
                index,
                howMany
            ].concat(adding));
        },
        addValues: function (obj, adding, index) {
            var add = obj[canSymbol.for('can.addValues')];
            if (add) {
                return add.call(obj, adding, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                return obj.push.apply(obj, adding);
            }
            return reflections.splice(obj, index, [], adding);
        },
        removeValues: function (obj, removing, index) {
            var removeValues = obj[canSymbol.for('can.removeValues')];
            if (removeValues) {
                return removeValues.call(obj, removing, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                removing.forEach(function (item) {
                    var index = obj.indexOf(item);
                    if (index >= 0) {
                        obj.splice(index, 1);
                    }
                });
                return;
            }
            return reflections.splice(obj, index, removing, []);
        }
    };
    reflections.get = reflections.getKeyValue;
    reflections.set = reflections.setKeyValue;
    reflections['delete'] = reflections.deleteKeyValue;
    module.exports = reflections;
});
/*can-reflect@1.17.0#reflections/observe/observe*/
define('can-reflect@1.17.0#reflections/observe/observe', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var slice = [].slice;
    function makeFallback(symbolName, fallbackName) {
        return function (obj, event, handler, queueName) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                return method.call(obj, event, handler, queueName);
            }
            return this[fallbackName].apply(this, arguments);
        };
    }
    function makeErrorIfMissing(symbolName, errorMessage) {
        return function (obj) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                var args = slice.call(arguments, 1);
                return method.apply(obj, args);
            }
            throw new Error(errorMessage);
        };
    }
    module.exports = {
        onKeyValue: makeFallback('can.onKeyValue', 'onEvent'),
        offKeyValue: makeFallback('can.offKeyValue', 'offEvent'),
        onKeys: makeErrorIfMissing('can.onKeys', 'can-reflect: can not observe an onKeys event'),
        onKeysAdded: makeErrorIfMissing('can.onKeysAdded', 'can-reflect: can not observe an onKeysAdded event'),
        onKeysRemoved: makeErrorIfMissing('can.onKeysRemoved', 'can-reflect: can not unobserve an onKeysRemoved event'),
        getKeyDependencies: makeErrorIfMissing('can.getKeyDependencies', 'can-reflect: can not determine dependencies'),
        getWhatIChange: makeErrorIfMissing('can.getWhatIChange', 'can-reflect: can not determine dependencies'),
        getChangesDependencyRecord: function getChangesDependencyRecord(handler) {
            var fn = handler[canSymbol.for('can.getChangesDependencyRecord')];
            if (typeof fn === 'function') {
                return fn();
            }
        },
        keyHasDependencies: makeErrorIfMissing('can.keyHasDependencies', 'can-reflect: can not determine if this has key dependencies'),
        onValue: makeErrorIfMissing('can.onValue', 'can-reflect: can not observe value change'),
        offValue: makeErrorIfMissing('can.offValue', 'can-reflect: can not unobserve value change'),
        getValueDependencies: makeErrorIfMissing('can.getValueDependencies', 'can-reflect: can not determine dependencies'),
        valueHasDependencies: makeErrorIfMissing('can.valueHasDependencies', 'can-reflect: can not determine if value has dependencies'),
        onPatches: makeErrorIfMissing('can.onPatches', 'can-reflect: can not observe patches on object'),
        offPatches: makeErrorIfMissing('can.offPatches', 'can-reflect: can not unobserve patches on object'),
        onInstancePatches: makeErrorIfMissing('can.onInstancePatches', 'can-reflect: can not observe onInstancePatches on Type'),
        offInstancePatches: makeErrorIfMissing('can.offInstancePatches', 'can-reflect: can not unobserve onInstancePatches on Type'),
        onInstanceBoundChange: makeErrorIfMissing('can.onInstanceBoundChange', 'can-reflect: can not observe bound state change in instances.'),
        offInstanceBoundChange: makeErrorIfMissing('can.offInstanceBoundChange', 'can-reflect: can not unobserve bound state change'),
        isBound: makeErrorIfMissing('can.isBound', 'can-reflect: cannot determine if object is bound'),
        onEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var onEvent = obj[canSymbol.for('can.onEvent')];
                if (onEvent !== undefined) {
                    return onEvent.call(obj, eventName, callback, queue);
                } else if (obj.addEventListener) {
                    obj.addEventListener(eventName, callback, queue);
                }
            }
        },
        offEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var offEvent = obj[canSymbol.for('can.offEvent')];
                if (offEvent !== undefined) {
                    return offEvent.call(obj, eventName, callback, queue);
                } else if (obj.removeEventListener) {
                    obj.removeEventListener(eventName, callback, queue);
                }
            }
        },
        setPriority: function (obj, priority) {
            if (obj) {
                var setPriority = obj[canSymbol.for('can.setPriority')];
                if (setPriority !== undefined) {
                    setPriority.call(obj, priority);
                    return true;
                }
            }
            return false;
        },
        getPriority: function (obj) {
            if (obj) {
                var getPriority = obj[canSymbol.for('can.getPriority')];
                if (getPriority !== undefined) {
                    return getPriority.call(obj);
                }
            }
            return undefined;
        }
    };
});
/*can-reflect@1.17.0#reflections/shape/shape*/
define('can-reflect@1.17.0#reflections/shape/shape', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../get-set/get-set',
    '../type/type',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var getSetReflections = require('../get-set/get-set');
    var typeReflections = require('../type/type');
    var helpers = require('../helpers');
    var getPrototypeOfWorksWithPrimitives = true;
    try {
        Object.getPrototypeOf(1);
    } catch (e) {
        getPrototypeOfWorksWithPrimitives = false;
    }
    var ArrayMap;
    if (typeof Map === 'function') {
        ArrayMap = Map;
    } else {
        function isEven(num) {
            return !(num % 2);
        }
        ArrayMap = function () {
            this.contents = [];
        };
        ArrayMap.prototype = {
            _getIndex: function (key) {
                var idx;
                do {
                    idx = this.contents.indexOf(key, idx);
                } while (idx !== -1 && !isEven(idx));
                return idx;
            },
            has: function (key) {
                return this._getIndex(key) !== -1;
            },
            get: function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    return this.contents[idx + 1];
                }
            },
            set: function (key, value) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents[idx + 1] = value;
                } else {
                    this.contents.push(key);
                    this.contents.push(value);
                }
            },
            'delete': function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents.splice(idx, 2);
                }
            }
        };
    }
    var shapeReflections;
    var shiftFirstArgumentToThis = function (func) {
        return function () {
            var args = [this];
            args.push.apply(args, arguments);
            return func.apply(null, args);
        };
    };
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue');
    var shiftedGetKeyValue = shiftFirstArgumentToThis(getSetReflections.getKeyValue);
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue');
    var shiftedSetKeyValue = shiftFirstArgumentToThis(getSetReflections.setKeyValue);
    var sizeSymbol = canSymbol.for('can.size');
    var hasUpdateSymbol = helpers.makeGetFirstSymbolValue([
        'can.updateDeep',
        'can.assignDeep',
        'can.setKeyValue'
    ]);
    var shouldUpdateOrAssign = function (obj) {
        return typeReflections.isPlainObject(obj) || Array.isArray(obj) || !!hasUpdateSymbol(obj);
    };
    function isSerializedHelper(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return true;
        }
        if (hasUpdateSymbol(obj)) {
            return false;
        }
        return typeReflections.isBuiltIn(obj) && !typeReflections.isPlainObject(obj) && !Array.isArray(obj);
    }
    var Object_Keys;
    try {
        Object.keys(1);
        Object_Keys = Object.keys;
    } catch (e) {
        Object_Keys = function (obj) {
            if (typeReflections.isPrimitive(obj)) {
                return [];
            } else {
                return Object.keys(obj);
            }
        };
    }
    function makeSerializer(methodName, symbolsToCheck) {
        var serializeMap = null;
        function SerializeOperation(MapType) {
            this.first = !serializeMap;
            if (this.first) {
                serializeMap = createSerializeMap(MapType);
            }
            this.map = serializeMap;
            this.result = null;
        }
        SerializeOperation.prototype.end = function () {
            if (this.first) {
                serializeMap = null;
            }
            return this.result;
        };
        function createSerializeMap(Type) {
            var MapType = Type || ArrayMap;
            return {
                unwrap: new MapType(),
                serialize: new MapType(),
                isSerializing: {
                    unwrap: new MapType(),
                    serialize: new MapType()
                },
                circularReferenceIsSerializing: {
                    unwrap: new MapType(),
                    serialize: new MapType()
                }
            };
        }
        return function serializer(value, MapType) {
            if (isSerializedHelper(value)) {
                return value;
            }
            var operation = new SerializeOperation(MapType);
            if (typeReflections.isValueLike(value)) {
                operation.result = this[methodName](getSetReflections.getValue(value));
            } else {
                var isListLike = typeReflections.isIteratorLike(value) || typeReflections.isMoreListLikeThanMapLike(value);
                operation.result = isListLike ? [] : {};
                if (operation.map[methodName].has(value)) {
                    if (operation.map.isSerializing[methodName].has(value)) {
                        operation.map.circularReferenceIsSerializing[methodName].set(value, true);
                    }
                    return operation.map[methodName].get(value);
                } else {
                    operation.map[methodName].set(value, operation.result);
                }
                for (var i = 0, len = symbolsToCheck.length; i < len; i++) {
                    var serializer = value[symbolsToCheck[i]];
                    if (serializer) {
                        operation.map.isSerializing[methodName].set(value, true);
                        var oldResult = operation.result;
                        operation.result = serializer.call(value, oldResult);
                        operation.map.isSerializing[methodName].delete(value);
                        if (operation.result !== oldResult) {
                            if (operation.map.circularReferenceIsSerializing[methodName].has(value)) {
                                operation.end();
                                throw new Error('Cannot serialize cirular reference!');
                            }
                            operation.map[methodName].set(value, operation.result);
                        }
                        return operation.end();
                    }
                }
                if (typeof obj === 'function') {
                    operation.map[methodName].set(value, value);
                    operation.result = value;
                } else if (isListLike) {
                    this.eachIndex(value, function (childValue, index) {
                        operation.result[index] = this[methodName](childValue);
                    }, this);
                } else {
                    this.eachKey(value, function (childValue, prop) {
                        operation.result[prop] = this[methodName](childValue);
                    }, this);
                }
            }
            return operation.end();
        };
    }
    var makeMap;
    if (typeof Map !== 'undefined') {
        makeMap = function (keys) {
            var map = new Map();
            shapeReflections.eachIndex(keys, function (key) {
                map.set(key, true);
            });
            return map;
        };
    } else {
        makeMap = function (keys) {
            var map = {};
            keys.forEach(function (key) {
                map[key] = true;
            });
            return {
                get: function (key) {
                    return map[key];
                },
                set: function (key, value) {
                    map[key] = value;
                },
                keys: function () {
                    return keys;
                }
            };
        };
    }
    var fastHasOwnKey = function (obj) {
        var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
        if (hasOwnKey) {
            return hasOwnKey.bind(obj);
        } else {
            var map = makeMap(shapeReflections.getOwnEnumerableKeys(obj));
            return function (key) {
                return map.get(key);
            };
        }
    };
    function addPatch(patches, patch) {
        var lastPatch = patches[patches.length - 1];
        if (lastPatch) {
            if (lastPatch.deleteCount === lastPatch.insert.length && patch.index - lastPatch.index === lastPatch.deleteCount) {
                lastPatch.insert.push.apply(lastPatch.insert, patch.insert);
                lastPatch.deleteCount += patch.deleteCount;
                return;
            }
        }
        patches.push(patch);
    }
    function updateDeepList(target, source, isAssign) {
        var sourceArray = this.toArray(source);
        var patches = [], lastIndex = -1;
        this.eachIndex(target, function (curVal, index) {
            lastIndex = index;
            if (index >= sourceArray.length) {
                if (!isAssign) {
                    addPatch(patches, {
                        index: index,
                        deleteCount: target.length - index + 1,
                        insert: []
                    });
                }
                return false;
            }
            var newVal = sourceArray[index];
            if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                addPatch(patches, {
                    index: index,
                    deleteCount: 1,
                    insert: [newVal]
                });
            } else {
                this.updateDeep(curVal, newVal);
            }
        }, this);
        if (sourceArray.length > lastIndex) {
            addPatch(patches, {
                index: lastIndex + 1,
                deleteCount: 0,
                insert: sourceArray.slice(lastIndex + 1)
            });
        }
        for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
            var patch = patches[i];
            getSetReflections.splice(target, patch.index, patch.deleteCount, patch.insert);
        }
        return target;
    }
    shapeReflections = {
        each: function (obj, callback, context) {
            if (typeReflections.isIteratorLike(obj) || typeReflections.isMoreListLikeThanMapLike(obj)) {
                return shapeReflections.eachIndex(obj, callback, context);
            } else {
                return shapeReflections.eachKey(obj, callback, context);
            }
        },
        eachIndex: function (list, callback, context) {
            if (Array.isArray(list)) {
                return shapeReflections.eachListLike(list, callback, context);
            } else {
                var iter, iterator = list[canSymbol.iterator];
                if (typeReflections.isIteratorLike(list)) {
                    iter = list;
                } else if (iterator) {
                    iter = iterator.call(list);
                }
                if (iter) {
                    var res, index = 0;
                    while (!(res = iter.next()).done) {
                        if (callback.call(context || list, res.value, index++, list) === false) {
                            break;
                        }
                    }
                } else {
                    shapeReflections.eachListLike(list, callback, context);
                }
            }
            return list;
        },
        eachListLike: function (list, callback, context) {
            var index = -1;
            var length = list.length;
            if (length === undefined) {
                var size = list[sizeSymbol];
                if (size) {
                    length = size.call(list);
                } else {
                    throw new Error('can-reflect: unable to iterate.');
                }
            }
            while (++index < length) {
                var item = list[index];
                if (callback.call(context || item, item, index, list) === false) {
                    break;
                }
            }
            return list;
        },
        toArray: function (obj) {
            var arr = [];
            shapeReflections.each(obj, function (value) {
                arr.push(value);
            });
            return arr;
        },
        eachKey: function (obj, callback, context) {
            if (obj) {
                var enumerableKeys = shapeReflections.getOwnEnumerableKeys(obj);
                var getKeyValue = obj[getKeyValueSymbol] || shiftedGetKeyValue;
                return shapeReflections.eachIndex(enumerableKeys, function (key) {
                    var value = getKeyValue.call(obj, key);
                    return callback.call(context || obj, value, key, obj);
                });
            }
            return obj;
        },
        'hasOwnKey': function (obj, key) {
            var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
            if (hasOwnKey) {
                return hasOwnKey.call(obj, key);
            }
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                var found = false;
                shapeReflections.eachIndex(getOwnKeys.call(obj), function (objKey) {
                    if (objKey === key) {
                        found = true;
                        return false;
                    }
                });
                return found;
            }
            return obj.hasOwnProperty(key);
        },
        getOwnEnumerableKeys: function (obj) {
            var getOwnEnumerableKeys = obj[canSymbol.for('can.getOwnEnumerableKeys')];
            if (getOwnEnumerableKeys) {
                return getOwnEnumerableKeys.call(obj);
            }
            if (obj[canSymbol.for('can.getOwnKeys')] && obj[canSymbol.for('can.getOwnKeyDescriptor')]) {
                var keys = [];
                shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj), function (key) {
                    var descriptor = shapeReflections.getOwnKeyDescriptor(obj, key);
                    if (descriptor.enumerable) {
                        keys.push(key);
                    }
                }, this);
                return keys;
            } else {
                return Object_Keys(obj);
            }
        },
        getOwnKeys: function (obj) {
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                return getOwnKeys.call(obj);
            } else {
                return Object.getOwnPropertyNames(obj);
            }
        },
        getOwnKeyDescriptor: function (obj, key) {
            var getOwnKeyDescriptor = obj[canSymbol.for('can.getOwnKeyDescriptor')];
            if (getOwnKeyDescriptor) {
                return getOwnKeyDescriptor.call(obj, key);
            } else {
                return Object.getOwnPropertyDescriptor(obj, key);
            }
        },
        unwrap: makeSerializer('unwrap', [canSymbol.for('can.unwrap')]),
        serialize: makeSerializer('serialize', [
            canSymbol.for('can.serialize'),
            canSymbol.for('can.unwrap')
        ]),
        assignMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (value, key) {
                if (!hasOwnKey(key) || getKeyValue.call(target, key) !== value) {
                    setKeyValue.call(target, key, value);
                }
            });
            return target;
        },
        assignList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, inserting, inserting);
            return target;
        },
        assign: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignList(target, source);
            } else {
                shapeReflections.assignMap(target, source);
            }
            return target;
        },
        assignDeepMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (newVal, key) {
                if (!hasOwnKey(key)) {
                    getSetReflections.setKeyValue(target, key, newVal);
                } else {
                    var curVal = getKeyValue.call(target, key);
                    if (newVal === curVal) {
                    } else if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                        setKeyValue.call(target, key, newVal);
                    } else {
                        shapeReflections.assignDeep(curVal, newVal);
                    }
                }
            }, this);
            return target;
        },
        assignDeepList: function (target, source) {
            return updateDeepList.call(this, target, source, true);
        },
        assignDeep: function (target, source) {
            var assignDeep = target[canSymbol.for('can.assignDeep')];
            if (assignDeep) {
                assignDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignDeepList(target, source);
            } else {
                shapeReflections.assignDeepMap(target, source);
            }
            return target;
        },
        updateMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (newVal !== curVal) {
                    targetSetKeyValue.call(target, key, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, target, inserting);
            return target;
        },
        update: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateList(target, source);
            } else {
                shapeReflections.updateMap(target, source);
            }
            return target;
        },
        updateDeepMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                    targetSetKeyValue.call(target, key, newVal);
                } else {
                    shapeReflections.updateDeep(curVal, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateDeepList: function (target, source) {
            return updateDeepList.call(this, target, source);
        },
        updateDeep: function (target, source) {
            var updateDeep = target[canSymbol.for('can.updateDeep')];
            if (updateDeep) {
                updateDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateDeepList(target, source);
            } else {
                shapeReflections.updateDeepMap(target, source);
            }
            return target;
        },
        hasKey: function (obj, key) {
            if (obj == null) {
                return false;
            }
            if (typeReflections.isPrimitive(obj)) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    return true;
                } else {
                    var proto;
                    if (getPrototypeOfWorksWithPrimitives) {
                        proto = Object.getPrototypeOf(obj);
                    } else {
                        proto = obj.__proto__;
                    }
                    ;
                    if (proto !== undefined) {
                        return key in proto;
                    } else {
                        return obj[key] !== undefined;
                    }
                }
            }
            var hasKey = obj[canSymbol.for('can.hasKey')];
            if (hasKey) {
                return hasKey.call(obj, key);
            }
            var found = shapeReflections.hasOwnKey(obj, key);
            return found || key in obj;
        },
        getAllEnumerableKeys: function () {
        },
        getAllKeys: function () {
        },
        assignSymbols: function (target, source) {
            shapeReflections.eachKey(source, function (value, key) {
                var symbol = typeReflections.isSymbolLike(canSymbol[key]) ? canSymbol[key] : canSymbol.for(key);
                getSetReflections.setKeyValue(target, symbol, value);
            });
            return target;
        },
        isSerialized: isSerializedHelper,
        size: function (obj) {
            if (obj == null) {
                return 0;
            }
            var size = obj[sizeSymbol];
            var count = 0;
            if (size) {
                return size.call(obj);
            } else if (helpers.hasLength(obj)) {
                return obj.length;
            } else if (typeReflections.isListLike(obj)) {
                shapeReflections.eachIndex(obj, function () {
                    count++;
                });
                return count;
            } else if (obj) {
                return shapeReflections.getOwnEnumerableKeys(obj).length;
            } else {
                return undefined;
            }
        },
        defineInstanceKey: function (cls, key, properties) {
            var defineInstanceKey = cls[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                return defineInstanceKey.call(cls, key, properties);
            }
            var proto = cls.prototype;
            defineInstanceKey = proto[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                defineInstanceKey.call(proto, key, properties);
            } else {
                Object.defineProperty(proto, key, shapeReflections.assign({
                    configurable: true,
                    enumerable: !typeReflections.isSymbolLike(key),
                    writable: true
                }, properties));
            }
        }
    };
    shapeReflections.isSerializable = shapeReflections.isSerialized;
    shapeReflections.keys = shapeReflections.getOwnEnumerableKeys;
    module.exports = shapeReflections;
});
/*can-reflect@1.17.0#reflections/shape/schema/schema*/
define('can-reflect@1.17.0#reflections/shape/schema/schema', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../../type/type',
    '../../get-set/get-set',
    '../shape'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../../type/type');
    var getSetReflections = require('../../get-set/get-set');
    var shapeReflections = require('../shape');
    var getSchemaSymbol = canSymbol.for('can.getSchema'), isMemberSymbol = canSymbol.for('can.isMember'), newSymbol = canSymbol.for('can.new');
    function comparator(a, b) {
        return a.localeCompare(b);
    }
    function sort(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return obj;
        }
        var out;
        if (typeReflections.isListLike(obj)) {
            out = [];
            shapeReflections.eachKey(obj, function (item) {
                out.push(sort(item));
            });
            return out;
        }
        if (typeReflections.isMapLike(obj)) {
            out = {};
            shapeReflections.getOwnKeys(obj).sort(comparator).forEach(function (key) {
                out[key] = sort(getSetReflections.getKeyValue(obj, key));
            });
            return out;
        }
        return obj;
    }
    function isPrimitiveConverter(Type) {
        return Type === Number || Type === String || Type === Boolean;
    }
    var schemaReflections = {
        getSchema: function (type) {
            if (type === undefined) {
                return undefined;
            }
            var getSchema = type[getSchemaSymbol];
            if (getSchema === undefined) {
                type = type.constructor;
                getSchema = type && type[getSchemaSymbol];
            }
            return getSchema !== undefined ? getSchema.call(type) : undefined;
        },
        getIdentity: function (value, schema) {
            schema = schema || schemaReflections.getSchema(value);
            if (schema === undefined) {
                throw new Error('can-reflect.getIdentity - Unable to find a schema for the given value.');
            }
            var identity = schema.identity;
            if (!identity || identity.length === 0) {
                throw new Error('can-reflect.getIdentity - Provided schema lacks an identity property.');
            } else if (identity.length === 1) {
                return getSetReflections.getKeyValue(value, identity[0]);
            } else {
                var id = {};
                identity.forEach(function (key) {
                    id[key] = getSetReflections.getKeyValue(value, key);
                });
                return JSON.stringify(schemaReflections.cloneKeySort(id));
            }
        },
        cloneKeySort: function (obj) {
            return sort(obj);
        },
        convert: function (value, Type) {
            if (isPrimitiveConverter(Type)) {
                return Type(value);
            }
            var isMemberTest = Type[isMemberSymbol], isMember = false, type = typeof Type, createNew = Type[newSymbol];
            if (isMemberTest !== undefined) {
                isMember = isMemberTest.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    isMember = value instanceof Type;
                }
            }
            if (isMember) {
                return value;
            }
            if (createNew !== undefined) {
                return createNew.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    return new Type(value);
                } else {
                    return Type(value);
                }
            } else {
                throw new Error('can-reflect: Can not convert values into type. Type must provide `can.new` symbol.');
            }
        }
    };
    module.exports = schemaReflections;
});
/*can-reflect@1.17.0#reflections/get-name/get-name*/
define('can-reflect@1.17.0#reflections/get-name/get-name', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var getNameSymbol = canSymbol.for('can.getName');
    function setName(obj, nameGetter) {
        if (typeof nameGetter !== 'function') {
            var value = nameGetter;
            nameGetter = function () {
                return value;
            };
        }
        Object.defineProperty(obj, getNameSymbol, { value: nameGetter });
    }
    function getName(obj) {
        var type = typeof obj;
        if (obj === null || type !== 'object' && type !== 'function') {
            return '' + obj;
        }
        var nameGetter = obj[getNameSymbol];
        if (nameGetter) {
            return nameGetter.call(obj);
        }
        if (type === 'function') {
            return obj.name;
        }
        if (obj.constructor && obj !== obj.constructor) {
            var parent = getName(obj.constructor);
            if (parent) {
                if (typeReflections.isValueLike(obj)) {
                    return parent + '<>';
                }
                if (typeReflections.isMoreListLikeThanMapLike(obj)) {
                    return parent + '[]';
                }
                if (typeReflections.isMapLike(obj)) {
                    return parent + '{}';
                }
            }
        }
        return undefined;
    }
    module.exports = {
        setName: setName,
        getName: getName
    };
});
/*can-reflect@1.17.0#types/map*/
define('can-reflect@1.17.0#types/map', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    function keysPolyfill() {
        var keys = [];
        var currentIndex = 0;
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return {
            next: function () {
                return {
                    value: keys[currentIndex],
                    done: currentIndex++ === keys.length
                };
            }
        };
    }
    if (typeof Map !== 'undefined') {
        shape.assignSymbols(Map.prototype, {
            'can.getOwnEnumerableKeys': Map.prototype.keys,
            'can.setKeyValue': Map.prototype.set,
            'can.getKeyValue': Map.prototype.get,
            'can.deleteKeyValue': Map.prototype['delete'],
            'can.hasOwnKey': Map.prototype.has
        });
        if (typeof Map.prototype.keys !== 'function') {
            Map.prototype.keys = Map.prototype[CanSymbol.for('can.getOwnEnumerableKeys')] = keysPolyfill;
        }
    }
    if (typeof WeakMap !== 'undefined') {
        shape.assignSymbols(WeakMap.prototype, {
            'can.getOwnEnumerableKeys': function () {
                throw new Error('can-reflect: WeakMaps do not have enumerable keys.');
            },
            'can.setKeyValue': WeakMap.prototype.set,
            'can.getKeyValue': WeakMap.prototype.get,
            'can.deleteKeyValue': WeakMap.prototype['delete'],
            'can.hasOwnKey': WeakMap.prototype.has
        });
    }
});
/*can-reflect@1.17.0#types/set*/
define('can-reflect@1.17.0#types/set', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    if (typeof Set !== 'undefined') {
        shape.assignSymbols(Set.prototype, {
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                return this.size;
            }
        });
        if (typeof Set.prototype[CanSymbol.iterator] !== 'function') {
            Set.prototype[CanSymbol.iterator] = function () {
                var arr = [];
                var currentIndex = 0;
                this.forEach(function (val) {
                    arr.push(val);
                });
                return {
                    next: function () {
                        return {
                            value: arr[currentIndex],
                            done: currentIndex++ === arr.length
                        };
                    }
                };
            };
        }
    }
    if (typeof WeakSet !== 'undefined') {
        shape.assignSymbols(WeakSet.prototype, {
            'can.isListLike': true,
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                throw new Error('can-reflect: WeakSets do not have enumerable keys.');
            }
        });
    }
});
/*can-reflect@1.17.0#can-reflect*/
define('can-reflect@1.17.0#can-reflect', [
    'require',
    'exports',
    'module',
    './reflections/call/call',
    './reflections/get-set/get-set',
    './reflections/observe/observe',
    './reflections/shape/shape',
    './reflections/shape/schema/schema',
    './reflections/type/type',
    './reflections/get-name/get-name',
    'can-namespace',
    './types/map',
    './types/set'
], function (require, exports, module) {
    'use strict';
    var functionReflections = require('./reflections/call/call');
    var getSet = require('./reflections/get-set/get-set');
    var observe = require('./reflections/observe/observe');
    var shape = require('./reflections/shape/shape');
    var schema = require('./reflections/shape/schema/schema');
    var type = require('./reflections/type/type');
    var getName = require('./reflections/get-name/get-name');
    var namespace = require('can-namespace');
    var reflect = {};
    [
        functionReflections,
        getSet,
        observe,
        shape,
        type,
        getName,
        schema
    ].forEach(function (reflections) {
        for (var prop in reflections) {
            reflect[prop] = reflections[prop];
            if (process.env.NODE_ENV !== 'production') {
                if (typeof reflections[prop] === 'function') {
                    var propDescriptor = Object.getOwnPropertyDescriptor(reflections[prop], 'name');
                    if (!propDescriptor || propDescriptor.writable && propDescriptor.configurable) {
                        Object.defineProperty(reflections[prop], 'name', { value: 'canReflect.' + prop });
                    }
                }
            }
        }
    });
    require('./types/map');
    require('./types/set');
    module.exports = namespace.Reflect = reflect;
});
/*can-log@1.0.0#can-log*/
define('can-log@1.0.0#can-log', function (require, exports, module) {
    'use strict';
    exports.warnTimeout = 5000;
    exports.logLevel = 0;
    exports.warn = function () {
        var ll = this.logLevel;
        if (ll < 2) {
            if (typeof console !== 'undefined' && console.warn) {
                this._logger('warn', Array.prototype.slice.call(arguments));
            } else if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.log = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.error = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.error) {
                this._logger('error', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports._logger = function (type, arr) {
        try {
            console[type].apply(console, arr);
        } catch (e) {
            console[type](arr);
        }
    };
});
/*can-log@1.0.0#dev/dev*/
define('can-log@1.0.0#dev/dev', [
    'require',
    'exports',
    'module',
    '../can-log'
], function (require, exports, module) {
    'use strict';
    var canLog = require('../can-log');
    module.exports = {
        warnTimeout: 5000,
        logLevel: 0,
        stringify: function (value) {
            var flagUndefined = function flagUndefined(key, value) {
                return value === undefined ? '/* void(undefined) */' : value;
            };
            return JSON.stringify(value, flagUndefined, '  ').replace(/"\/\* void\(undefined\) \*\/"/g, 'undefined');
        },
        warn: function () {
            canLog.warn.apply(this, arguments);
        },
        log: function () {
            canLog.log.apply(this, arguments);
        },
        error: function () {
            canLog.error.apply(this, arguments);
        },
        _logger: canLog._logger
    };
});
/*can-string@1.0.0#can-string*/
define('can-string@1.0.0#can-string', function (require, exports, module) {
    'use strict';
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        capitalize: function (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        undHash: strUndHash
    };
    module.exports = string;
});
/*can-construct@3.5.0#can-construct*/
define('can-construct@3.5.0#can-construct', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    'can-namespace',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    if (process.env.NODE_ENV !== 'production') {
        var CanString = require('can-string');
        var reservedWords = {
            'abstract': true,
            'boolean': true,
            'break': true,
            'byte': true,
            'case': true,
            'catch': true,
            'char': true,
            'class': true,
            'const': true,
            'continue': true,
            'debugger': true,
            'default': true,
            'delete': true,
            'do': true,
            'double': true,
            'else': true,
            'enum': true,
            'export': true,
            'extends': true,
            'false': true,
            'final': true,
            'finally': true,
            'float': true,
            'for': true,
            'function': true,
            'goto': true,
            'if': true,
            'implements': true,
            'import': true,
            'in': true,
            'instanceof': true,
            'int': true,
            'interface': true,
            'let': true,
            'long': true,
            'native': true,
            'new': true,
            'null': true,
            'package': true,
            'private': true,
            'protected': true,
            'public': true,
            'return': true,
            'short': true,
            'static': true,
            'super': true,
            'switch': true,
            'synchronized': true,
            'this': true,
            'throw': true,
            'throws': true,
            'transient': true,
            'true': true,
            'try': true,
            'typeof': true,
            'var': true,
            'void': true,
            'volatile': true,
            'while': true,
            'with': true
        };
        var constructorNameRegex = /[^A-Z0-9_]/gi;
    }
    var initializing = 0;
    if (process.env.NODE_ENV !== 'production') {
        var namedCtor = function (cache) {
            return function (name, fn) {
                return (name in cache ? cache[name] : cache[name] = new Function('__', 'function ' + name + '(){return __.apply(this,arguments)};return ' + name))(fn);
            };
        }({});
    }
    var Construct = function () {
        if (arguments.length) {
            return Construct.extend.apply(Construct, arguments);
        }
    };
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        };
    canReflect.assignMap(Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                Object.defineProperty(inst, '__inSetup', {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                args = inst.setup.apply(inst, arguments);
                if (args instanceof Construct.ReturnValue) {
                    return args.value;
                }
                inst.__inSetup = false;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            Object.defineProperty(what, propName, {
                value: val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        },
        setup: function (base) {
            var defaults = canReflect.assignDeepMap({}, base.defaults);
            this.defaults = canReflect.assignDeepMap(defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var shortName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof shortName !== 'string') {
                proto = klass;
                klass = shortName;
                shortName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, prototype;
            prototype = this.instance();
            Construct._inherit(proto, _super, prototype);
            if (shortName) {
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            var constructorName = shortName ? shortName.replace(constructorNameRegex, '_') : 'Constructor';
            if (process.env.NODE_ENV !== 'production') {
                if (reservedWords[constructorName]) {
                    constructorName = CanString.capitalize(constructorName);
                }
            }
            function init() {
                if (!initializing) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (!this || this.constructor !== Constructor && arguments.length && Constructor.constructorExtends) {
                            dev.warn('can/construct/construct.js: extending a Construct without calling extend');
                        }
                    }
                    return (!this || this.constructor !== Constructor) && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            Constructor = typeof namedCtor === 'function' ? namedCtor(constructorName, init) : function () {
                return init.apply(this, arguments);
            };
            for (var propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            Construct._inherit(klass, _super_class, Constructor);
            canReflect.assignMap(Constructor, {
                constructor: Constructor,
                prototype: prototype
            });
            if (shortName !== undefined) {
                if (Object.getOwnPropertyDescriptor) {
                    var desc = Object.getOwnPropertyDescriptor(Constructor, 'name');
                    if (!desc || desc.configurable) {
                        Object.defineProperty(Constructor, 'name', {
                            writable: true,
                            value: shortName,
                            configurable: true
                        });
                    }
                }
                Constructor.shortName = shortName;
            }
            Constructor.prototype.constructor = Constructor;
            var t = [_super_class].concat(Array.prototype.slice.call(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        },
        ReturnValue: function (value) {
            this.value = value;
        }
    });
    Construct.prototype.setup = function () {
    };
    Construct.prototype.init = function () {
    };
    module.exports = namespace.Construct = Construct;
});
/*can-queues@1.1.2#queue-state*/
define('can-queues@1.1.2#queue-state', function (require, exports, module) {
    module.exports = { lastTask: null };
});
/*can-assign@1.3.0#can-assign*/
define('can-assign@1.3.0#can-assign', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.assign = function (d, s) {
        for (var prop in s) {
            d[prop] = s[prop];
        }
        return d;
    };
});
/*can-queues@1.1.2#queue*/
define('can-queues@1.1.2#queue', [
    'require',
    'exports',
    'module',
    './queue-state',
    'can-log/dev/dev',
    'can-assign'
], function (require, exports, module) {
    var queueState = require('./queue-state');
    var canDev = require('can-log/dev/dev');
    var assign = require('can-assign');
    function noOperation() {
    }
    var Queue = function (name, callbacks) {
        this.callbacks = assign({
            onFirstTask: noOperation,
            onComplete: function () {
                queueState.lastTask = null;
            }
        }, callbacks || {});
        this.name = name;
        this.index = 0;
        this.tasks = [];
        this._log = false;
    };
    Queue.prototype.constructor = Queue;
    Queue.noop = noOperation;
    Queue.prototype.enqueue = function (fn, context, args, meta) {
        var len = this.tasks.push({
            fn: fn,
            context: context,
            args: args,
            meta: meta || {}
        });
        if (process.env.NODE_ENV !== 'production') {
            this._logEnqueue(this.tasks[len - 1]);
        }
        if (len === 1) {
            this.callbacks.onFirstTask(this);
        }
    };
    Queue.prototype.flush = function () {
        while (this.index < this.tasks.length) {
            var task = this.tasks[this.index++];
            if (process.env.NODE_ENV !== 'production') {
                this._logFlush(task);
            }
            task.fn.apply(task.context, task.args);
        }
        this.index = 0;
        this.tasks = [];
        this.callbacks.onComplete(this);
    };
    Queue.prototype.log = function () {
        this._log = arguments.length ? arguments[0] : true;
    };
    if (process.env.NODE_ENV !== 'production') {
        Queue.prototype._logEnqueue = function (task) {
            task.meta.parentTask = queueState.lastTask;
            task.meta.stack = this;
            if (this._log === true || this._log === 'enqueue') {
                var log = task.meta.log ? task.meta.log.concat(task) : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [this.name + ' enqueuing:'].concat(log));
            }
        };
        Queue.prototype._logFlush = function (task) {
            if (this._log === true || this._log === 'flush') {
                var log = task.meta.log ? task.meta.log.concat(task) : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [this.name + ' running  :'].concat(log));
            }
            queueState.lastTask = task;
        };
    }
    module.exports = Queue;
});
/*can-queues@1.1.2#priority-queue*/
define('can-queues@1.1.2#priority-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    var Queue = require('./queue');
    var PriorityQueue = function () {
        Queue.apply(this, arguments);
        this.taskMap = new Map();
        this.taskContainersByPriority = [];
        this.curPriorityIndex = Infinity;
        this.curPriorityMax = 0;
        this.isFlushing = false;
        this.tasksRemaining = 0;
    };
    PriorityQueue.prototype = Object.create(Queue.prototype);
    PriorityQueue.prototype.constructor = PriorityQueue;
    PriorityQueue.prototype.enqueue = function (fn, context, args, meta) {
        if (!this.taskMap.has(fn)) {
            this.tasksRemaining++;
            var isFirst = this.taskContainersByPriority.length === 0;
            var task = {
                fn: fn,
                context: context,
                args: args,
                meta: meta || {}
            };
            var taskContainer = this.getTaskContainerAndUpdateRange(task);
            taskContainer.tasks.push(task);
            this.taskMap.set(fn, task);
            if (process.env.NODE_ENV !== 'production') {
                this._logEnqueue(task);
            }
            if (isFirst) {
                this.callbacks.onFirstTask(this);
            }
        }
    };
    PriorityQueue.prototype.getTaskContainerAndUpdateRange = function (task) {
        var priority = task.meta.priority || 0;
        if (priority < this.curPriorityIndex) {
            this.curPriorityIndex = priority;
        }
        if (priority > this.curPriorityMax) {
            this.curPriorityMax = priority;
        }
        var tcByPriority = this.taskContainersByPriority;
        var taskContainer = tcByPriority[priority];
        if (!taskContainer) {
            taskContainer = tcByPriority[priority] = {
                tasks: [],
                index: 0
            };
        }
        return taskContainer;
    };
    PriorityQueue.prototype.flush = function () {
        if (this.isFlushing) {
            return;
        }
        this.isFlushing = true;
        while (true) {
            if (this.curPriorityIndex <= this.curPriorityMax) {
                var taskContainer = this.taskContainersByPriority[this.curPriorityIndex];
                if (taskContainer && taskContainer.tasks.length > taskContainer.index) {
                    var task = taskContainer.tasks[taskContainer.index++];
                    if (process.env.NODE_ENV !== 'production') {
                        this._logFlush(task);
                    }
                    this.tasksRemaining--;
                    this.taskMap['delete'](task.fn);
                    task.fn.apply(task.context, task.args);
                } else {
                    this.curPriorityIndex++;
                }
            } else {
                this.taskMap = new Map();
                this.curPriorityIndex = Infinity;
                this.curPriorityMax = 0;
                this.taskContainersByPriority = [];
                this.isFlushing = false;
                this.callbacks.onComplete(this);
                return;
            }
        }
    };
    PriorityQueue.prototype.isEnqueued = function (fn) {
        return this.taskMap.has(fn);
    };
    PriorityQueue.prototype.flushQueuedTask = function (fn) {
        var task = this.dequeue(fn);
        if (task) {
            if (process.env.NODE_ENV !== 'production') {
                this._logFlush(task);
            }
            task.fn.apply(task.context, task.args);
        }
    };
    PriorityQueue.prototype.dequeue = function (fn) {
        var task = this.taskMap.get(fn);
        if (task) {
            var priority = task.meta.priority || 0;
            var taskContainer = this.taskContainersByPriority[priority];
            var index = taskContainer.tasks.indexOf(task, taskContainer.index);
            if (index >= 0) {
                taskContainer.tasks.splice(index, 1);
                this.tasksRemaining--;
                this.taskMap['delete'](task.fn);
                return task;
            } else {
                console.warn('Task', fn, 'has already run');
            }
        }
    };
    PriorityQueue.prototype.tasksRemainingCount = function () {
        return this.tasksRemaining;
    };
    module.exports = PriorityQueue;
});
/*can-queues@1.1.2#completion-queue*/
define('can-queues@1.1.2#completion-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    var Queue = require('./queue');
    var CompletionQueue = function () {
        Queue.apply(this, arguments);
        this.flushCount = 0;
    };
    CompletionQueue.prototype = Object.create(Queue.prototype);
    CompletionQueue.prototype.constructor = CompletionQueue;
    CompletionQueue.prototype.flush = function () {
        if (this.flushCount === 0) {
            this.flushCount++;
            while (this.index < this.tasks.length) {
                var task = this.tasks[this.index++];
                if (process.env.NODE_ENV !== 'production') {
                    this._logFlush(task);
                }
                task.fn.apply(task.context, task.args);
            }
            this.index = 0;
            this.tasks = [];
            this.flushCount--;
            this.callbacks.onComplete(this);
        }
    };
    module.exports = CompletionQueue;
});
/*can-queues@1.1.2#can-queues*/
define('can-queues@1.1.2#can-queues', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    './queue',
    './priority-queue',
    './queue-state',
    './completion-queue',
    'can-namespace'
], function (require, exports, module) {
    var canDev = require('can-log/dev/dev');
    var Queue = require('./queue');
    var PriorityQueue = require('./priority-queue');
    var queueState = require('./queue-state');
    var CompletionQueue = require('./completion-queue');
    var ns = require('can-namespace');
    var batchStartCounter = 0;
    var addedTask = false;
    var isFlushing = false;
    var batchNum = 0;
    var batchData;
    var queueNames = [
        'notify',
        'derive',
        'domUI',
        'mutate'
    ];
    var NOTIFY_QUEUE, DERIVE_QUEUE, DOM_UI_QUEUE, MUTATE_QUEUE;
    NOTIFY_QUEUE = new Queue('NOTIFY', {
        onComplete: function () {
            DERIVE_QUEUE.flush();
        },
        onFirstTask: function () {
            if (!batchStartCounter) {
                NOTIFY_QUEUE.flush();
            } else {
                addedTask = true;
            }
        }
    });
    DERIVE_QUEUE = new PriorityQueue('DERIVE', {
        onComplete: function () {
            DOM_UI_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    DOM_UI_QUEUE = new CompletionQueue('DOM_UI', {
        onComplete: function () {
            MUTATE_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    MUTATE_QUEUE = new Queue('MUTATE', {
        onComplete: function () {
            queueState.lastTask = null;
            isFlushing = false;
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    var queues = {
        Queue: Queue,
        PriorityQueue: PriorityQueue,
        CompletionQueue: CompletionQueue,
        notifyQueue: NOTIFY_QUEUE,
        deriveQueue: DERIVE_QUEUE,
        domUIQueue: DOM_UI_QUEUE,
        mutateQueue: MUTATE_QUEUE,
        batch: {
            start: function () {
                batchStartCounter++;
                if (batchStartCounter === 1) {
                    batchNum++;
                    batchData = { number: batchNum };
                }
            },
            stop: function () {
                batchStartCounter--;
                if (batchStartCounter === 0) {
                    if (addedTask) {
                        addedTask = false;
                        isFlushing = true;
                        NOTIFY_QUEUE.flush();
                    }
                }
            },
            isCollecting: function () {
                return batchStartCounter > 0;
            },
            number: function () {
                return batchNum;
            },
            data: function () {
                return batchData;
            }
        },
        enqueueByQueue: function enqueueByQueue(fnByQueue, context, args, makeMeta, reasonLog) {
            if (fnByQueue) {
                queues.batch.start();
                queueNames.forEach(function (queueName) {
                    var name = queueName + 'Queue';
                    var QUEUE = queues[name];
                    var tasks = fnByQueue[queueName];
                    if (tasks !== undefined) {
                        tasks.forEach(function (fn) {
                            var meta = makeMeta != null ? makeMeta(fn, context, args) : {};
                            meta.reasonLog = reasonLog;
                            QUEUE.enqueue(fn, context, args, meta);
                        });
                    }
                });
                queues.batch.stop();
            }
        },
        stack: function () {
            var current = queueState.lastTask;
            var stack = [];
            while (current) {
                stack.unshift(current);
                current = current.meta.parentTask;
            }
            return stack;
        },
        logStack: function () {
            var stack = this.stack();
            stack.forEach(function (task, i) {
                var meta = task.meta;
                if (i === 0 && meta && meta.reasonLog) {
                    canDev.log.apply(canDev, meta.reasonLog);
                }
                var log = meta && meta.log ? meta.log : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [task.meta.stack.name + ' ran task:'].concat(log));
            });
        },
        taskCount: function () {
            return NOTIFY_QUEUE.tasks.length + DERIVE_QUEUE.tasks.length + DOM_UI_QUEUE.tasks.length + MUTATE_QUEUE.tasks.length;
        },
        flush: function () {
            NOTIFY_QUEUE.flush();
        },
        log: function () {
            NOTIFY_QUEUE.log.apply(NOTIFY_QUEUE, arguments);
            DERIVE_QUEUE.log.apply(DERIVE_QUEUE, arguments);
            DOM_UI_QUEUE.log.apply(DOM_UI_QUEUE, arguments);
            MUTATE_QUEUE.log.apply(MUTATE_QUEUE, arguments);
        }
    };
    if (ns.queues) {
        throw new Error('You can\'t have two versions of can-queues, check your dependencies');
    } else {
        module.exports = ns.queues = queues;
    }
});
/*can-observation-recorder@1.2.0#can-observation-recorder*/
define('can-observation-recorder@1.2.0#can-observation-recorder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canSymbol = require('can-symbol');
    var stack = [];
    var addParentSymbol = canSymbol.for('can.addParent');
    var ObservationRecorder = {
        stack: stack,
        start: function () {
            var deps = {
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                childDependencies: new Set(),
                traps: null,
                ignore: 0
            };
            stack.push(deps);
            return deps;
        },
        stop: function () {
            return stack.pop();
        },
        add: function (obj, event) {
            var top = stack[stack.length - 1];
            if (top && top.ignore === 0) {
                if (top.traps) {
                    top.traps.push([
                        obj,
                        event
                    ]);
                } else {
                    if (event === undefined) {
                        top.valueDependencies.add(obj);
                    } else {
                        var eventSet = top.keyDependencies.get(obj);
                        if (!eventSet) {
                            eventSet = new Set();
                            top.keyDependencies.set(obj, eventSet);
                        }
                        eventSet.add(event);
                    }
                }
            }
        },
        addMany: function (observes) {
            var top = stack[stack.length - 1];
            if (top) {
                if (top.traps) {
                    top.traps.push.apply(top.traps, observes);
                } else {
                    for (var i = 0, len = observes.length; i < len; i++) {
                        this.add(observes[i][0], observes[i][1]);
                    }
                }
            }
        },
        created: function (obs) {
            var top = stack[stack.length - 1];
            if (top) {
                top.childDependencies.add(obs);
                if (obs[addParentSymbol]) {
                    obs[addParentSymbol](top);
                }
            }
        },
        ignore: function (fn) {
            return function () {
                if (stack.length) {
                    var top = stack[stack.length - 1];
                    top.ignore++;
                    var res = fn.apply(this, arguments);
                    top.ignore--;
                    return res;
                } else {
                    return fn.apply(this, arguments);
                }
            };
        },
        isRecording: function () {
            var len = stack.length;
            var last = len && stack[len - 1];
            return last && last.ignore === 0 && last;
        },
        makeDependenciesRecord: function () {
            return {
                traps: null,
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                ignore: 0
            };
        },
        makeDependenciesRecorder: function () {
            return ObservationRecorder.makeDependenciesRecord();
        },
        trap: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                var oldTraps = top.traps;
                var traps = top.traps = [];
                return function () {
                    top.traps = oldTraps;
                    return traps;
                };
            } else {
                return function () {
                    return [];
                };
            }
        },
        trapsCount: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                return top.traps.length;
            } else {
                return 0;
            }
        }
    };
    if (namespace.ObservationRecorder) {
        throw new Error('You can\'t have two versions of can-observation-recorder, check your dependencies');
    } else {
        module.exports = namespace.ObservationRecorder = ObservationRecorder;
    }
});
/*can-key-tree@1.2.0#can-key-tree*/
define('can-key-tree@1.2.0#can-key-tree', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var reflect = require('can-reflect');
    function isBuiltInPrototype(obj) {
        if (obj === Object.prototype) {
            return true;
        }
        var protoString = Object.prototype.toString.call(obj);
        var isNotObjObj = protoString !== '[object Object]';
        var isObjSomething = protoString.indexOf('[object ') !== -1;
        return isNotObjObj && isObjSomething;
    }
    function getDeepSize(root, level) {
        if (level === 0) {
            return reflect.size(root);
        } else if (reflect.size(root) === 0) {
            return 0;
        } else {
            var count = 0;
            reflect.each(root, function (value) {
                count += getDeepSize(value, level - 1);
            });
            return count;
        }
    }
    function getDeep(node, items, depth, maxDepth) {
        if (!node) {
            return;
        }
        if (maxDepth === depth) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                reflect.addValues(items, reflect.toArray(node));
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value) {
                getDeep(value, items, depth + 1, maxDepth);
            });
        }
    }
    function clearDeep(node, keys, maxDepth, deleteHandler) {
        if (maxDepth === keys.length) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                var valuesToRemove = reflect.toArray(node);
                if (deleteHandler) {
                    valuesToRemove.forEach(function (value) {
                        deleteHandler.apply(null, keys.concat(value));
                    });
                }
                reflect.removeValues(node, valuesToRemove);
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value, key) {
                clearDeep(value, keys.concat(key), maxDepth, deleteHandler);
                reflect.deleteKeyValue(node, key);
            });
        }
    }
    var KeyTree = function (treeStructure, callbacks) {
        var FirstConstructor = treeStructure[0];
        if (reflect.isConstructorLike(FirstConstructor)) {
            this.root = new FirstConstructor();
        } else {
            this.root = FirstConstructor;
        }
        this.callbacks = callbacks || {};
        this.treeStructure = treeStructure;
        this.empty = true;
    };
    reflect.assign(KeyTree.prototype, {
        add: function (keys) {
            if (keys.length > this.treeStructure.length) {
                throw new Error('can-key-tree: Can not add path deeper than tree.');
            }
            var place = this.root;
            var rootWasEmpty = this.empty === true;
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(place, key);
                if (!childNode) {
                    var Constructor = this.treeStructure[i + 1];
                    if (isBuiltInPrototype(Constructor.prototype)) {
                        childNode = new Constructor();
                    } else {
                        childNode = new Constructor(key);
                    }
                    reflect.setKeyValue(place, key, childNode);
                }
                place = childNode;
            }
            if (reflect.isMoreListLikeThanMapLike(place)) {
                reflect.addValues(place, [keys[keys.length - 1]]);
            } else {
                throw new Error('can-key-tree: Map types are not supported yet.');
            }
            if (rootWasEmpty) {
                this.empty = false;
                if (this.callbacks.onFirst) {
                    this.callbacks.onFirst.call(this);
                }
            }
            return this;
        },
        getNode: function (keys) {
            var node = this.root;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                node = reflect.getKeyValue(node, key);
                if (!node) {
                    return;
                }
            }
            return node;
        },
        get: function (keys) {
            var node = this.getNode(keys);
            if (this.treeStructure.length === keys.length) {
                return node;
            } else {
                var Type = this.treeStructure[this.treeStructure.length - 1];
                var items = new Type();
                getDeep(node, items, keys.length, this.treeStructure.length - 1);
                return items;
            }
        },
        delete: function (keys, deleteHandler) {
            var parentNode = this.root, path = [this.root], lastKey = keys[keys.length - 1];
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(parentNode, key);
                if (childNode === undefined) {
                    return false;
                } else {
                    path.push(childNode);
                }
                parentNode = childNode;
            }
            if (!keys.length) {
                clearDeep(parentNode, [], this.treeStructure.length - 1, deleteHandler);
            } else if (keys.length === this.treeStructure.length) {
                if (reflect.isMoreListLikeThanMapLike(parentNode)) {
                    if (deleteHandler) {
                        deleteHandler.apply(null, keys.concat(lastKey));
                    }
                    reflect.removeValues(parentNode, [lastKey]);
                } else {
                    throw new Error('can-key-tree: Map types are not supported yet.');
                }
            } else {
                var nodeToRemove = reflect.getKeyValue(parentNode, lastKey);
                if (nodeToRemove !== undefined) {
                    clearDeep(nodeToRemove, keys, this.treeStructure.length - 1, deleteHandler);
                    reflect.deleteKeyValue(parentNode, lastKey);
                } else {
                    return false;
                }
            }
            for (i = path.length - 2; i >= 0; i--) {
                if (reflect.size(parentNode) === 0) {
                    parentNode = path[i];
                    reflect.deleteKeyValue(parentNode, keys[i]);
                } else {
                    break;
                }
            }
            if (reflect.size(this.root) === 0) {
                this.empty = true;
                if (this.callbacks.onEmpty) {
                    this.callbacks.onEmpty.call(this);
                }
            }
            return true;
        },
        size: function () {
            return getDeepSize(this.root, this.treeStructure.length - 1);
        },
        isEmpty: function () {
            return this.empty;
        }
    });
    module.exports = KeyTree;
});
/*can-define-lazy-value@1.1.0#define-lazy-value*/
define('can-define-lazy-value@1.1.0#define-lazy-value', function (require, exports, module) {
    'use strict';
    module.exports = function defineLazyValue(obj, prop, initializer, writable) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            get: function () {
                Object.defineProperty(this, prop, {
                    value: undefined,
                    writable: true
                });
                var value = initializer.call(this, obj, prop);
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            },
            set: function (value) {
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            }
        });
    };
});
/*can-event-queue@1.1.0#dependency-record/merge*/
define('can-event-queue@1.1.0#dependency-record/merge', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var mergeValueDependencies = function mergeValueDependencies(obj, source) {
        var sourceValueDeps = source.valueDependencies;
        if (sourceValueDeps) {
            var destValueDeps = obj.valueDependencies;
            if (!destValueDeps) {
                destValueDeps = new Set();
                obj.valueDependencies = destValueDeps;
            }
            canReflect.eachIndex(sourceValueDeps, function (dep) {
                destValueDeps.add(dep);
            });
        }
    };
    var mergeKeyDependencies = function mergeKeyDependencies(obj, source) {
        var sourcekeyDeps = source.keyDependencies;
        if (sourcekeyDeps) {
            var destKeyDeps = obj.keyDependencies;
            if (!destKeyDeps) {
                destKeyDeps = new Map();
                obj.keyDependencies = destKeyDeps;
            }
            canReflect.eachKey(sourcekeyDeps, function (keys, obj) {
                var entry = destKeyDeps.get(obj);
                if (!entry) {
                    entry = new Set();
                    destKeyDeps.set(obj, entry);
                }
                canReflect.eachIndex(keys, function (key) {
                    entry.add(key);
                });
            });
        }
    };
    module.exports = function mergeDependencyRecords(object, source) {
        mergeKeyDependencies(object, source);
        mergeValueDependencies(object, source);
        return object;
    };
});
/*can-event-queue@1.1.0#value/value*/
define('can-event-queue@1.1.0#value/value', [
    'require',
    'exports',
    'module',
    'can-queues',
    'can-key-tree',
    'can-reflect',
    'can-define-lazy-value',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var defineLazyValue = require('can-define-lazy-value');
    var mergeDependencyRecords = require('../dependency-record/merge');
    var properties = {
        on: function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        off: function (handler, queueName) {
            if (handler === undefined) {
                if (queueName === undefined) {
                    this.handlers.delete([]);
                } else {
                    this.handlers.delete([queueName]);
                }
            } else {
                this.handlers.delete([
                    queueName || 'mutate',
                    handler
                ]);
            }
        }
    };
    var symbols = {
        'can.onValue': properties.on,
        'can.offValue': properties.off,
        'can.dispatch': function (value, old) {
            var queuesArgs = [];
            queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    value,
                    old
                ]
            ];
            if (process.env.NODE_ENV !== 'production') {
                queuesArgs = [
                    this.handlers.getNode([]),
                    this,
                    [
                        value,
                        old
                    ],
                    null,
                    [
                        canReflect.getName(this),
                        'changed to',
                        value,
                        'from',
                        old
                    ]
                ];
            }
            queues.enqueueByQueue.apply(queues, queuesArgs);
            if (process.env.NODE_ENV !== 'production') {
                if (typeof this._log === 'function') {
                    this._log(old, value);
                }
            }
        },
        'can.getWhatIChange': function getWhatIChange() {
            if (process.env.NODE_ENV !== 'production') {
                var whatIChange = {};
                var notifyHandlers = this.handlers.get(['notify']);
                var mutateHandlers = [].concat(this.handlers.get(['mutate']), this.handlers.get(['domUI']));
                if (notifyHandlers.length) {
                    notifyHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.derive;
                            if (!record) {
                                record = whatIChange.derive = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                if (mutateHandlers.length) {
                    mutateHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.mutate;
                            if (!record) {
                                record = whatIChange.mutate = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                return Object.keys(whatIChange).length ? whatIChange : undefined;
            }
        },
        'can.isBound': function isBound() {
            return !this.handlers.isEmpty();
        }
    };
    function defineLazyHandlers() {
        return new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.onBound !== undefined && this.onBound.bind(this),
            onEmpty: this.onUnbound !== undefined && this.onUnbound.bind(this)
        });
    }
    var mixinValueEventBindings = function (obj) {
        canReflect.assign(obj, properties);
        canReflect.assignSymbols(obj, symbols);
        defineLazyValue(obj, 'handlers', defineLazyHandlers, true);
        return obj;
    };
    mixinValueEventBindings.addHandlers = function (obj, callbacks) {
        console.warn('can-event-queue/value: Avoid using addHandlers. Add onBound and onUnbound methods instead.');
        obj.handlers = new KeyTree([
            Object,
            Array
        ], callbacks);
        return obj;
    };
    module.exports = mixinValueEventBindings;
});
/*can-observation@4.1.0#recorder-dependency-helpers*/
define('can-observation@4.1.0#recorder-dependency-helpers', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function addNewKeyDependenciesIfNotInOld(event) {
        if (this.oldEventSet === undefined || this.oldEventSet['delete'](event) === false) {
            canReflect.onKeyValue(this.observable, event, this.onDependencyChange, 'notify');
        }
    }
    function addObservablesNewKeyDependenciesIfNotInOld(eventSet, observable) {
        eventSet.forEach(addNewKeyDependenciesIfNotInOld, {
            onDependencyChange: this.onDependencyChange,
            observable: observable,
            oldEventSet: this.oldDependencies.keyDependencies.get(observable)
        });
    }
    function removeKeyDependencies(event) {
        canReflect.offKeyValue(this.observable, event, this.onDependencyChange, 'notify');
    }
    function removeObservablesKeyDependencies(oldEventSet, observable) {
        oldEventSet.forEach(removeKeyDependencies, {
            onDependencyChange: this.onDependencyChange,
            observable: observable
        });
    }
    function addValueDependencies(observable) {
        if (this.oldDependencies.valueDependencies.delete(observable) === false) {
            canReflect.onValue(observable, this.onDependencyChange, 'notify');
        }
    }
    function removeValueDependencies(observable) {
        canReflect.offValue(observable, this.onDependencyChange, 'notify');
    }
    module.exports = {
        updateObservations: function (observationData) {
            observationData.newDependencies.keyDependencies.forEach(addObservablesNewKeyDependenciesIfNotInOld, observationData);
            observationData.oldDependencies.keyDependencies.forEach(removeObservablesKeyDependencies, observationData);
            observationData.newDependencies.valueDependencies.forEach(addValueDependencies, observationData);
            observationData.oldDependencies.valueDependencies.forEach(removeValueDependencies, observationData);
        },
        stopObserving: function (observationReciever, onDependencyChange) {
            observationReciever.keyDependencies.forEach(removeObservablesKeyDependencies, { onDependencyChange: onDependencyChange });
            observationReciever.valueDependencies.forEach(removeValueDependencies, { onDependencyChange: onDependencyChange });
        }
    };
});
/*can-observation@4.1.0#temporarily-bind*/
define('can-observation@4.1.0#temporarily-bind', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var temporarilyBoundNoOperation = function () {
    };
    var observables;
    var unbindTemporarilyBoundValue = function () {
        for (var i = 0, len = observables.length; i < len; i++) {
            canReflect.offValue(observables[i], temporarilyBoundNoOperation);
        }
        observables = null;
    };
    function temporarilyBind(compute) {
        var computeInstance = compute.computeInstance || compute;
        canReflect.onValue(computeInstance, temporarilyBoundNoOperation);
        if (!observables) {
            observables = [];
            setTimeout(unbindTemporarilyBoundValue, 10);
        }
        observables.push(computeInstance);
    }
    module.exports = temporarilyBind;
});
/*can-observation@4.1.0#can-observation*/
define('can-observation@4.1.0#can-observation', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-queues',
    'can-observation-recorder',
    'can-symbol',
    'can-log/dev/dev',
    'can-event-queue/value/value',
    './recorder-dependency-helpers',
    './temporarily-bind'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var queues = require('can-queues');
        var ObservationRecorder = require('can-observation-recorder');
        var canSymbol = require('can-symbol');
        var dev = require('can-log/dev/dev');
        var valueEventBindings = require('can-event-queue/value/value');
        var recorderHelpers = require('./recorder-dependency-helpers');
        var temporarilyBind = require('./temporarily-bind');
        var dispatchSymbol = canSymbol.for('can.dispatch');
        var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
        var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
        function Observation(func, context, options) {
            this.func = func;
            this.context = context;
            this.options = options || {
                priority: 0,
                isObservable: true
            };
            this.bound = false;
            this._value = undefined;
            this.newDependencies = ObservationRecorder.makeDependenciesRecord();
            this.oldDependencies = null;
            var self = this;
            this.onDependencyChange = function (newVal) {
                self.dependencyChange(this, newVal);
            };
            this.update = this.update.bind(this);
            if (process.env.NODE_ENV !== 'production') {
                this.onDependencyChange[getChangesSymbol] = function getChanges() {
                    return { valueDependencies: new Set([self]) };
                };
                Object.defineProperty(this.onDependencyChange, 'name', { value: canReflect.getName(this) + '.onDependencyChange' });
                Object.defineProperty(this.update, 'name', { value: canReflect.getName(this) + '.update' });
            }
        }
        valueEventBindings(Observation.prototype);
        canReflect.assign(Observation.prototype, {
            onBound: function () {
                this.bound = true;
                this.oldDependencies = this.newDependencies;
                ObservationRecorder.start();
                this._value = this.func.call(this.context);
                this.newDependencies = ObservationRecorder.stop();
                recorderHelpers.updateObservations(this);
            },
            dependencyChange: function (context, args) {
                if (this.bound === true) {
                    var queuesArgs = [];
                    queuesArgs = [
                        this.update,
                        this,
                        [],
                        { priority: this.options.priority }
                    ];
                    if (process.env.NODE_ENV !== 'production') {
                        queuesArgs = [
                            this.update,
                            this,
                            [],
                            {
                                priority: this.options.priority,
                                log: [canReflect.getName(this.update)]
                            },
                            [
                                canReflect.getName(context),
                                'changed'
                            ]
                        ];
                    }
                    queues.deriveQueue.enqueue.apply(queues.deriveQueue, queuesArgs);
                }
            },
            update: function () {
                if (this.bound === true) {
                    var oldValue = this._value;
                    this.oldValue = null;
                    this.onBound();
                    if (oldValue !== this._value) {
                        this[dispatchSymbol](this._value, oldValue);
                    }
                }
            },
            onUnbound: function () {
                this.bound = false;
                recorderHelpers.stopObserving(this.newDependencies, this.onDependencyChange);
                this.newDependencies = ObservationRecorder.makeDependenciesRecorder();
            },
            get: function () {
                if (this.options.isObservable && ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                if (this.bound === true) {
                    if (queues.deriveQueue.tasksRemainingCount() > 0) {
                        Observation.updateChildrenAndSelf(this);
                    }
                    return this._value;
                } else {
                    return this.func.call(this.context);
                }
            },
            hasDependencies: function () {
                var newDependencies = this.newDependencies;
                return this.bound ? newDependencies.valueDependencies.size + newDependencies.keyDependencies.size > 0 : undefined;
            },
            log: function () {
                if (process.env.NODE_ENV !== 'production') {
                    var quoteString = function quoteString(x) {
                        return typeof x === 'string' ? JSON.stringify(x) : x;
                    };
                    this._log = function (previous, current) {
                        dev.log(canReflect.getName(this), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
                    };
                }
            }
        });
        Object.defineProperty(Observation.prototype, 'value', {
            get: function () {
                return this.get();
            }
        });
        var observationProto = {
            'can.getValue': Observation.prototype.get,
            'can.isValueLike': true,
            'can.isMapLike': false,
            'can.isListLike': false,
            'can.valueHasDependencies': Observation.prototype.hasDependencies,
            'can.getValueDependencies': function () {
                if (this.bound === true) {
                    var deps = this.newDependencies, result = {};
                    if (deps.keyDependencies.size) {
                        result.keyDependencies = deps.keyDependencies;
                    }
                    if (deps.valueDependencies.size) {
                        result.valueDependencies = deps.valueDependencies;
                    }
                    return result;
                }
                return undefined;
            },
            'can.getPriority': function () {
                return this.options.priority;
            },
            'can.setPriority': function (priority) {
                this.options.priority = priority;
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            observationProto['can.getName'] = function () {
                return canReflect.getName(this.constructor) + '<' + canReflect.getName(this.func) + '>';
            };
        }
        canReflect.assignSymbols(Observation.prototype, observationProto);
        Observation.updateChildrenAndSelf = function (observation) {
            if (observation.update !== undefined && queues.deriveQueue.isEnqueued(observation.update) === true) {
                queues.deriveQueue.flushQueuedTask(observation.update);
                return true;
            }
            if (observation[getValueDependenciesSymbol]) {
                var childHasChanged = false;
                var valueDependencies = observation[getValueDependenciesSymbol]().valueDependencies || [];
                valueDependencies.forEach(function (observable) {
                    if (Observation.updateChildrenAndSelf(observable) === true) {
                        childHasChanged = true;
                    }
                });
                return childHasChanged;
            } else {
                return false;
            }
        };
        var alias = { addAll: 'addMany' };
        [
            'add',
            'addAll',
            'ignore',
            'trap',
            'trapsCount',
            'isRecording'
        ].forEach(function (methodName) {
            Observation[methodName] = function () {
                var name = alias[methodName] ? alias[methodName] : methodName;
                console.warn('can-observation: Call ' + name + '() on can-observation-recorder.');
                return ObservationRecorder[name].apply(this, arguments);
            };
        });
        Observation.prototype.start = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onBound();
        };
        Observation.prototype.stop = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onUnbound();
        };
        Observation.temporarilyBind = temporarilyBind;
        module.exports = namespace.Observation = Observation;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-simple-observable@2.2.0#log*/
define('can-simple-observable@2.2.0#log', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    function quoteString(x) {
        return typeof x === 'string' ? JSON.stringify(x) : x;
    }
    module.exports = function log() {
        if (process.env.NODE_ENV !== 'production') {
            this._log = function (previous, current) {
                dev.log(canReflect.getName(this), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
            };
        }
    };
});
/*can-simple-observable@2.2.0#can-simple-observable*/
define('can-simple-observable@2.2.0#can-simple-observable', [
    'require',
    'exports',
    'module',
    './log',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var log = require('./log');
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    function SimpleObservable(initialValue) {
        this.value = initialValue;
    }
    valueEventBindings(SimpleObservable.prototype);
    Object.assign(SimpleObservable.prototype, {
        log: log,
        get: function () {
            ObservationRecorder.add(this);
            return this.value;
        },
        set: function (value) {
            var old = this.value;
            this.value = value;
            this[dispatchSymbol](value, old);
        }
    });
    var simpleObservableProto = {
        'can.getValue': SimpleObservable.prototype.get,
        'can.setValue': SimpleObservable.prototype.set,
        'can.isMapLike': false,
        'can.valueHasDependencies': function () {
            return true;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        simpleObservableProto['can.getName'] = function () {
            var value = this.value;
            if (typeof value !== 'object' || value === null) {
                value = JSON.stringify(value);
            } else {
                value = '';
            }
            return canReflect.getName(this.constructor) + '<' + value + '>';
        };
    }
    canReflect.assignSymbols(SimpleObservable.prototype, simpleObservableProto);
    module.exports = ns.SimpleObservable = SimpleObservable;
});
/*can-simple-observable@2.2.0#settable/settable*/
define('can-simple-observable@2.2.0#settable/settable', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../log',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var log = require('../log');
    var valueEventBindings = require('can-event-queue/value/value');
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    function SettableObservable(fn, context, initialValue) {
        this.lastSetValue = new SimpleObservable(initialValue);
        function observe() {
            return fn.call(context, this.lastSetValue.get());
        }
        this.handler = this.handler.bind(this);
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(fn) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
            Object.defineProperty(observe, 'name', { value: canReflect.getName(fn) + '::' + canReflect.getName(this.constructor) });
        }
        this.observation = new Observation(observe, this);
    }
    valueEventBindings(SettableObservable.prototype);
    Object.assign(SettableObservable.prototype, {
        log: log,
        constructor: SettableObservable,
        handler: function (newVal) {
            var old = this.value;
            this.value = newVal;
            if (process.env.NODE_ENV !== 'production') {
                if (typeof this._log === 'function') {
                    this._log(old, newVal);
                }
            }
            queues.enqueueByQueue(this.handlers.getNode([]), this, [
                newVal,
                old
            ], function () {
                return {};
            });
        },
        onBound: function () {
            if (!this.bound) {
                this.bound = true;
                this.activate();
            }
        },
        activate: function () {
            canReflect.onValue(this.observation, this.handler, 'notify');
            this.value = peek(this.observation);
        },
        onUnbound: function () {
            this.bound = false;
            canReflect.offValue(this.observation, this.handler, 'notify');
        },
        set: function (newVal) {
            var oldVal = this.lastSetValue.get();
            if (canReflect.isObservableLike(oldVal) && canReflect.isValueLike(oldVal) && !canReflect.isObservableLike(newVal)) {
                canReflect.setValue(oldVal, newVal);
            } else {
                if (newVal !== oldVal) {
                    this.lastSetValue.set(newVal);
                }
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                return this.observation.get();
            }
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        },
        getValueDependencies: function () {
            return canReflect.getValueDependencies(this.observation);
        }
    });
    canReflect.assignSymbols(SettableObservable.prototype, {
        'can.getValue': SettableObservable.prototype.get,
        'can.setValue': SettableObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        },
        'can.valueHasDependencies': SettableObservable.prototype.hasDependencies,
        'can.getValueDependencies': SettableObservable.prototype.getValueDependencies
    });
    module.exports = SettableObservable;
});
/*can-simple-observable@2.2.0#async/async*/
define('can-simple-observable@2.2.0#async/async', [
    'require',
    'exports',
    'module',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../settable/settable',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var SettableObservable = require('../settable/settable');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    function AsyncObservable(fn, context, initialValue) {
        this.resolve = this.resolve.bind(this);
        this.lastSetValue = new SimpleObservable(initialValue);
        this.handler = this.handler.bind(this);
        function observe() {
            this.resolveCalled = false;
            this.inGetter = true;
            var newVal = fn.call(context, this.lastSetValue.get(), this.bound === true ? this.resolve : undefined);
            this.inGetter = false;
            if (newVal !== undefined) {
                this.resolve(newVal);
            } else if (this.resolveCalled) {
                this.resolve(this.value);
            }
            if (this.bound !== true) {
                return newVal;
            }
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(fn) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
            Object.defineProperty(observe, 'name', { value: canReflect.getName(fn) + '::' + canReflect.getName(this.constructor) });
        }
        this.observation = new Observation(observe, this);
    }
    AsyncObservable.prototype = Object.create(SettableObservable.prototype);
    AsyncObservable.prototype.constructor = AsyncObservable;
    AsyncObservable.prototype.handler = function (newVal) {
        if (newVal !== undefined) {
            SettableObservable.prototype.handler.apply(this, arguments);
        }
    };
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    AsyncObservable.prototype.activate = function () {
        canReflect.onValue(this.observation, this.handler, 'notify');
        if (!this.resolveCalled) {
            this.value = peek(this.observation);
        }
    };
    AsyncObservable.prototype.resolve = function resolve(newVal) {
        this.resolveCalled = true;
        var old = this.value;
        this.value = newVal;
        if (process.env.NODE_ENV !== 'production') {
            if (typeof this._log === 'function') {
                this._log(old, newVal);
            }
        }
        if (!this.inGetter) {
            var queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    newVal,
                    old
                ],
                null
            ];
            if (process.env.NODE_ENV !== 'production') {
                queuesArgs = [
                    this.handlers.getNode([]),
                    this,
                    [
                        newVal,
                        old
                    ],
                    null,
                    [
                        canReflect.getName(this),
                        'resolved with',
                        newVal
                    ]
                ];
            }
            queues.enqueueByQueue.apply(queues, queuesArgs);
        }
    };
    module.exports = AsyncObservable;
});
/*can-globals@1.2.0#can-globals-proto*/
define('can-globals@1.2.0#can-globals-proto', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        function dispatch(key) {
            var handlers = this.eventHandlers[key];
            if (handlers) {
                var handlersCopy = handlers.slice();
                var value = this.getKeyValue(key);
                for (var i = 0; i < handlersCopy.length; i++) {
                    handlersCopy[i](value);
                }
            }
        }
        function Globals() {
            this.eventHandlers = {};
            this.properties = {};
        }
        Globals.prototype.define = function (key, value, enableCache) {
            if (enableCache === undefined) {
                enableCache = true;
            }
            if (!this.properties[key]) {
                this.properties[key] = {
                    default: value,
                    value: value,
                    enableCache: enableCache
                };
            }
            return this;
        };
        Globals.prototype.getKeyValue = function (key) {
            var property = this.properties[key];
            if (property) {
                if (typeof property.value === 'function') {
                    if (property.cachedValue) {
                        return property.cachedValue;
                    }
                    if (property.enableCache) {
                        property.cachedValue = property.value();
                        return property.cachedValue;
                    } else {
                        return property.value();
                    }
                }
                return property.value;
            }
        };
        Globals.prototype.makeExport = function (key) {
            return function (value) {
                if (arguments.length === 0) {
                    return this.getKeyValue(key);
                }
                if (typeof value === 'undefined' || value === null) {
                    this.deleteKeyValue(key);
                } else {
                    if (typeof value === 'function') {
                        this.setKeyValue(key, function () {
                            return value;
                        });
                    } else {
                        this.setKeyValue(key, value);
                    }
                    return value;
                }
            }.bind(this);
        };
        Globals.prototype.offKeyValue = function (key, handler) {
            if (this.properties[key]) {
                var handlers = this.eventHandlers[key];
                if (handlers) {
                    var i = handlers.indexOf(handler);
                    handlers.splice(i, 1);
                }
            }
            return this;
        };
        Globals.prototype.onKeyValue = function (key, handler) {
            if (this.properties[key]) {
                if (!this.eventHandlers[key]) {
                    this.eventHandlers[key] = [];
                }
                this.eventHandlers[key].push(handler);
            }
            return this;
        };
        Globals.prototype.deleteKeyValue = function (key) {
            var property = this.properties[key];
            if (property !== undefined) {
                property.value = property.default;
                property.cachedValue = undefined;
                dispatch.call(this, key);
            }
            return this;
        };
        Globals.prototype.setKeyValue = function (key, value) {
            if (!this.properties[key]) {
                return this.define(key, value);
            }
            var property = this.properties[key];
            property.value = value;
            property.cachedValue = undefined;
            dispatch.call(this, key);
            return this;
        };
        Globals.prototype.reset = function () {
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    this.properties[key].value = this.properties[key].default;
                    this.properties[key].cachedValue = undefined;
                    dispatch.call(this, key);
                }
            }
            return this;
        };
        canReflect.assignSymbols(Globals.prototype, {
            'can.getKeyValue': Globals.prototype.getKeyValue,
            'can.setKeyValue': Globals.prototype.setKeyValue,
            'can.deleteKeyValue': Globals.prototype.deleteKeyValue,
            'can.onKeyValue': Globals.prototype.onKeyValue,
            'can.offKeyValue': Globals.prototype.offKeyValue
        });
        module.exports = Globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#can-globals-instance*/
define('can-globals@1.2.0#can-globals-instance', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './can-globals-proto'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var Globals = require('./can-globals-proto');
        var globals = new Globals();
        if (namespace.globals) {
            throw new Error('You can\'t have two versions of can-globals, check your dependencies');
        } else {
            module.exports = namespace.globals = globals;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#global/global*/
define('can-globals@1.2.0#global/global', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('global', function () {
            return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : typeof process === 'object' && {}.toString.call(process) === '[object process]' ? global : window;
        });
        module.exports = globals.makeExport('global');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#document/document*/
define('can-globals@1.2.0#document/document', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('document', function () {
            return globals.getKeyValue('global').document;
        });
        module.exports = globals.makeExport('document');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-node/is-node*/
define('can-globals@1.2.0#is-node/is-node', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('isNode', function () {
            return typeof process === 'object' && {}.toString.call(process) === '[object process]';
        });
        module.exports = globals.makeExport('isNode');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-browser-window/is-browser-window*/
define('can-globals@1.2.0#is-browser-window/is-browser-window', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    '../is-node/is-node'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('../is-node/is-node');
        globals.define('isBrowserWindow', function () {
            var isNode = globals.getKeyValue('isNode');
            return typeof window !== 'undefined' && typeof document !== 'undefined' && isNode === false;
        });
        module.exports = globals.makeExport('isBrowserWindow');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-events@1.3.0#helpers/util*/
define('can-dom-events@1.3.0#helpers/util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getCurrentDocument = require('can-globals/document/document');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        function getTargetDocument(target) {
            return target.ownerDocument || getCurrentDocument();
        }
        function createEvent(target, eventData, bubbles, cancelable) {
            var doc = getTargetDocument(target);
            var event = doc.createEvent('HTMLEvents');
            var eventType;
            if (typeof eventData === 'string') {
                eventType = eventData;
            } else {
                eventType = eventData.type;
                for (var prop in eventData) {
                    if (event[prop] === undefined) {
                        event[prop] = eventData[prop];
                    }
                }
            }
            if (bubbles === undefined) {
                bubbles = true;
            }
            event.initEvent(eventType, bubbles, cancelable);
            return event;
        }
        function isDomEventTarget(obj) {
            if (!(obj && obj.nodeName)) {
                return obj === window;
            }
            var nodeType = obj.nodeType;
            return nodeType === 1 || nodeType === 9 || nodeType === 11;
        }
        function addDomContext(context, args) {
            if (isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                args.unshift(context);
            }
            return args;
        }
        function removeDomContext(context, args) {
            if (!isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                context = args.shift();
            }
            return {
                context: context,
                args: args
            };
        }
        var fixSyntheticEventsOnDisabled = false;
        (function () {
            if (!isBrowserWindow()) {
                return;
            }
            var testEventName = 'fix_synthetic_events_on_disabled_test';
            var input = document.createElement('input');
            input.disabled = true;
            var timer = setTimeout(function () {
                fixSyntheticEventsOnDisabled = true;
            }, 50);
            var onTest = function onTest() {
                clearTimeout(timer);
                input.removeEventListener(testEventName, onTest);
            };
            input.addEventListener(testEventName, onTest);
            try {
                var event = document.create('HTMLEvents');
                event.initEvent(testEventName, false);
                input.dispatchEvent(event);
            } catch (e) {
                onTest();
                fixSyntheticEventsOnDisabled = true;
            }
        }());
        function isDispatchingOnDisabled(element, event) {
            var eventType = event.type;
            var isInsertedOrRemoved = eventType === 'inserted' || eventType === 'removed';
            var isDisabled = !!element.disabled;
            return isInsertedOrRemoved && isDisabled;
        }
        function forceEnabledForDispatch(element, event) {
            return fixSyntheticEventsOnDisabled && isDispatchingOnDisabled(element, event);
        }
        module.exports = {
            createEvent: createEvent,
            addDomContext: addDomContext,
            removeDomContext: removeDomContext,
            isDomEventTarget: isDomEventTarget,
            getTargetDocument: getTargetDocument,
            forceEnabledForDispatch: forceEnabledForDispatch
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-events@1.3.0#helpers/make-event-registry*/
define('can-dom-events@1.3.0#helpers/make-event-registry', function (require, exports, module) {
    'use strict';
    function EventRegistry() {
        this._registry = {};
    }
    module.exports = function makeEventRegistry() {
        return new EventRegistry();
    };
    EventRegistry.prototype.has = function (eventType) {
        return !!this._registry[eventType];
    };
    EventRegistry.prototype.get = function (eventType) {
        return this._registry[eventType];
    };
    EventRegistry.prototype.add = function (event, eventType) {
        if (!event) {
            throw new Error('An EventDefinition must be provided');
        }
        if (typeof event.addEventListener !== 'function') {
            throw new TypeError('EventDefinition addEventListener must be a function');
        }
        if (typeof event.removeEventListener !== 'function') {
            throw new TypeError('EventDefinition removeEventListener must be a function');
        }
        eventType = eventType || event.defaultEventType;
        if (typeof eventType !== 'string') {
            throw new TypeError('Event type must be a string, not ' + eventType);
        }
        if (this.has(eventType)) {
            throw new Error('Event "' + eventType + '" is already registered');
        }
        this._registry[eventType] = event;
        var self = this;
        return function remove() {
            self._registry[eventType] = undefined;
        };
    };
});
/*can-dom-events@1.3.0#helpers/-make-delegate-event-tree*/
define('can-dom-events@1.3.0#helpers/-make-delegate-event-tree', [
    'require',
    'exports',
    'module',
    'can-key-tree',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var useCapture = function (eventType) {
        return eventType === 'focus' || eventType === 'blur';
    };
    function makeDelegator(domEvents) {
        var Delegator = function Delegator(parentKey) {
            this.element = parentKey;
            this.events = {};
            this.delegated = {};
        };
        canReflect.assignSymbols(Delegator.prototype, {
            'can.setKeyValue': function (eventType, handlersBySelector) {
                var handler = this.delegated[eventType] = function (ev) {
                    canReflect.each(handlersBySelector, function (handlers, selector) {
                        var cur = ev.target;
                        do {
                            var el = cur === document ? document.documentElement : cur;
                            var matches = el.matches || el.msMatchesSelector;
                            if (matches.call(el, selector)) {
                                handlers.forEach(function (handler) {
                                    handler.call(el, ev);
                                });
                            }
                            cur = cur.parentNode;
                        } while (cur && cur !== ev.currentTarget);
                    });
                };
                this.events[eventType] = handlersBySelector;
                domEvents.addEventListener(this.element, eventType, handler, useCapture(eventType));
            },
            'can.getKeyValue': function (eventType) {
                return this.events[eventType];
            },
            'can.deleteKeyValue': function (eventType) {
                domEvents.removeEventListener(this.element, eventType, this.delegated[eventType], useCapture(eventType));
                delete this.delegated[eventType];
                delete this.events[eventType];
            },
            'can.getOwnEnumerableKeys': function () {
                return Object.keys(this.events);
            }
        });
        return Delegator;
    }
    module.exports = function makeDelegateEventTree(domEvents) {
        var Delegator = makeDelegator(domEvents);
        return new KeyTree([
            Map,
            Delegator,
            Object,
            Array
        ]);
    };
});
/*can-dom-events@1.3.0#can-dom-events*/
define('can-dom-events@1.3.0#can-dom-events', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './helpers/util',
    './helpers/make-event-registry',
    './helpers/-make-delegate-event-tree'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var util = require('./helpers/util');
        var makeEventRegistry = require('./helpers/make-event-registry');
        var makeDelegateEventTree = require('./helpers/-make-delegate-event-tree');
        var domEvents = {
            _eventRegistry: makeEventRegistry(),
            addEvent: function (event, eventType) {
                return this._eventRegistry.add(event, eventType);
            },
            addEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.addEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.addEventListener.apply(target, eventArgs);
            },
            removeEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.removeEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.removeEventListener.apply(target, eventArgs);
            },
            addDelegateListener: function (root, eventType, selector, handler) {
                domEvents._eventTree.add([
                    root,
                    eventType,
                    selector,
                    handler
                ]);
            },
            removeDelegateListener: function (target, eventType, selector, handler) {
                domEvents._eventTree.delete([
                    target,
                    eventType,
                    selector,
                    handler
                ]);
            },
            dispatch: function (target, eventData, bubbles, cancelable) {
                var event = util.createEvent(target, eventData, bubbles, cancelable);
                var enableForDispatch = util.forceEnabledForDispatch(target, event);
                if (enableForDispatch) {
                    target.disabled = false;
                }
                var ret = target.dispatchEvent(event);
                if (enableForDispatch) {
                    target.disabled = true;
                }
                return ret;
            }
        };
        domEvents._eventTree = makeDelegateEventTree(domEvents);
        module.exports = namespace.domEvents = domEvents;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-event-queue@1.1.0#map/map*/
define('can-event-queue@1.1.0#map/map', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-queues',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-dom-events',
    'can-dom-events/helpers/util',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var canDev = require('can-log/dev/dev');
    var queues = require('can-queues');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var mergeDependencyRecords = require('../dependency-record/merge');
    var metaSymbol = canSymbol.for('can.meta'), dispatchBoundChangeSymbol = canSymbol.for('can.dispatchInstanceBoundChange'), dispatchInstanceOnPatchesSymbol = canSymbol.for('can.dispatchInstanceOnPatches'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), offKeyValueSymbol = canSymbol.for('can.offKeyValue'), onEventSymbol = canSymbol.for('can.onEvent'), offEventSymbol = canSymbol.for('can.offEvent'), onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue');
    var legacyMapBindings;
    function addHandlers(obj, meta) {
        if (!meta.handlers) {
            meta.handlers = new KeyTree([
                Object,
                Object,
                Object,
                Array
            ], {
                onFirst: function () {
                    if (obj._eventSetup !== undefined) {
                        obj._eventSetup();
                    }
                    if (obj.constructor[dispatchBoundChangeSymbol]) {
                        obj.constructor[dispatchBoundChangeSymbol](obj, true);
                    }
                },
                onEmpty: function () {
                    if (obj._eventTeardown !== undefined) {
                        obj._eventTeardown();
                    }
                    if (obj.constructor[dispatchBoundChangeSymbol]) {
                        obj.constructor[dispatchBoundChangeSymbol](obj, false);
                    }
                }
            });
        }
        if (!meta.listenHandlers) {
            meta.listenHandlers = new KeyTree([
                Map,
                Map,
                Object,
                Array
            ]);
        }
    }
    var ensureMeta = function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    };
    function stopListeningArgumentsToKeys(bindTarget, event, handler, queueName) {
        if (arguments.length && canReflect.isPrimitive(bindTarget)) {
            queueName = handler;
            handler = event;
            event = bindTarget;
            bindTarget = this.context;
        }
        if (typeof event === 'function') {
            queueName = handler;
            handler = event;
            event = undefined;
        }
        if (typeof handler === 'string') {
            queueName = handler;
            handler = undefined;
        }
        var keys = [];
        if (bindTarget) {
            keys.push(bindTarget);
            if (event || handler || queueName) {
                keys.push(event);
                if (queueName || handler) {
                    keys.push(queueName || this.defaultQueue);
                    if (handler) {
                        keys.push(handler);
                    }
                }
            }
        }
        return keys;
    }
    var props = {
        dispatch: function (event, args) {
            if (process.env.NODE_ENV !== 'production') {
                if (arguments.length > 4) {
                    canDev.warn('Arguments to dispatch should be an array, not multiple arguments.');
                    args = Array.prototype.slice.call(arguments, 1);
                }
                if (args && !Array.isArray(args)) {
                    canDev.warn('Arguments to dispatch should be an array.');
                    args = [args];
                }
            }
            if (!this.__inSetup) {
                if (typeof event === 'string') {
                    event = { type: event };
                }
                var meta = ensureMeta(this);
                if (process.env.NODE_ENV !== 'production') {
                    if (!event.reasonLog) {
                        event.reasonLog = [
                            canReflect.getName(this),
                            'dispatched',
                            '"' + event.type + '"',
                            'with'
                        ].concat(args);
                    }
                }
                if (typeof meta._log === 'function') {
                    meta._log.call(this, event, args);
                }
                var handlers = meta.handlers;
                var handlersByType = event.type !== undefined && handlers.getNode([event.type]);
                var dispatchConstructorPatches = event.patches && this.constructor[dispatchInstanceOnPatchesSymbol];
                var patchesNode = event.patches !== undefined && handlers.getNode([
                    'can.patches',
                    'onKeyValue'
                ]);
                var keysNode = event.keyChanged !== undefined && handlers.getNode([
                    'can.keys',
                    'onKeyValue'
                ]);
                var batch = dispatchConstructorPatches || handlersByType || patchesNode || keysNode;
                if (batch) {
                    queues.batch.start();
                }
                if (handlersByType) {
                    if (handlersByType.onKeyValue) {
                        queues.enqueueByQueue(handlersByType.onKeyValue, this, args, event.makeMeta, event.reasonLog);
                    }
                    if (handlersByType.event) {
                        event.batchNum = queues.batch.number();
                        var eventAndArgs = [event].concat(args);
                        queues.enqueueByQueue(handlersByType.event, this, eventAndArgs, event.makeMeta, event.reasonLog);
                    }
                }
                if (keysNode) {
                    queues.enqueueByQueue(keysNode, this, [event.keyChanged], event.makeMeta, event.reasonLog);
                }
                if (patchesNode) {
                    queues.enqueueByQueue(patchesNode, this, [event.patches], event.makeMeta, event.reasonLog);
                }
                if (dispatchConstructorPatches) {
                    this.constructor[dispatchInstanceOnPatchesSymbol](this, event.patches);
                }
                if (batch) {
                    queues.batch.stop();
                }
            }
            return event;
        },
        addEventListener: function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'event',
                queueName || 'mutate',
                handler
            ]);
            return this;
        },
        removeEventListener: function (key, handler, queueName) {
            if (key === undefined) {
                var handlers = ensureMeta(this).handlers;
                var keyHandlers = handlers.getNode([]);
                Object.keys(keyHandlers).forEach(function (key) {
                    handlers.delete([
                        key,
                        'event'
                    ]);
                });
            } else if (!handler && !queueName) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event'
                ]);
            } else if (!handler) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate'
                ]);
            } else {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate',
                    handler
                ]);
            }
            return this;
        },
        one: function (event, handler) {
            var one = function () {
                legacyMapBindings.off.call(this, event, one);
                return handler.apply(this, arguments);
            };
            legacyMapBindings.on.call(this, event, one);
            return this;
        },
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                queueName = handler;
                handler = event;
                event = bindTarget;
                bindTarget = this;
            }
            if (typeof event === 'function') {
                queueName = handler;
                handler = event;
                event = undefined;
            }
            ensureMeta(this).listenHandlers.add([
                bindTarget,
                event,
                queueName || 'mutate',
                handler
            ]);
            legacyMapBindings.on.call(bindTarget, event, handler, queueName || 'mutate');
            return this;
        },
        stopListening: function () {
            var keys = stopListeningArgumentsToKeys.apply({
                context: this,
                defaultQueue: 'mutate'
            }, arguments);
            var listenHandlers = ensureMeta(this).listenHandlers;
            function deleteHandler(bindTarget, event, queue, handler) {
                legacyMapBindings.off.call(bindTarget, event, handler, queue);
            }
            listenHandlers.delete(keys, deleteHandler);
            return this;
        },
        on: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.addDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.addEventListener(this, eventName, handler, queue);
                }
            } else {
                if ('addEventListener' in this) {
                    this.addEventListener(eventName, handler, queue);
                } else if (this[onKeyValueSymbol]) {
                    canReflect.onKeyValue(this, eventName, handler, queue);
                } else if (this[onEventSymbol]) {
                    this[onEventSymbol](eventName, handler, queue);
                } else {
                    if (!eventName && this[onValueSymbol]) {
                        canReflect.onValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to bind ' + eventName);
                    }
                }
            }
            return this;
        },
        off: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.removeDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.removeEventListener(this, eventName, handler, queue);
                }
            } else {
                if ('removeEventListener' in this) {
                    this.removeEventListener(eventName, handler, queue);
                } else if (this[offKeyValueSymbol]) {
                    canReflect.offKeyValue(this, eventName, handler, queue);
                } else if (this[offEventSymbol]) {
                    this[offEventSymbol](eventName, handler, queue);
                } else {
                    if (!eventName && this[offValueSymbol]) {
                        canReflect.offValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to unbind ' + eventName);
                    }
                }
            }
            return this;
        }
    };
    var symbols = {
        'can.onKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.offKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.delete([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.isBound': function () {
            return !ensureMeta(this).handlers.isEmpty();
        },
        'can.getWhatIChange': function getWhatIChange(key) {
            if (process.env.NODE_ENV !== 'production') {
                var whatIChange = {};
                var meta = ensureMeta(this);
                var notifyHandlers = [].concat(meta.handlers.get([
                    key,
                    'event',
                    'notify'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'notify'
                ]));
                var mutateHandlers = [].concat(meta.handlers.get([
                    key,
                    'event',
                    'mutate'
                ]), meta.handlers.get([
                    key,
                    'event',
                    'domUI'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'mutate'
                ]), meta.handlers.get([
                    key,
                    'onKeyValue',
                    'domUI'
                ]));
                if (notifyHandlers.length) {
                    notifyHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.derive;
                            if (!record) {
                                record = whatIChange.derive = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                if (mutateHandlers.length) {
                    mutateHandlers.forEach(function (handler) {
                        var changes = canReflect.getChangesDependencyRecord(handler);
                        if (changes) {
                            var record = whatIChange.mutate;
                            if (!record) {
                                record = whatIChange.mutate = {};
                            }
                            mergeDependencyRecords(record, changes);
                        }
                    });
                }
                return Object.keys(whatIChange).length ? whatIChange : undefined;
            }
        },
        'can.onPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.add([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.delete([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        }
    };
    function defineNonEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            enumerable: false,
            value: value
        });
    }
    legacyMapBindings = function (obj) {
        canReflect.assignMap(obj, props);
        return canReflect.assignSymbols(obj, symbols);
    };
    defineNonEnumerable(legacyMapBindings, 'addHandlers', addHandlers);
    defineNonEnumerable(legacyMapBindings, 'stopListeningArgumentsToKeys', stopListeningArgumentsToKeys);
    props.bind = props.addEventListener;
    props.unbind = props.removeEventListener;
    canReflect.assignMap(legacyMapBindings, props);
    canReflect.assignSymbols(legacyMapBindings, symbols);
    defineNonEnumerable(legacyMapBindings, 'start', function () {
        console.warn('use can-queues.batch.start()');
        queues.batch.start();
    });
    defineNonEnumerable(legacyMapBindings, 'stop', function () {
        console.warn('use can-queues.batch.stop()');
        queues.batch.stop();
    });
    defineNonEnumerable(legacyMapBindings, 'flush', function () {
        console.warn('use can-queues.flush()');
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'afterPreviousEvents', function (handler) {
        console.warn('don\'t use afterPreviousEvents');
        queues.mutateQueue.enqueue(function afterPreviousEvents() {
            queues.mutateQueue.enqueue(handler);
        });
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'after', function (handler) {
        console.warn('don\'t use after');
        queues.mutateQueue.enqueue(handler);
        queues.flush();
    });
    module.exports = legacyMapBindings;
});
/*can-simple-observable@2.2.0#resolver/resolver*/
define('can-simple-observable@2.2.0#resolver/resolver', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-observation',
    'can-queues',
    'can-event-queue/map/map',
    '../settable/settable',
    '../can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var mapEventBindings = require('can-event-queue/map/map');
    var SettableObservable = require('../settable/settable');
    var SimpleObservable = require('../can-simple-observable');
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    function ResolverObservable(resolver, context) {
        this.resolver = ObservationRecorder.ignore(resolver);
        this.context = context;
        this.valueOptions = {
            resolve: this.resolve.bind(this),
            listenTo: this.listenTo.bind(this),
            stopListening: this.stopListening.bind(this),
            lastSet: new SimpleObservable(undefined)
        };
        this.update = this.update.bind(this);
        this.contextHandlers = new WeakMap();
        this.teardown = null;
        this.binder = {};
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(resolver) + '>';
                }
            });
            Object.defineProperty(this.update, 'name', { value: canReflect.getName(this) + '.update' });
            canReflect.assignSymbols(this.valueOptions.lastSet, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '::lastSet' + '<' + canReflect.getName(resolver) + '>';
                }
            });
        }
    }
    ResolverObservable.prototype = Object.create(SettableObservable.prototype);
    function deleteHandler(bindTarget, event, queue, handler) {
        mapEventBindings.off.call(bindTarget, event, handler, queue);
    }
    canReflect.assignMap(ResolverObservable.prototype, {
        constructor: ResolverObservable,
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                handler = event;
                event = bindTarget;
                bindTarget = this.context;
            }
            if (typeof event === 'function') {
                handler = event;
                event = undefined;
            }
            var resolverInstance = this;
            if (process.env.NODE_ENV !== 'production') {
                if (!handler.name) {
                    Object.defineProperty(handler, 'name', { value: (bindTarget ? canReflect.getName(bindTarget) : '') + (event ? '.on(\'' + event + '\',handler)' : '.on(handler)') + '::' + canReflect.getName(this) });
                }
            }
            var contextHandler = handler.bind(this.context);
            contextHandler[getChangesSymbol] = function getChangesDependencyRecord() {
                return { valueDependencies: new Set([resolverInstance]) };
            };
            this.contextHandlers.set(handler, contextHandler);
            mapEventBindings.listenTo.call(this.binder, bindTarget, event, contextHandler, queueName || 'notify');
        },
        stopListening: function () {
            var meta = this.binder[canSymbol.for('can.meta')];
            var listenHandlers = meta && meta.listenHandlers;
            if (listenHandlers) {
                var keys = mapEventBindings.stopListeningArgumentsToKeys.call({
                    context: this.context,
                    defaultQueue: 'notify'
                });
                listenHandlers.delete(keys, deleteHandler);
            }
            return this;
        },
        resolve: function (newVal) {
            this.value = newVal;
            if (this.isBinding) {
                this.lastValue = this.value;
                return newVal;
            }
            if (this.value !== this.lastValue) {
                var enqueueMeta = {};
                if (process.env.NODE_ENV !== 'production') {
                    enqueueMeta = {
                        log: [canReflect.getName(this.update)],
                        reasonLog: [
                            canReflect.getName(this),
                            'resolved with',
                            newVal
                        ]
                    };
                }
                queues.batch.start();
                queues.deriveQueue.enqueue(this.update, this, [], enqueueMeta);
                queues.batch.stop();
            }
            return newVal;
        },
        update: function () {
            if (this.lastValue !== this.value) {
                var old = this.lastValue;
                this.lastValue = this.value;
                if (process.env.NODE_ENV !== 'production') {
                    if (typeof this._log === 'function') {
                        this._log(old, this.value);
                    }
                }
                queues.enqueueByQueue(this.handlers.getNode([]), this, [
                    this.value,
                    old
                ]);
            }
        },
        activate: function () {
            this.isBinding = true;
            this.teardown = this.resolver.call(this.context, this.valueOptions);
            this.isBinding = false;
        },
        onUnbound: function () {
            this.bound = false;
            mapEventBindings.stopListening.call(this.binder);
            if (this.teardown != null) {
                this.teardown();
                this.teardown = null;
            }
        },
        set: function (value) {
            this.valueOptions.lastSet.set(value);
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                var handler = function () {
                };
                this.on(handler);
                var val = this.value;
                this.off(handler);
                return val;
            }
        },
        hasDependencies: function hasDependencies() {
            var hasDependencies = false;
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                hasDependencies = !!listenHandlers.size();
            }
            return hasDependencies;
        },
        getValueDependencies: function getValueDependencies() {
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                var keyDeps = new Map();
                var valueDeps = new Set();
                if (listenHandlers) {
                    canReflect.each(listenHandlers.root, function (events, obj) {
                        canReflect.each(events, function (queues, eventName) {
                            if (eventName === undefined) {
                                valueDeps.add(obj);
                            } else {
                                var entry = keyDeps.get(obj);
                                if (!entry) {
                                    entry = new Set();
                                    keyDeps.set(obj, entry);
                                }
                                entry.add(eventName);
                            }
                        });
                    });
                    if (valueDeps.size || keyDeps.size) {
                        var result = {};
                        if (keyDeps.size) {
                            result.keyDependencies = keyDeps;
                        }
                        if (valueDeps.size) {
                            result.valueDependencies = valueDeps;
                        }
                        return result;
                    }
                }
            }
        }
    });
    canReflect.assignSymbols(ResolverObservable.prototype, {
        'can.getValue': ResolverObservable.prototype.get,
        'can.setValue': ResolverObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return this.priority || 0;
        },
        'can.setPriority': function (newPriority) {
            this.priority = newPriority;
        },
        'can.valueHasDependencies': ResolverObservable.prototype.hasDependencies,
        'can.getValueDependencies': ResolverObservable.prototype.getValueDependencies
    });
    module.exports = ResolverObservable;
});
/*can-event-queue@1.1.0#type/type*/
define('can-event-queue@1.1.0#type/type', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var queues = require('can-queues');
    var metaSymbol = canSymbol.for('can.meta');
    function addHandlers(obj, meta) {
        if (!meta.lifecycleHandlers) {
            meta.lifecycleHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
        if (!meta.instancePatchesHandlers) {
            meta.instancePatchesHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
    }
    function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    }
    var props = {};
    function onOffAndDispatch(symbolName, dispatchName, handlersName) {
        props['can.on' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].add([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.off' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].delete([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.' + dispatchName] = function (instance, arg) {
            queues.enqueueByQueue(ensureMeta(this)[handlersName].getNode([]), this, [
                instance,
                arg
            ]);
        };
    }
    onOffAndDispatch('InstancePatches', 'dispatchInstanceOnPatches', 'instancePatchesHandlers');
    onOffAndDispatch('InstanceBoundChange', 'dispatchInstanceBoundChange', 'lifecycleHandlers');
    function mixinTypeBindings(obj) {
        return canReflect.assignSymbols(obj, props);
    }
    Object.defineProperty(mixinTypeBindings, 'addHandlers', {
        enumerable: false,
        value: addHandlers
    });
    module.exports = mixinTypeBindings;
});
/*can-string-to-any@1.2.0#can-string-to-any*/
define('can-string-to-any@1.2.0#can-string-to-any', function (require, exports, module) {
    'use strict';
    module.exports = function (str) {
        switch (str) {
        case 'NaN':
        case 'Infinity':
            return +str;
        case 'null':
            return null;
        case 'undefined':
            return undefined;
        case 'true':
        case 'false':
            return str === 'true';
        default:
            var val = +str;
            if (!isNaN(val)) {
                return val;
            } else {
                return str;
            }
        }
    };
});
/*can-data-types@1.2.0#maybe-boolean/maybe-boolean*/
define('can-data-types@1.2.0#maybe-boolean/maybe-boolean', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toBoolean(val) {
        if (val == null) {
            return val;
        }
        if (val === 'false' || val === '0' || !val) {
            return false;
        }
        return true;
    }
    module.exports = canReflect.assignSymbols(toBoolean, {
        'can.new': toBoolean,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    true,
                    false,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeBoolean';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'boolean';
        }
    });
});
/*can-data-types@1.2.0#maybe-date/maybe-date*/
define('can-data-types@1.2.0#maybe-date/maybe-date', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toDate(str) {
        var type = typeof str;
        if (type === 'string') {
            str = Date.parse(str);
            return isNaN(str) ? null : new Date(str);
        } else if (type === 'number') {
            return new Date(str);
        } else {
            return str;
        }
    }
    function DateStringSet(dateStr) {
        this.setValue = dateStr;
        var date = toDate(dateStr);
        this.value = date == null ? date : date.getTime();
    }
    DateStringSet.prototype.valueOf = function () {
        return this.value;
    };
    canReflect.assignSymbols(DateStringSet.prototype, {
        'can.serialize': function () {
            return this.setValue;
        }
    });
    module.exports = canReflect.assignSymbols(toDate, {
        'can.new': toDate,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Date,
                    undefined,
                    null
                ]
            };
        },
        'can.ComparisonSetType': DateStringSet,
        'can.getName': function () {
            return 'MaybeDate';
        },
        'can.isMember': function (value) {
            return value == null || value instanceof Date;
        }
    });
});
/*can-data-types@1.2.0#maybe-number/maybe-number*/
define('can-data-types@1.2.0#maybe-number/maybe-number', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toNumber(val) {
        if (val == null) {
            return val;
        }
        return +val;
    }
    module.exports = canReflect.assignSymbols(toNumber, {
        'can.new': toNumber,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Number,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeNumber';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'number';
        }
    });
});
/*can-data-types@1.2.0#maybe-string/maybe-string*/
define('can-data-types@1.2.0#maybe-string/maybe-string', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toString(val) {
        if (val == null) {
            return val;
        }
        return '' + val;
    }
    module.exports = canReflect.assignSymbols(toString, {
        'can.new': toString,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    String,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeString';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'string';
        }
    });
});
/*can-define@2.5.3#can-define*/
define('can-define@2.5.3#can-define', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation',
    'can-observation-recorder',
    'can-simple-observable/async/async',
    'can-simple-observable/settable/settable',
    'can-simple-observable/resolver/resolver',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-string-to-any',
    'can-define-lazy-value',
    'can-data-types/maybe-boolean/maybe-boolean',
    'can-data-types/maybe-date/maybe-date',
    'can-data-types/maybe-number/maybe-number',
    'can-data-types/maybe-string/maybe-string'
], function (require, exports, module) {
    'use strict';
    'format cjs';
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var AsyncObservable = require('can-simple-observable/async/async');
    var SettableObservable = require('can-simple-observable/settable/settable');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var eventQueue = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var queues = require('can-queues');
    var assign = require('can-assign');
    var canLogDev = require('can-log/dev/dev');
    var stringToAny = require('can-string-to-any');
    var defineLazyValue = require('can-define-lazy-value');
    var MaybeBoolean = require('can-data-types/maybe-boolean/maybe-boolean'), MaybeDate = require('can-data-types/maybe-date/maybe-date'), MaybeNumber = require('can-data-types/maybe-number/maybe-number'), MaybeString = require('can-data-types/maybe-string/maybe-string');
    var newSymbol = canSymbol.for('can.new'), serializeSymbol = canSymbol.for('can.serialize');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, getDefinitionOrMethod;
    function isDefineType(func) {
        return func && (func.canDefineType === true || func[newSymbol]);
    }
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var Object_defineNamedPrototypeProperty = Object.defineProperty;
    if (process.env.NODE_ENV !== 'production') {
        Object_defineNamedPrototypeProperty = function (obj, prop, definition) {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', {
                    value: 'get ' + canReflect.getName(obj) + '.' + prop,
                    writable: true
                });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', { value: 'set ' + canReflect.getName(obj) + '.' + prop });
            }
            var desc = Object.getOwnPropertyDescriptor(obj, prop);
            if (desc === undefined || desc.writable !== false) {
                return Object.defineProperty(obj, prop, definition);
            }
            return obj;
        };
    }
    function defineConfigurableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    function eachPropertyDescriptor(map, cb) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop));
            }
        }
    }
    function cleanUpDefinition(prop, definition, shouldWarn, typePrototype) {
        if (definition.value !== undefined && (typeof definition.value !== 'function' || definition.value.length === 0)) {
            if (process.env.NODE_ENV !== 'production') {
                if (shouldWarn) {
                    canLogDev.warn('can-define: Change the \'value\' definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' to \'default\'.');
                }
            }
            definition.default = definition.value;
            delete definition.value;
        }
        if (definition.Value !== undefined) {
            if (process.env.NODE_ENV !== 'production') {
                if (shouldWarn) {
                    canLogDev.warn('can-define: Change the \'Value\' definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' to \'Default\'.');
                }
            }
            definition.Default = definition.Value;
            delete definition.Value;
        }
    }
    function isValueResolver(definition) {
        return typeof definition.value === 'function' && definition.value.length;
    }
    module.exports = define = ns.define = function (typePrototype, defines, baseDefine) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null);
        var result = getDefinitionsAndMethods(defines, baseDefine, typePrototype);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        canReflect.eachKey(result.definitions, function (definition, property) {
            define.property(typePrototype, property, definition, dataInitializers, computedInitializers, result.defaultDefinition);
        });
        if (typePrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(typePrototype._data, prop, dataInitializers[prop].bind(typePrototype), true);
            }
        } else {
            defineLazyValue(typePrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (typePrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(typePrototype._computed, prop, computedInitializers[prop].bind(typePrototype));
            }
        } else {
            defineLazyValue(typePrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        for (prop in eventsProto) {
            Object.defineProperty(typePrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        }
        Object.defineProperty(typePrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = canSymbol.iterator || canSymbol.for('iterator');
        if (!typePrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(typePrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    define.extensions = function () {
    };
    define.property = function (typePrototype, prop, definition, dataInitializers, computedInitializers, defaultDefinition) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = makeDefinition(prop, propertyDefinition, defaultDefinition || {}, typePrototype);
        }
        var type = definition.type;
        if (process.env.NODE_ENV !== 'production') {
            if (type && canReflect.isConstructorLike(type) && !isDefineType(type)) {
                canLogDev.warn('can-define: the definition for ' + canReflect.getName(typePrototype) + '.' + prop + ' uses a constructor for "type". Did you mean "Type"?');
            }
        }
        if (type && onlyType(definition) && type === define.types['*']) {
            Object_defineNamedPrototypeProperty(typePrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get || isValueResolver(definition) ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        if (process.env.NODE_ENV !== 'production') {
            if (definition.get) {
                Object.defineProperty(definition.get, 'name', { value: canReflect.getName(typePrototype) + '\'s ' + prop + ' getter' });
            }
            if (definition.set) {
                Object.defineProperty(definition.set, 'name', { value: canReflect.getName(typePrototype) + '\'s ' + prop + ' setter' });
            }
            if (isValueResolver(definition)) {
                Object.defineProperty(definition.value, 'name', { value: canReflect.getName(typePrototype) + '\'s ' + prop + ' value' });
            }
        }
        var typeConvert = function (val) {
            return val;
        };
        if (definition.Type) {
            typeConvert = make.set.Type(prop, definition.Type, typeConvert);
        }
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (isValueResolver(definition)) {
            computedInitializers[prop] = make.valueResolver(prop, definition, typeConvert);
        } else if (definition.default !== undefined || definition.Default !== undefined) {
            if (process.env.NODE_ENV !== 'production') {
                if (definition.default !== null && typeof definition.default === 'object') {
                    canLogDev.warn('can-define: The default value for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.');
                }
                if (definition.default && canReflect.isConstructorLike(definition.default)) {
                    canLogDev.warn('can-define: The "default" for ' + canReflect.getName(typePrototype) + '.' + prop + ' is set to a constructor. Did you mean "Default" instead?');
                }
            }
            getInitialValue = ObservationRecorder.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (dataProperty === 'data') {
            setter = eventsSetter;
        } else if (definition.get && definition.get.length < 1) {
            setter = function () {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define: Set value for property ' + canReflect.getName(typePrototype) + '.' + prop + ' ignored, as its definition has a zero-argument getter and no setter');
                }
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        if (definition.Type) {
            setter = make.set.Type(prop, definition.Type, setter);
        }
        Object_defineNamedPrototypeProperty(typePrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.makeDefineInstanceKey = function (constructor) {
        constructor[canSymbol.for('can.defineInstanceKey')] = function (property, value) {
            var defineResult = this.prototype._define;
            if (typeof value === 'object') {
                cleanUpDefinition(property, value, false, this);
            }
            var definition = getDefinitionOrMethod(property, value, defineResult.defaultDefinition, this);
            if (definition && typeof definition === 'object') {
                define.property(constructor.prototype, property, definition, defineResult.dataInitializers, defineResult.computedInitializers, defineResult.defaultDefinition);
                defineResult.definitions[property] = definition;
            } else {
                defineResult.methods[property] = definition;
            }
        };
    };
    define.Constructor = function (defines, sealed) {
        var constructor = function DefineConstructor(props) {
            Object.defineProperty(this, '__inSetup', {
                configurable: true,
                enumerable: false,
                value: true,
                writable: true
            });
            define.setup.call(this, props, sealed);
            this.__inSetup = false;
        };
        var result = define(constructor.prototype, defines);
        addTypeEvents(constructor);
        define.makeDefineInstanceKey(constructor, result);
        return constructor;
    };
    make = {
        computeObj: function (map, prop, observable) {
            var computeObj = {
                oldValue: undefined,
                compute: observable,
                count: 0,
                handler: function (newVal) {
                    var oldValue = computeObj.oldValue;
                    computeObj.oldValue = newVal;
                    map.dispatch({
                        type: prop,
                        target: map
                    }, [
                        newVal,
                        oldValue
                    ]);
                }
            };
            return computeObj;
        },
        valueResolver: function (prop, definition, typeConvert) {
            return function () {
                var map = this;
                var computeObj = make.computeObj(map, prop, new ResolverObservable(definition.value, map));
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(definition.value).replace('value', 'event emitter') });
                }
                return computeObj;
            };
        },
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), observable, computeObj;
                if (get.length === 0) {
                    observable = new Observation(get, map);
                } else if (get.length === 1) {
                    observable = new SettableObservable(get, map, defaultValue);
                } else {
                    observable = new AsyncObservable(get, map, defaultValue);
                }
                computeObj = make.computeObj(map, prop, observable);
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(computeObj.handler, 'name', { value: canReflect.getName(get).replace('getter', 'event emitter') });
                }
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    canReflect.setValue(this._computed[prop].compute, val);
                };
            },
            events: function (prop, getCurrent, setData, eventType) {
                return function (newVal) {
                    if (this.__inSetup) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal !== current) {
                            var dispatched;
                            setData.call(this, newVal);
                            dispatched = {
                                patches: [{
                                        type: 'set',
                                        key: prop,
                                        value: newVal
                                    }],
                                type: prop,
                                target: this
                            };
                            if (process.env.NODE_ENV !== 'production') {
                                dispatched.reasonLog = [
                                    canReflect.getName(this) + '\'s',
                                    prop,
                                    'changed to',
                                    newVal,
                                    'from',
                                    current
                                ];
                            }
                            this.dispatch(dispatched, [
                                newVal,
                                current
                            ]);
                        }
                    }
                };
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var asyncTimer;
                    var self = this;
                    queues.batch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, function (value) {
                            setEvents.call(self, value);
                            setterCalled = true;
                            if (process.env.NODE_ENV !== 'production') {
                                clearTimeout(asyncTimer);
                            }
                        }, current);
                    if (setterCalled) {
                        queues.batch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can-define: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                queues.batch.stop();
                            } else {
                                if (process.env.NODE_ENV !== 'production') {
                                    asyncTimer = setTimeout(function () {
                                        canLogDev.warn('can/map/setter.js: Setter "' + canReflect.getName(self) + '.' + prop + '" did not return a value or call the setter callback.');
                                    }, canLogDev.warnTimeout);
                                }
                                queues.batch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                function setter(newValue) {
                    return set.call(this, type.call(this, newValue, prop));
                }
                if (isDefineType(type)) {
                    if (type.canDefineType) {
                        return setter;
                    } else {
                        return function setter(newValue) {
                            return set.call(this, canReflect.convert(newValue, type));
                        };
                    }
                }
                if (typeof type === 'object') {
                    return make.set.Type(prop, type, set);
                } else {
                    return setter;
                }
            },
            Type: function (prop, Type, set) {
                if (Array.isArray(Type) && define.DefineList) {
                    Type = define.DefineList.extend({ '#': Type[0] });
                } else if (typeof Type === 'object') {
                    if (define.DefineMap) {
                        Type = define.DefineMap.extend(Type);
                    } else {
                        Type = define.Constructor(Type);
                    }
                }
                return function (newValue) {
                    if (newValue instanceof Type || newValue == null) {
                        return set.call(this, newValue);
                    } else {
                        return set.call(this, new Type(newValue));
                    }
                };
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var observable = this._computed[prop].compute;
                    if (observable.lastSetValue) {
                        return canReflect.getValue(observable.lastSetValue);
                    }
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.default;
                    if (value !== undefined) {
                        if (typeof value === 'function') {
                            value = value.call(this);
                        }
                        value = typeConvert.call(this, value);
                    } else {
                        var Default = definition.Default;
                        if (Default) {
                            value = typeConvert.call(this, new Default());
                        }
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this.__inSetup) {
                        ObservationRecorder.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function (val) {
                    var compute = this._computed[prop].compute;
                    if (ObservationRecorder.isRecording()) {
                        ObservationRecorder.add(this, prop);
                        if (!canReflect.isBound(compute)) {
                            Observation.temporarilyBind(compute);
                        }
                    }
                    return peek(compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'Value',
        'type',
        'Type',
        'serialize'
    ];
    var addBehaviorToDefinition = function (definition, behavior, value) {
        if (behavior === 'enumerable') {
            definition.serialize = !!value;
        } else if (behavior === 'type') {
            var behaviorDef = value;
            if (typeof behaviorDef === 'string') {
                behaviorDef = define.types[behaviorDef];
                if (typeof behaviorDef === 'object' && !isDefineType(behaviorDef)) {
                    assign(definition, behaviorDef);
                    behaviorDef = behaviorDef[behavior];
                }
            }
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition, typePrototype) {
        var definition = {};
        canReflect.eachKey(def, function (value, behavior) {
            addBehaviorToDefinition(definition, behavior, value);
        });
        canReflect.eachKey(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type' && prop !== 'Type') {
                    definition[prop] = value;
                }
            }
        });
        if (def.Type) {
            var value = def.Type;
            var serialize = value[serializeSymbol];
            if (serialize) {
                definition.serialize = function (val) {
                    return serialize.call(val);
                };
            }
            if (value[newSymbol]) {
                definition.type = value[newSymbol];
                delete definition.Type;
            }
        }
        if (typeof def.type !== 'string') {
            if (!definition.type && !definition.Type) {
                var defaultsCopy = canReflect.assignMap({}, defaultDefinition);
                definition = canReflect.assignMap(defaultsCopy, definition);
            }
            if (canReflect.size(definition) === 0) {
                definition.type = define.types['*'];
            }
        }
        cleanUpDefinition(prop, definition, true, typePrototype);
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition, typePrototype) {
        var definition;
        if (typeof value === 'string') {
            definition = { type: value };
        } else if (value && (value[serializeSymbol] || value[newSymbol])) {
            definition = { Type: value };
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { Type: value };
            }
        } else if (Array.isArray(value)) {
            definition = { Type: value };
        } else if (canReflect.isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition, typePrototype);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines, typePrototype) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaults = defines['*'], defaultDefinition;
        if (defaults) {
            delete defines['*'];
            defaultDefinition = getDefinitionOrMethod('*', defaults, {});
        } else {
            defaultDefinition = Object.create(null);
        }
        eachPropertyDescriptor(defines, function (prop, propertyDescriptor) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition, typePrototype);
                if (result && typeof result === 'object' && canReflect.size(result) > 0) {
                    definitions[prop] = result;
                } else {
                    if (typeof result === 'function') {
                        methods[prop] = result;
                    } else if (typeof result !== 'undefined') {
                        if (process.env.NODE_ENV !== 'production') {
                            canLogDev.error(canReflect.getName(typePrototype) + '.' + prop + ' does not match a supported propDefinition. See: https://canjs.com/doc/can-define.types.propDefinition.html');
                        }
                    }
                }
            }
        });
        if (defaults) {
            defines['*'] = defaults;
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = eventQueue({});
    function setupComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
                computedBinding.oldValue = canReflect.getValue(computedBinding.compute);
            } else {
                computedBinding.count++;
            }
        }
    }
    function teardownComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
    }
    var canMetaSymbol = canSymbol.for('can.meta');
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName, handler, queue) {
            setupComputed(this, eventName);
            return eventQueue.addEventListener.apply(this, arguments);
        },
        removeEventListener: function (eventName, handler) {
            teardownComputed(this, eventName);
            return eventQueue.removeEventListener.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    canReflect.assignSymbols(eventsProto, {
        'can.onKeyValue': function (key) {
            setupComputed(this, key);
            return eventQueue[onKeyValueSymbol].apply(this, arguments);
        },
        'can.offKeyValue': function (key) {
            teardownComputed(this, key);
            return eventQueue[offKeyValueSymbol].apply(this, arguments);
        }
    });
    delete eventsProto.one;
    define.setup = function (props, sealed) {
        Object.defineProperty(this, 'constructor', {
            value: this.constructor,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, canMetaSymbol, {
            value: Object.create(null),
            enumerable: false,
            writable: false
        });
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                var def = define.makeSimpleGetterSetter(prop);
                instanceDefinitions[prop] = {};
                Object_defineNamedPrototypeProperty(map, prop, def);
                map[prop] = define.types.observable(value);
            }
        });
        if (canReflect.size(instanceDefinitions) > 0) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
        if (process.env.NODE_ENV !== 'production') {
            this._data;
            this._computed;
            if (sealed !== false) {
                Object.seal(this);
            }
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (simpleGetterSetters[prop] === undefined) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, define.types.observable(newVal));
                },
                enumerable: true,
                configurable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    function isObservableValue(obj) {
        return canReflect.isValueLike(obj) && canReflect.isObservableLike(obj);
    }
    define.types = {
        'date': MaybeDate,
        'number': MaybeNumber,
        'boolean': MaybeBoolean,
        'observable': function (newVal) {
            if (Array.isArray(newVal) && define.DefineList) {
                newVal = new define.DefineList(newVal);
            } else if (canReflect.isPlainObject(newVal) && define.DefineMap) {
                newVal = new define.DefineMap(newVal);
            }
            return newVal;
        },
        'stringOrObservable': function (newVal) {
            if (Array.isArray(newVal)) {
                return new define.DefaultList(newVal);
            } else if (canReflect.isPlainObject(newVal)) {
                return new define.DefaultMap(newVal);
            } else {
                return canReflect.convert(newVal, define.types.string);
            }
        },
        'htmlbool': function (val) {
            if (val === '') {
                return true;
            }
            return !!stringToAny(val);
        },
        '*': function (val) {
            return val;
        },
        'any': function (val) {
            return val;
        },
        'string': MaybeString,
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (isObservableValue(newValue)) {
                    return newValue;
                }
                if (isObservableValue(oldValue)) {
                    canReflect.setValue(oldValue, newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return isObservableValue(value) ? canReflect.getValue(value) : value;
            }
        }
    };
    define.updateSchemaKeys = function (schema, definitions) {
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (definition.serialize !== false) {
                if (definition.type) {
                    schema.keys[prop] = definition.type;
                } else {
                    schema.keys[prop] = function (val) {
                        return val;
                    };
                }
                if (definitions[prop].identity === true) {
                    schema.identity.push(prop);
                }
            }
        }
        return schema;
    };
});
/*can-define@2.5.3#ensure-meta*/
define('can-define@2.5.3#ensure-meta', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    module.exports = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
});
/*can-define@2.5.3#define-helpers/define-helpers*/
define('can-define@2.5.3#define-helpers/define-helpers', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-reflect',
    'can-queues',
    'can-log/dev/dev',
    '../ensure-meta'
], function (require, exports, module) {
    'use strict';
    var define = require('can-define');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var dev = require('can-log/dev/dev');
    var ensureMeta = require('../ensure-meta');
    var returnFirstArg = function (arg) {
        return arg;
    };
    var defineHelpers = {
        defineExpando: function (map, prop, value) {
            var constructorDefines = map._define.definitions;
            if (constructorDefines && constructorDefines[prop]) {
                return;
            }
            var instanceDefines = map._instanceDefinitions;
            if (!instanceDefines) {
                if (Object.isSealed(map)) {
                    return;
                }
                Object.defineProperty(map, '_instanceDefinitions', {
                    configurable: true,
                    enumerable: false,
                    writable: true,
                    value: {}
                });
                instanceDefines = map._instanceDefinitions;
            }
            if (!instanceDefines[prop]) {
                var defaultDefinition = map._define.defaultDefinition || { type: define.types.observable };
                define.property(map, prop, defaultDefinition, {}, {});
                if (defaultDefinition.type) {
                    map._data[prop] = define.make.set.type(prop, defaultDefinition.type, returnFirstArg).call(map, value);
                } else {
                    map._data[prop] = define.types.observable(value);
                }
                instanceDefines[prop] = defaultDefinition;
                queues.batch.start();
                map.dispatch({
                    type: 'can.keys',
                    target: map
                });
                if (map._data[prop] !== undefined) {
                    map.dispatch({
                        type: prop,
                        target: map,
                        patches: [{
                                type: 'set',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                queues.batch.stop();
                return true;
            }
        },
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.forEach(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        log: function (key) {
            var instance = this;
            var quoteString = function quoteString(x) {
                return typeof x === 'string' ? JSON.stringify(x) : x;
            };
            var meta = ensureMeta(instance);
            var allowed = meta.allowedLogKeysSet || new Set();
            meta.allowedLogKeysSet = allowed;
            if (key) {
                allowed.add(key);
            }
            meta._log = function (event, data) {
                var type = event.type;
                if (type === 'can.onPatches' || key && !allowed.has(type) || type === 'can.keys' || key && !allowed.has(type)) {
                    return;
                }
                if (type === 'add' || type === 'remove') {
                    dev.log(canReflect.getName(instance), '\n how   ', quoteString(type), '\n what  ', quoteString(data[0]), '\n index ', quoteString(data[1]));
                } else {
                    dev.log(canReflect.getName(instance), '\n key ', quoteString(type), '\n is  ', quoteString(data[0]), '\n was ', quoteString(data[1]));
                }
            };
        },
        deleteKey: function (prop) {
            var instanceDefines = this._instanceDefinitions;
            if (instanceDefines && Object.prototype.hasOwnProperty.call(instanceDefines, prop) && !Object.isSealed(this)) {
                delete instanceDefines[prop];
                queues.batch.start();
                this.dispatch({
                    type: 'can.keys',
                    target: this
                });
                var oldValue = this._data[prop];
                if (oldValue !== undefined) {
                    delete this._data[prop];
                    delete this[prop];
                    this.dispatch({
                        type: prop,
                        target: this,
                        patches: [{
                                type: 'delete',
                                key: prop
                            }]
                    }, [
                        undefined,
                        oldValue
                    ]);
                }
                queues.batch.stop();
            } else {
                this.set(prop, undefined);
            }
            return this;
        }
    };
    module.exports = defineHelpers;
});
/*can-define@2.5.3#map/map*/
define('can-define@2.5.3#map/map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    '../define-helpers/define-helpers',
    'can-observation-recorder',
    'can-namespace',
    'can-log',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-queues',
    'can-event-queue/type/type'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var defineHelpers = require('../define-helpers/define-helpers');
    var ObservationRecorder = require('can-observation-recorder');
    var ns = require('can-namespace');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var keysForDefinition = function (definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    };
    function assign(source) {
        queues.batch.start();
        canReflect.assignMap(this, source || {});
        queues.batch.stop();
    }
    function update(source) {
        queues.batch.start();
        canReflect.updateMap(this, source || {});
        queues.batch.stop();
    }
    function assignDeep(source) {
        queues.batch.start();
        canReflect.assignDeepMap(this, source || {});
        queues.batch.stop();
    }
    function updateDeep(source) {
        queues.batch.start();
        canReflect.updateDeepMap(this, source || {});
        queues.batch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            ObservationRecorder.add(this, key);
            return this[key];
        }
    }
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var def = this.prototype._define;
        var definitions = def ? def.definitions : {};
        var schema = {
            type: 'map',
            identity: [],
            keys: {}
        };
        return define.updateSchemaKeys(schema, definitions);
    }
    var DefineMap = Construct.extend('DefineMap', {
        setup: function (base) {
            var key, prototype = this.prototype;
            if (DefineMap) {
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                addTypeEvents(this);
                for (key in DefineMap.prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
                this.prototype.setup = function (props) {
                    define.setup.call(this, props || {}, this.constructor.seal);
                };
            } else {
                for (key in prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
            }
            define.defineConfigurableAndNotEnumerable(prototype, 'constructor', this);
            this[getSchemaSymbol] = getSchema;
        }
    }, {
        setup: function (props, sealed) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: { definitions: {} }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, props || {}, sealed === true);
        },
        get: function (prop) {
            if (prop) {
                return getKeyValue.call(this, prop);
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop === 'object') {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
                }
                if (value === true) {
                    updateDeep.call(this, prop);
                } else {
                    assignDeep.call(this, prop);
                }
            } else {
                setKeyValue.call(this, prop, value);
            }
            return this;
        },
        assignDeep: function (prop) {
            assignDeep.call(this, prop);
            return this;
        },
        updateDeep: function (prop) {
            updateDeep.call(this, prop);
            return this;
        },
        assign: function (prop) {
            assign.call(this, prop);
            return this;
        },
        update: function (prop) {
            update.call(this, prop);
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        deleteKey: defineHelpers.deleteKey,
        forEach: function () {
            var forEach = function (list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }, noObserve = ObservationRecorder.ignore(forEach);
            return function (cb, thisarg, observe) {
                return observe === false ? noObserve(this, cb, thisarg) : forEach(this, cb, thisarg);
            };
        }(),
        '*': { type: define.types.observable }
    });
    var defineMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': getKeyValue,
        'can.setKeyValue': setKeyValue,
        'can.deleteKeyValue': defineHelpers.deleteKey,
        'can.getOwnKeys': function () {
            var keys = canReflect.getOwnEnumerableKeys(this);
            if (this._computed) {
                var computedKeys = canReflect.getOwnKeys(this._computed);
                var key;
                for (var i = 0; i < computedKeys.length; i++) {
                    key = computedKeys[i];
                    if (keys.indexOf(key) < 0) {
                        keys.push(key);
                    }
                }
            }
            return keys;
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        },
        'can.hasOwnKey': function (key) {
            return Object.hasOwnProperty.call(this._define.definitions, key);
        },
        'can.hasKey': function (key) {
            return !!this._define.definitions[key];
        },
        'can.assignDeep': assignDeep,
        'can.updateDeep': updateDeep,
        'can.unwrap': defineHelpers.reflectUnwrap,
        'can.serialize': defineHelpers.reflectSerialize,
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set([this._computed[key].compute]);
            }
            return ret;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        defineMapProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{}';
        };
    }
    canReflect.assignSymbols(DefineMap.prototype, defineMapProto);
    canReflect.setKeyValue(DefineMap.prototype, canSymbol.iterator, function () {
        return new define.Iterator(this);
    });
    for (var prop in define.eventsProto) {
        DefineMap[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineMap.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineMap.prototype, sym, {
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    if (process.env.NODE_ENV !== 'production') {
        DefineMap.prototype.log = defineHelpers.log;
    }
    define.DefineMap = DefineMap;
    Object.defineProperty(DefineMap.prototype, 'toObject', {
        enumerable: false,
        writable: true,
        value: function () {
            canLog.warn('Use DefineMap::get instead of DefineMap::toObject');
            return this.get();
        }
    });
    module.exports = ns.DefineMap = DefineMap;
});
/*shuttle-canstrap@1.0.60#infrastructure/options*/
define('shuttle-canstrap@1.0.60#infrastructure/options', [
    'exports',
    'can-define/map/'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Options = exports.FormGroupOptions = exports.FormOptions = exports.TableOptions = exports.ButtonOptions = exports.RemoveButtonOptions = exports.RemoveButtonI18NOptions = exports.IconNameOptions = exports.DateTimeOptions = undefined;
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DateTimeOptions = exports.DateTimeOptions = _map2.default.extend({
        datetimeClass: {
            type: 'string',
            default: 'datetimepicker-input'
        },
        format: {
            type: 'string',
            default: 'DD/MM/YYYY HH:mm'
        },
        dateFormat: {
            type: 'string',
            default: 'DD/MM/YYYY'
        },
        timeFormat: {
            type: 'string',
            default: 'HH:mm'
        },
        showFormat: {
            type: 'boolean',
            default: true
        }
    });
    var IconNameOptions = exports.IconNameOptions = _map2.default.extend({ iconNameClass: 'string' });
    var RemoveButtonI18NOptions = exports.RemoveButtonI18NOptions = _map2.default.extend({
        removeItemConfirmation: {
            type: 'string',
            default: 'removeItemConfirmation'
        },
        removeItemConfirmationNamed: {
            type: 'string',
            default: 'removeItemConfirmationNamed'
        }
    });
    var RemoveButtonOptions = exports.RemoveButtonOptions = IconNameOptions.extend({
        confirmation: { type: '*' },
        i18n: { Type: RemoveButtonI18NOptions }
    });
    var ButtonOptions = exports.ButtonOptions = _map2.default.extend({
        back: {
            Type: IconNameOptions,
            default: { iconNameClass: 'fa-chevron-left' }
        },
        refresh: {
            Type: IconNameOptions,
            default: { iconNameClass: 'fa-refresh' }
        },
        remove: {
            Type: RemoveButtonOptions,
            default: {
                iconNameClass: 'fa-times',
                i18n: {}
            }
        },
        submit: {
            Type: IconNameOptions,
            default: { iconNameClass: 'fa-arrow-circle-right' }
        }
    });
    var TableOptions = exports.TableOptions = _map2.default.extend({
        containerClass: {
            type: 'string',
            default: ''
        },
        tableClass: {
            type: 'string',
            default: ''
        },
        buttonClass: {
            type: 'string',
            default: ''
        }
    });
    var FormOptions = exports.FormOptions = _map2.default.extend({ elementClass: { type: 'string' } });
    var FormGroupOptions = exports.FormGroupOptions = _map2.default.extend({
        elementClass: {
            type: 'string',
            default: 'form-group'
        }
    });
    var Options = exports.Options = _map2.default.extend({
        iconClass: {
            type: 'string',
            default: 'fa'
        },
        iconSpacingClass: {
            type: 'string',
            default: 'pr-2'
        },
        button: {
            Type: ButtonOptions,
            default: {}
        },
        form: {
            Type: FormOptions,
            default: {}
        },
        formGroup: {
            Type: FormOptions,
            default: {}
        },
        table: {
            Type: TableOptions,
            default: {}
        },
        datetime: { Default: DateTimeOptions }
    });
    var options = new Options({});
    exports.default = options;
});
/*steal-css@1.3.2#css*/
define('steal-css@1.3.2#css', [
    'require',
    'exports',
    'module',
    '@loader',
    '@steal'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        var steal = require('@steal');
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        var importRegEx = /@import [^uU]['"]?([^'"\)]*)['"]?/g;
        var resourceRegEx = /url\(['"]?([^'"\)]*)['"]?\)/g;
        var waitSeconds = loader.cssOptions && loader.cssOptions.timeout ? parseInt(loader.cssOptions.timeout, 10) : 60;
        var onloadCss = function (link, cb) {
            var styleSheets = getDocument().styleSheets, i = styleSheets.length;
            while (i--) {
                if (styleSheets[i].href === link.href) {
                    return cb();
                }
            }
            setTimeout(function () {
                onloadCss(link, cb);
            });
        };
        function isIE9() {
            var doc = getDocument();
            return doc && !!Function('/*@cc_on return (/^9/.test(@_jscript_version) && /MSIE 9.0(?!.*IEMobile)/i.test(navigator.userAgent)); @*/')();
        }
        function getDocument() {
            if (typeof doneSsr !== 'undefined' && doneSsr.globalDocument) {
                return doneSsr.globalDocument;
            }
            if (typeof document !== 'undefined') {
                return document;
            }
            throw new Error('Unable to load CSS in an environment without a document.');
        }
        function getHead() {
            var doc = getDocument();
            var head = doc.head || doc.getElementsByTagName('head')[0];
            if (!head) {
                var docEl = doc.documentElement || doc;
                head = doc.createElement('head');
                docEl.insertBefore(head, docEl.firstChild);
            }
            return head;
        }
        function CSSModule(load, loader) {
            if (typeof load === 'object') {
                this.load = load;
                this.loader = loader;
                this.address = this.load.address;
                this.source = this.load.source;
            } else {
                this.address = load;
                this.source = loader;
            }
        }
        CSSModule.cssCount = 0;
        CSSModule.ie9MaxStyleSheets = 31;
        CSSModule.currentStyleSheet = null;
        CSSModule.prototype = {
            injectLink: function () {
                if (this._loaded) {
                    return this._loaded;
                }
                if (this.linkExists()) {
                    this._loaded = Promise.resolve('');
                    return this._loaded;
                }
                var doc = getDocument();
                var link = this.link = doc.createElement('link');
                link.type = 'text/css';
                link.rel = 'stylesheet';
                link.href = this.address;
                this._loaded = new Promise(function (resolve, reject) {
                    var timeout = setTimeout(function () {
                        reject('Unable to load CSS');
                    }, waitSeconds * 1000);
                    var loadCB = function (event) {
                        clearTimeout(timeout);
                        link.removeEventListener('load', loadCB);
                        link.removeEventListener('error', loadCB);
                        if (event && event.type === 'error') {
                            reject('Unable to load CSS');
                        } else {
                            resolve('');
                        }
                    };
                    if ('isApplicationInstalled' in navigator || !link.addEventListener) {
                        onloadCss(link, loadCB);
                    } else if (navigator.noUI) {
                        loadCB();
                    } else {
                        link.addEventListener('load', loadCB);
                        link.addEventListener('error', loadCB);
                    }
                    getHead().appendChild(link);
                });
                return this._loaded;
            },
            injectStyle: function () {
                var doc = getDocument();
                var head = getHead();
                var style = this.style = doc.createElement('style');
                style.type = 'text/css';
                if (style.sheet) {
                    style.sheet.cssText = this.source;
                } else if (style.styleSheet) {
                    style.styleSheet.cssText = this.source;
                } else {
                    style.appendChild(doc.createTextNode(this.source));
                }
                head.appendChild(style);
            },
            ie9StyleSheetLimitHack: function () {
                var doc = getDocument();
                if (!CSSModule.cssCount) {
                    CSSModule.currentStyleSheet = doc.createStyleSheet();
                }
                CSSModule.cssCount += 1;
                CSSModule.currentStyleSheet.cssText += this.source;
                if (CSSModule.cssCount === CSSModule.ie9MaxStyleSheets) {
                    CSSModule.cssCount = 0;
                }
            },
            updateURLs: function () {
                var rawSource = this.source, address = this.address;
                this.source = rawSource.replace(importRegEx, function (whole, part) {
                    if (isNode) {
                        return '@import url(' + part + ')';
                    } else {
                        return '@import url(' + steal.joinURIs(address, part) + ')';
                    }
                });
                if (!loader.isEnv('build')) {
                    this.source = this.source + '/*# sourceURL=' + address + ' */';
                    this.source = this.source.replace(resourceRegEx, function (whole, part) {
                        return 'url(' + steal.joinURIs(address, part) + ')';
                    });
                }
                return this.source;
            },
            getExistingNode: function () {
                var doc = getDocument();
                var selector = '[href=\'' + this.address + '\']';
                return doc.querySelector && doc.querySelector(selector);
            },
            linkExists: function () {
                var styleSheets = getDocument().styleSheets;
                for (var i = 0; i < styleSheets.length; ++i) {
                    if (this.address === styleSheets[i].href) {
                        return true;
                    }
                }
                return false;
            },
            setupLiveReload: function (loader, name) {
                var head = getHead();
                var css = this;
                if (loader.liveReloadInstalled) {
                    var cssReload = loader['import']('live-reload', { name: module.id });
                    Promise.resolve(cssReload).then(function (reload) {
                        loader['import'](name).then(function () {
                            reload.once('!dispose/' + name, function () {
                                css.style.__isDirty = true;
                                reload.once('!cycleComplete', function () {
                                    head.removeChild(css.style);
                                });
                            });
                        });
                    });
                }
            }
        };
        if (loader.isEnv('production')) {
            exports.fetch = function (load) {
                var css = new CSSModule(load.address);
                return css.injectLink();
            };
        } else {
            exports.instantiate = function (load) {
                var loader = this;
                var css = new CSSModule(load.address, load.source);
                load.source = css.updateURLs();
                load.metadata.deps = [];
                load.metadata.format = 'css';
                load.metadata.execute = function () {
                    if (getDocument()) {
                        if (isIE9()) {
                            css.ie9StyleSheetLimitHack();
                        } else {
                            css.injectStyle();
                        }
                        css.setupLiveReload(loader, load.name);
                    }
                    return loader.newModule({ source: css.source });
                };
            };
        }
        exports.CSSModule = CSSModule;
        exports.getDocument = getDocument;
        exports.getHead = getHead;
        exports.locateScheme = true;
        exports.buildType = 'css';
        exports.includeInBuild = true;
        exports.pluginBuilder = 'steal-css/slim';
    }(function () {
        return this;
    }(), require, exports, module));
});
/*shuttle-canstrap@1.0.60#infrastructure/security*/
define('shuttle-canstrap@1.0.60#infrastructure/security', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _default = {
        hasPermission: function hasPermission(permission) {
            return true;
        }
    };
    var security = {
        _adapter: _default,
        wire: function wire(adapter) {
            if (!adapter) {
                this._adapter = _default;
                return;
            }
            if (!adapter.hasPermission || typeof adapter.hasPermission !== 'function') {
                throw new Error('The `security` adapter has to have a `hasPermission` function that returns whether the given permission is accessible (e.g. `adapter.hasPermission(permissionName)`).');
            }
            this._adapter = adapter;
        },
        hasPermission: function hasPermission(permission) {
            return this._adapter.hasPermission(permission);
        }
    };
    exports.default = security;
});
/*shuttle-guard@1.0.0#shuttle-guard*/
define('shuttle-guard@1.0.0#shuttle-guard', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var guard = {
        againstUndefined: function againstUndefined(value, name) {
            if (value) {
                return;
            }
            throw new Error('\'' + name + '\' may not be undefined/null.');
        },
        againstMissingFunction: function againstMissingFunction(f, name) {
            this.againstUndefined(f, name);
            if (typeof f === 'function') {
                return;
            }
            throw new Error('\'' + name + '\' is not a function.');
        }
    };
    exports.default = guard;
});
/*shuttle-canstrap@1.0.60#infrastructure/click*/
define('shuttle-canstrap@1.0.60#infrastructure/click', [
    'exports',
    'shuttle-guard'
], function (exports, _shuttleGuard) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var click = {
        on: function on(viewModel, ev) {
            _shuttleGuard2.default.againstUndefined(viewModel, 'viewModel');
            var click = viewModel.click;
            if (!click) {
                console.log('The following view model has no \'click\' method:');
                console.log(viewModel);
                throw new Error('No \'click\' method has been defined.');
                return;
            }
            var clickHandler;
            var context = viewModel.context || viewModel;
            if (typeof click === 'function') {
                clickHandler = click;
            } else {
                clickHandler = context[click];
                if (!clickHandler) {
                    throw new Error('The context does not contain a method with name \'' + click + '\'.');
                }
            }
            if (!!ev) {
                if (!ev.stopPropagation || typeof ev.stopPropagation !== 'function' || !ev.preventDefault || typeof ev.preventDefault !== 'function') {
                    throw new Error('The event argument \'ev\' passed to \'click\' does not appear to be an event object.');
                }
                ev.stopPropagation();
                ev.preventDefault();
            }
            return clickHandler.call(context, ev) || false;
        }
    };
    exports.default = click;
});
/*shuttle-canstrap@1.0.60#infrastructure/i18n*/
define('shuttle-canstrap@1.0.60#infrastructure/i18n', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _default = {
        value: function value(key, options) {
            return key;
        }
    };
    var i18n = {
        _adapter: _default,
        wire: function wire(adapter) {
            if (!adapter) {
                this._adapter = _default;
                return;
            }
            if (!adapter.value || typeof adapter.value !== 'function') {
                throw new Error('The `i18n` adapter has to have a `value` function that returns the value for a given `key` and optional `options` (e.g. `adapter.value(key, options)`).');
            }
            this._adapter = adapter;
        },
        value: function value(key, options) {
            return this._adapter.value(key, options);
        }
    };
    exports.default = i18n;
});
/*can-reflect-promise@2.1.0#can-reflect-promise*/
define('can-reflect-promise@2.1.0#can-reflect-promise', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var dev = require('can-log/dev/dev');
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue'), observeDataSymbol = canSymbol.for('can.meta');
    var promiseDataPrototype = {
        isPending: true,
        state: 'pending',
        isResolved: false,
        isRejected: false,
        value: undefined,
        reason: undefined
    };
    function setVirtualProp(promise, property, value) {
        var observeData = promise[observeDataSymbol];
        var old = observeData[property];
        observeData[property] = value;
        queues.enqueueByQueue(observeData.handlers.getNode([property]), promise, [
            value,
            old
        ], function () {
            return {};
        }, [
            'Promise',
            promise,
            'resolved with value',
            value,
            'and changed virtual property: ' + property
        ]);
    }
    function initPromise(promise) {
        var observeData = promise[observeDataSymbol];
        if (!observeData) {
            Object.defineProperty(promise, observeDataSymbol, {
                enumerable: false,
                configurable: false,
                writable: false,
                value: Object.create(promiseDataPrototype)
            });
            observeData = promise[observeDataSymbol];
            observeData.handlers = new KeyTree([
                Object,
                Object,
                Array
            ]);
        }
        promise.then(function (value) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isResolved', true);
            setVirtualProp(promise, 'value', value);
            setVirtualProp(promise, 'state', 'resolved');
            queues.batch.stop();
        }, function (reason) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isRejected', true);
            setVirtualProp(promise, 'reason', reason);
            setVirtualProp(promise, 'state', 'rejected');
            queues.batch.stop();
            if (process.env.NODE_ENV !== 'production') {
                dev.error('Failed promise:', reason);
            }
        });
    }
    function setupPromise(value) {
        var oldPromiseFn;
        var proto = 'getPrototypeOf' in Object ? Object.getPrototypeOf(value) : value.__proto__;
        if (value[getKeyValueSymbol] && value[observeDataSymbol]) {
            return;
        }
        if (proto === null || proto === Object.prototype) {
            proto = value;
            if (typeof proto.promise === 'function') {
                oldPromiseFn = proto.promise;
                proto.promise = function () {
                    var result = oldPromiseFn.call(proto);
                    setupPromise(result);
                    return result;
                };
            }
        }
        canReflect.assignSymbols(proto, {
            'can.getKeyValue': function (key) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                ObservationRecorder.add(this, key);
                switch (key) {
                case 'state':
                case 'isPending':
                case 'isResolved':
                case 'isRejected':
                case 'value':
                case 'reason':
                    return this[observeDataSymbol][key];
                default:
                    return this[key];
                }
            },
            'can.getValue': function () {
                return this[getKeyValueSymbol]('value');
            },
            'can.isValueLike': false,
            'can.onKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.add([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            },
            'can.offKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.delete([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            }
        });
    }
    module.exports = setupPromise;
});
/*can-stache-key@1.4.0#can-stache-key*/
define('can-stache-key@1.4.0#can-stache-key', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-symbol',
    'can-reflect',
    'can-reflect-promise'
], function (require, exports, module) {
    'use strict';
    var ObservationRecorder = require('can-observation-recorder');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var canReflectPromise = require('can-reflect-promise');
    var getValueSymbol = canSymbol.for('can.getValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    var isValueLikeSymbol = canSymbol.for('can.isValueLike');
    var peek = ObservationRecorder.ignore(canReflect.getKeyValue.bind(canReflect));
    var observeReader;
    var bindName = Function.prototype.bind;
    if (process.env.NODE_ENV !== 'production') {
        bindName = function (source) {
            var fn = Function.prototype.bind.call(this, source);
            Object.defineProperty(fn, 'name', { value: canReflect.getName(source) + '.' + canReflect.getName(this) });
            return fn;
        };
    }
    var isAt = function (index, reads) {
        var prevRead = reads[index - 1];
        return prevRead && prevRead.at;
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = observeReader.valueReaders.length; i < len; i++) {
                if (observeReader.valueReaders[i].test(value, index, reads, options)) {
                    value = observeReader.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    var specialRead = {
        index: true,
        key: true,
        event: true,
        element: true,
        viewModel: true
    };
    var checkForObservableAndNotify = function (options, state, getObserves, value, index) {
        if (options.foundObservable && !state.foundObservable) {
            if (ObservationRecorder.trapsCount()) {
                ObservationRecorder.addMany(getObserves());
                options.foundObservable(value, index);
                state.foundObservable = true;
            }
        }
    };
    var objHasKeyAtIndex = function (obj, reads, index) {
        return !!(reads && reads.length && canReflect.hasKey(obj, reads[index].key));
    };
    observeReader = {
        read: function (parent, reads, options) {
            options = options || {};
            var state = { foundObservable: false };
            var getObserves;
            if (options.foundObservable) {
                getObserves = ObservationRecorder.trap();
            }
            var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0, last, parentHasKey;
            checkForObservableAndNotify(options, state, getObserves, parent, 0);
            while (i < readLength) {
                prev = cur;
                for (var r = 0, readersLength = observeReader.propertyReaders.length; r < readersLength; r++) {
                    var reader = observeReader.propertyReaders[r];
                    if (reader.test(cur)) {
                        cur = reader.read(cur, reads[i], i, options, state);
                        break;
                    }
                }
                checkForObservableAndNotify(options, state, getObserves, prev, i);
                last = cur;
                i = i + 1;
                cur = readValue(cur, i, reads, options, state, prev);
                checkForObservableAndNotify(options, state, getObserves, prev, i - 1);
                type = typeof cur;
                if (i < reads.length && (cur === null || cur === undefined)) {
                    parentHasKey = objHasKeyAtIndex(prev, reads, i - 1);
                    if (options.earlyExit && !parentHasKey) {
                        options.earlyExit(prev, i - 1, cur);
                    }
                    return {
                        value: undefined,
                        parent: prev,
                        parentHasKey: parentHasKey,
                        foundLastParent: false
                    };
                }
            }
            parentHasKey = objHasKeyAtIndex(prev, reads, reads.length - 1);
            if (cur === undefined && !parentHasKey) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1);
                }
            }
            return {
                value: cur,
                parent: prev,
                parentHasKey: parentHasKey,
                foundLastParent: true
            };
        },
        get: function (parent, reads, options) {
            return observeReader.read(parent, observeReader.reads(reads), options || {}).value;
        },
        valueReadersMap: {},
        valueReaders: [
            {
                name: 'function',
                test: function (value) {
                    return value && canReflect.isFunctionLike(value) && !canReflect.isConstructorLike(value);
                },
                read: function (value, i, reads, options, state, prev) {
                    if (options.callMethodsOnObservables && canReflect.isObservableLike(prev) && canReflect.isMapLike(prev)) {
                        dev.warn('can-stache-key: read() called with `callMethodsOnObservables: true`.');
                        return value.apply(prev, options.args || []);
                    }
                    return options.proxyMethods !== false ? bindName.call(value, prev) : value;
                }
            },
            {
                name: 'isValueLike',
                test: function (value, i, reads, options) {
                    return value && value[getValueSymbol] && value[isValueLikeSymbol] !== false && (options.foundAt || !isAt(i, reads));
                },
                read: function (value, i, reads, options) {
                    if (options.readCompute === false && i === reads.length) {
                        return value;
                    }
                    return canReflect.getValue(value);
                },
                write: function (base, newVal) {
                    if (base[setValueSymbol]) {
                        base[setValueSymbol](newVal);
                    } else if (base.set) {
                        base.set(newVal);
                    } else {
                        base(newVal);
                    }
                }
            }
        ],
        propertyReadersMap: {},
        propertyReaders: [
            {
                name: 'map',
                test: function (value) {
                    if (canReflect.isPromise(value) || typeof value === 'object' && value && typeof value.then === 'function') {
                        canReflectPromise(value);
                    }
                    return canReflect.isObservableLike(value) && canReflect.isMapLike(value);
                },
                read: function (value, prop) {
                    var res = canReflect.getKeyValue(value, prop.key);
                    if (res !== undefined) {
                        return res;
                    } else {
                        return value[prop.key];
                    }
                },
                write: canReflect.setKeyValue
            },
            {
                name: 'object',
                test: function () {
                    return true;
                },
                read: function (value, prop, i, options) {
                    if (value == null) {
                        return undefined;
                    } else {
                        if (typeof value === 'object') {
                            if (prop.key in value) {
                                return value[prop.key];
                            }
                            if (process.env.NODE_ENV !== 'production') {
                                if (prop.at && specialRead[prop.key] && '@' + prop.key in value) {
                                    options.foundAt = true;
                                    dev.warn('Use %' + prop.key + ' in place of @' + prop.key + '.');
                                    return undefined;
                                }
                            }
                        } else {
                            return value[prop.key];
                        }
                    }
                },
                write: function (base, prop, newVal) {
                    var propValue = base[prop];
                    if (newVal != null && typeof newVal === 'object' && canReflect.isMapLike(propValue)) {
                        dev.warn('can-stache-key: Merging data into "' + prop + '" because its parent is non-observable');
                        canReflect.update(propValue, newVal);
                    } else if (propValue != null && propValue[setValueSymbol] !== undefined) {
                        canReflect.setValue(propValue, newVal);
                    } else {
                        base[prop] = newVal;
                    }
                }
            }
        ],
        reads: function (keyArg) {
            var key = '' + keyArg;
            var keys = [];
            var last = 0;
            var at = false;
            if (key.charAt(0) === '@') {
                last = 1;
                at = true;
            }
            var keyToAdd = '';
            for (var i = last; i < key.length; i++) {
                var character = key.charAt(i);
                if (character === '.' || character === '@') {
                    if (key.charAt(i - 1) !== '\\') {
                        keys.push({
                            key: keyToAdd,
                            at: at
                        });
                        at = character === '@';
                        keyToAdd = '';
                    } else {
                        keyToAdd = keyToAdd.substr(0, keyToAdd.length - 1) + '.';
                    }
                } else {
                    keyToAdd += character;
                }
            }
            keys.push({
                key: keyToAdd,
                at: at
            });
            return keys;
        },
        write: function (parent, key, value, options) {
            var keys = typeof key === 'string' ? observeReader.reads(key) : key;
            var last;
            options = options || {};
            if (keys.length > 1) {
                last = keys.pop();
                parent = observeReader.read(parent, keys, options).value;
                keys.push(last);
            } else {
                last = keys[0];
            }
            if (!parent) {
                return;
            }
            var keyValue = peek(parent, last.key);
            if (observeReader.valueReadersMap.isValueLike.test(keyValue, keys.length - 1, keys, options)) {
                observeReader.valueReadersMap.isValueLike.write(keyValue, value, options);
            } else {
                if (observeReader.valueReadersMap.isValueLike.test(parent, keys.length - 1, keys, options)) {
                    parent = parent[getValueSymbol]();
                }
                if (observeReader.propertyReadersMap.map.test(parent)) {
                    observeReader.propertyReadersMap.map.write(parent, last.key, value, options);
                } else if (observeReader.propertyReadersMap.object.test(parent)) {
                    observeReader.propertyReadersMap.object.write(parent, last.key, value, options);
                    if (options.observation) {
                        options.observation.update();
                    }
                }
            }
        }
    };
    observeReader.propertyReaders.forEach(function (reader) {
        observeReader.propertyReadersMap[reader.name] = reader;
    });
    observeReader.valueReaders.forEach(function (reader) {
        observeReader.valueReadersMap[reader.name] = reader;
    });
    observeReader.set = observeReader.write;
    module.exports = observeReader;
});
/*can-key@1.2.0#utils*/
define('can-key@1.2.0#utils', function (require, exports, module) {
    'use strict';
    var utils = {
        isContainer: function (current) {
            var type = typeof current;
            return current && (type === 'object' || type === 'function');
        },
        strReplacer: /\{([^\}]+)\}/g,
        parts: function (name) {
            if (Array.isArray(name)) {
                return name;
            } else {
                return typeof name !== 'undefined' ? (name + '').replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
            }
        }
    };
    module.exports = utils;
});
/*can-key@1.2.0#get/get*/
define('can-key@1.2.0#get/get', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var utils = require('../utils');
    function get(obj, name) {
        var parts = utils.parts(name);
        var length = parts.length, current, i, container;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length && utils.isContainer(current) && current !== null; i++) {
            container = current;
            current = canReflect.getKeyValue(container, parts[i]);
        }
        return current;
    }
    module.exports = get;
});
/*can-globals@1.2.0#location/location*/
define('can-globals@1.2.0#location/location', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('location', function () {
            return globals.getKeyValue('global').location;
        });
        module.exports = globals.makeExport('location');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#mutation-observer/mutation-observer*/
define('can-globals@1.2.0#mutation-observer/mutation-observer', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('MutationObserver', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.MutationObserver || GLOBAL.WebKitMutationObserver || GLOBAL.MozMutationObserver;
        });
        module.exports = globals.makeExport('MutationObserver');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#custom-elements/custom-elements*/
define('can-globals@1.2.0#custom-elements/custom-elements', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('customElements', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.customElements;
        });
        module.exports = globals.makeExport('customElements');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#can-globals*/
define('can-globals@1.2.0#can-globals', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    './global/global',
    './document/document',
    './location/location',
    './mutation-observer/mutation-observer',
    './is-browser-window/is-browser-window',
    './is-node/is-node',
    './custom-elements/custom-elements'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('./global/global');
        require('./document/document');
        require('./location/location');
        require('./mutation-observer/mutation-observer');
        require('./is-browser-window/is-browser-window');
        require('./is-node/is-node');
        require('./custom-elements/custom-elements');
        module.exports = globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.1.0#-util*/
define('can-dom-mutate@1.1.0#-util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var push = Array.prototype.push;
        function eliminate(array, item) {
            var index = array.indexOf(item);
            if (index >= 0) {
                array.splice(index, 1);
            }
        }
        function isInDocument(node) {
            var root = getDocument().documentElement;
            if (root === node) {
                return true;
            }
            return root.contains(node);
        }
        function isDocumentElement(node) {
            return getDocument().documentElement === node;
        }
        function isFragment(node) {
            return !!(node && node.nodeType === 11);
        }
        function getChildren(parentNode) {
            var nodes = [];
            var node = parentNode.firstChild;
            while (node) {
                nodes.push(node);
                node = node.nextSibling;
            }
            return nodes;
        }
        function getParents(node) {
            var nodes;
            if (isFragment(node)) {
                nodes = getChildren(node);
            } else {
                nodes = [node];
            }
            return nodes;
        }
        function getAllNodes(node) {
            var nodes = getParents(node);
            var cLen = nodes.length;
            for (var c = 0; c < cLen; c++) {
                var element = nodes[c];
                if (element.getElementsByTagName) {
                    var descendants = element.getElementsByTagName('*');
                    push.apply(nodes, descendants);
                }
            }
            return nodes;
        }
        function subscription(fn) {
            return function _subscription() {
                var disposal = fn.apply(this, arguments);
                var isDisposed = false;
                return function _disposal() {
                    if (isDisposed) {
                        var fnName = fn.name || fn.displayName || 'an anonymous function';
                        var message = 'Disposal function returned by ' + fnName + ' called more than once.';
                        throw new Error(message);
                    }
                    disposal.apply(this, arguments);
                    isDisposed = true;
                };
            };
        }
        module.exports = {
            eliminate: eliminate,
            isInDocument: isInDocument,
            getDocument: getDocument,
            isDocumentElement: isDocumentElement,
            isFragment: isFragment,
            getParents: getParents,
            getAllNodes: getAllNodes,
            getChildren: getChildren,
            subscription: subscription
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.1.0#can-dom-mutate*/
define('can-dom-mutate@1.1.0#can-dom-mutate', [
    'require',
    'exports',
    'module',
    'can-globals',
    'can-globals/global/global',
    'can-globals/mutation-observer/mutation-observer',
    './-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var getRoot = require('can-globals/global/global');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var setImmediate = getRoot().setImmediate || function (cb) {
            return setTimeout(cb, 0);
        };
        var util = require('./-util');
        var getDocument = util.getDocument;
        var eliminate = util.eliminate;
        var subscription = util.subscription;
        var isDocumentElement = util.isDocumentElement;
        var getAllNodes = util.getAllNodes;
        var push = Array.prototype.push;
        var slice = Array.prototype.slice;
        var domMutate;
        var dataStore = new WeakMap();
        function getRelatedData(node, key) {
            var data = dataStore.get(node);
            if (data) {
                return data[key];
            }
        }
        function setRelatedData(node, key, targetListenersMap) {
            var data = dataStore.get(node) || dataStore.set(node, {}).get(node);
            data[key] = targetListenersMap;
        }
        function deleteRelatedData(node, key) {
            var data = dataStore.get(node);
            return delete data[key];
        }
        function batch(processBatchItems, shouldDeduplicate) {
            var waitingBatch = [];
            var waitingCalls = [];
            var dispatchSet = new Set();
            var isPrimed = false;
            return function batchAdd(items, callback) {
                if (shouldDeduplicate) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        var target = item.target;
                        if (!dispatchSet.has(target)) {
                            waitingBatch.push(item);
                            dispatchSet.add(target);
                        }
                    }
                } else {
                    push.apply(waitingBatch, items);
                }
                if (callback) {
                    waitingCalls.push(callback);
                }
                var shouldPrime = !isPrimed && waitingBatch.length > 0;
                if (shouldPrime) {
                    isPrimed = true;
                    setImmediate(function processBatch() {
                        var currentBatch = waitingBatch;
                        waitingBatch = [];
                        var currentCalls = waitingCalls;
                        waitingCalls = [];
                        if (shouldDeduplicate) {
                            dispatchSet = new Set();
                        }
                        isPrimed = false;
                        processBatchItems(currentBatch);
                        var callCount = currentCalls.length;
                        for (var c = 0; c < callCount; c++) {
                            currentCalls[c]();
                        }
                    });
                }
            };
        }
        function getDocumentListeners(target, key) {
            var doc = getDocument();
            var data = getRelatedData(doc, key);
            if (data) {
                return data.listeners;
            }
        }
        function getTargetListeners(target, key) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            return targetListenersMap.get(target);
        }
        function addTargetListener(target, key, listener) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                targetListenersMap = new Map();
                setRelatedData(doc, key, targetListenersMap);
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                targetListeners = [];
                targetListenersMap.set(target, targetListeners);
            }
            targetListeners.push(listener);
        }
        function removeTargetListener(target, key, listener) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                return;
            }
            eliminate(targetListeners, listener);
            if (targetListeners.length === 0) {
                targetListenersMap['delete'](target);
                if (targetListenersMap.size === 0) {
                    deleteRelatedData(doc, key);
                }
            }
        }
        function fire(callbacks, arg) {
            var safeCallbacks = slice.call(callbacks, 0);
            var safeCallbackCount = safeCallbacks.length;
            for (var i = 0; i < safeCallbackCount; i++) {
                safeCallbacks[i](arg);
            }
        }
        function dispatch(listenerKey, documentDataKey) {
            return function dispatchEvents(events) {
                for (var e = 0; e < events.length; e++) {
                    var event = events[e];
                    var target = event.target;
                    var targetListeners = getTargetListeners(target, listenerKey);
                    if (targetListeners) {
                        fire(targetListeners, event);
                    }
                    if (!documentDataKey) {
                        continue;
                    }
                    var documentListeners = getDocumentListeners(target, documentDataKey);
                    if (documentListeners) {
                        fire(documentListeners, event);
                    }
                }
            };
        }
        function observeMutations(target, observerKey, config, handler) {
            var observerData = getRelatedData(target, observerKey);
            if (!observerData) {
                observerData = { observingCount: 0 };
                setRelatedData(target, observerKey, observerData);
            }
            var setupObserver = function () {
                var MutationObserver = getMutationObserver();
                if (MutationObserver) {
                    var Node = getRoot().Node;
                    var isRealNode = !!(Node && target instanceof Node);
                    if (isRealNode) {
                        var targetObserver = new MutationObserver(handler);
                        targetObserver.observe(target, config);
                        observerData.observer = targetObserver;
                    }
                } else {
                    if (observerData.observer) {
                        observerData.observer.disconnect();
                        observerData.observer = null;
                    }
                }
            };
            if (observerData.observingCount === 0) {
                globals.onKeyValue('MutationObserver', setupObserver);
                setupObserver();
            }
            observerData.observingCount++;
            return function stopObservingMutations() {
                var observerData = getRelatedData(target, observerKey);
                if (observerData) {
                    observerData.observingCount--;
                    if (observerData.observingCount <= 0) {
                        if (observerData.observer) {
                            observerData.observer.disconnect();
                        }
                        deleteRelatedData(target, observerKey);
                        globals.offKeyValue('MutationObserver', setupObserver);
                    }
                }
            };
        }
        function handleTreeMutations(mutations) {
            var mutationCount = mutations.length;
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                var addedNodes = mutation.addedNodes;
                var addedCount = addedNodes.length;
                for (var a = 0; a < addedCount; a++) {
                    domMutate.dispatchNodeInsertion(addedNodes[a]);
                }
                var removedNodes = mutation.removedNodes;
                var removedCount = removedNodes.length;
                for (var r = 0; r < removedCount; r++) {
                    domMutate.dispatchNodeRemoval(removedNodes[r]);
                }
            }
        }
        function handleAttributeMutations(mutations) {
            var mutationCount = mutations.length;
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                if (mutation.type === 'attributes') {
                    var node = mutation.target;
                    var attributeName = mutation.attributeName;
                    var oldValue = mutation.oldValue;
                    domMutate.dispatchNodeAttributeChange(node, attributeName, oldValue);
                }
            }
        }
        var treeMutationConfig = {
            subtree: true,
            childList: true
        };
        var attributeMutationConfig = {
            attributes: true,
            attributeOldValue: true
        };
        function addNodeListener(listenerKey, observerKey, isAttributes) {
            return subscription(function _addNodeListener(target, listener) {
                var stopObserving;
                if (isAttributes) {
                    stopObserving = observeMutations(target, observerKey, attributeMutationConfig, handleAttributeMutations);
                } else {
                    stopObserving = observeMutations(getDocument(), observerKey, treeMutationConfig, handleTreeMutations);
                }
                addTargetListener(target, listenerKey, listener);
                return function removeNodeListener() {
                    stopObserving();
                    removeTargetListener(target, listenerKey, listener);
                };
            });
        }
        function addGlobalListener(globalDataKey, addNodeListener) {
            return subscription(function addGlobalGroupListener(documentElement, listener) {
                if (!isDocumentElement(documentElement)) {
                    throw new Error('Global mutation listeners must pass a documentElement');
                }
                var doc = getDocument();
                var documentData = getRelatedData(doc, globalDataKey);
                if (!documentData) {
                    documentData = { listeners: [] };
                    setRelatedData(doc, globalDataKey, documentData);
                }
                var listeners = documentData.listeners;
                if (listeners.length === 0) {
                    documentData.removeListener = addNodeListener(doc, function () {
                    });
                }
                listeners.push(listener);
                return function removeGlobalGroupListener() {
                    var documentData = getRelatedData(doc, globalDataKey);
                    if (!documentData) {
                        return;
                    }
                    var listeners = documentData.listeners;
                    eliminate(listeners, listener);
                    if (listeners.length === 0) {
                        documentData.removeListener();
                        deleteRelatedData(doc, globalDataKey);
                    }
                };
            });
        }
        function toMutationEvents(nodes) {
            var events = [];
            for (var i = 0; i < nodes.length; i++) {
                events.push({ target: nodes[i] });
            }
            return events;
        }
        var domMutationPrefix = 'domMutation';
        var insertionDataKey = domMutationPrefix + 'InsertionData';
        var removalDataKey = domMutationPrefix + 'RemovalData';
        var attributeChangeDataKey = domMutationPrefix + 'AttributeChangeData';
        var documentInsertionDataKey = domMutationPrefix + 'DocumentInsertionData';
        var documentRemovalDataKey = domMutationPrefix + 'DocumentRemovalData';
        var documentAttributeChangeDataKey = domMutationPrefix + 'DocumentAttributeChangeData';
        var treeDataKey = domMutationPrefix + 'TreeData';
        var attributeDataKey = domMutationPrefix + 'AttributeData';
        var dispatchInsertion = batch(dispatch(insertionDataKey, documentInsertionDataKey), true);
        var dispatchRemoval = batch(dispatch(removalDataKey, documentRemovalDataKey), true);
        var dispatchAttributeChange = batch(dispatch(attributeChangeDataKey, documentAttributeChangeDataKey));
        var addNodeInsertionListener = addNodeListener(insertionDataKey, treeDataKey);
        var addNodeRemovalListener = addNodeListener(removalDataKey, treeDataKey);
        var addNodeAttributeChangeListener = addNodeListener(attributeChangeDataKey, attributeDataKey, true);
        var addInsertionListener = addGlobalListener(documentInsertionDataKey, addNodeInsertionListener);
        var addRemovalListener = addGlobalListener(documentRemovalDataKey, addNodeRemovalListener);
        var addAttributeChangeListener = addGlobalListener(documentAttributeChangeDataKey, addNodeAttributeChangeListener);
        domMutate = {
            dispatchNodeInsertion: function (node, callback) {
                var events = toMutationEvents(getAllNodes(node));
                dispatchInsertion(events, callback);
            },
            dispatchNodeRemoval: function (node, callback) {
                var events = toMutationEvents(getAllNodes(node));
                dispatchRemoval(events, callback);
            },
            dispatchNodeAttributeChange: function (target, attributeName, oldValue, callback) {
                dispatchAttributeChange([{
                        target: target,
                        attributeName: attributeName,
                        oldValue: oldValue
                    }], callback);
            },
            onNodeInsertion: addNodeInsertionListener,
            onNodeRemoval: addNodeRemovalListener,
            onNodeAttributeChange: addNodeAttributeChangeListener,
            onRemoval: addRemovalListener,
            onInsertion: addInsertionListener,
            onAttributeChange: addAttributeChangeListener
        };
        module.exports = domMutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-control@4.2.0#can-control*/
define('can-control@4.2.0#can-control', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-namespace',
    'can-assign',
    'can-stache-key',
    'can-reflect',
    'can-observation',
    'can-event-queue/map/map',
    'can-log/dev/dev',
    'can-string',
    'can-key/get/get',
    'can-dom-mutate'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var namespace = require('can-namespace');
    var assign = require('can-assign');
    var observeReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var canEvent = require('can-event-queue/map/map');
    var dev = require('can-log/dev/dev');
    var string = require('can-string');
    var get = require('can-key/get/get');
    var domMutate = require('can-dom-mutate');
    var processors;
    var controlData = new WeakMap();
    var bind = function (el, ev, callback, queue) {
            canEvent.on.call(el, ev, callback, queue);
            return function () {
                canEvent.off.call(el, ev, callback, queue);
            };
        }, slice = [].slice, paramReplacer = /\{([^\}]+)\}/g, delegate = function (el, selector, ev, callback) {
            canEvent.on.call(el, ev, selector, callback);
            return function () {
                canEvent.off.call(el, ev, selector, callback);
            };
        }, binder = function (el, ev, callback, selector) {
            return selector ? delegate(el, selector.trim(), ev, callback) : bind(el, ev, callback);
        }, basicProcessor;
    var Control = Construct.extend('Control', {
        setup: function () {
            Construct.setup.apply(this, arguments);
            if (Control) {
                var control = this, funcName;
                control.actions = {};
                for (funcName in control.prototype) {
                    if (control._isAction(funcName)) {
                        control.actions[funcName] = control._action(funcName);
                    }
                }
            }
        },
        _shifter: function (context, name) {
            var method = typeof name === 'string' ? context[name] : name;
            if (typeof method !== 'function') {
                method = context[method];
            }
            var Control = this;
            function controlMethod() {
                var wrapped = Control.wrapElement(this);
                context.called = name;
                return method.apply(context, [wrapped].concat(slice.call(arguments, 0)));
            }
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(controlMethod, 'name', { value: canReflect.getName(this) + '[' + name + ']' });
            }
            return controlMethod;
        },
        _isAction: function (methodName) {
            var val = this.prototype[methodName], type = typeof val;
            return methodName !== 'constructor' && (type === 'function' || type === 'string' && typeof this.prototype[val] === 'function') && !!(Control.isSpecial(methodName) || processors[methodName] || /[^\w]/.test(methodName));
        },
        _action: function (methodName, options, controlInstance) {
            var readyCompute, unableToBind;
            paramReplacer.lastIndex = 0;
            if (options || !paramReplacer.test(methodName)) {
                var controlActionData = function () {
                    var delegate;
                    var name = methodName.replace(paramReplacer, function (matched, key) {
                        var value, parent;
                        if (this._isDelegate(options, key)) {
                            delegate = this._getDelegate(options, key);
                            return '';
                        }
                        key = this._removeDelegateFromKey(key);
                        parent = this._lookup(options)[0];
                        value = observeReader.read(parent, observeReader.reads(key), { readCompute: false }).value;
                        if (value === undefined && typeof window !== 'undefined') {
                            value = get(window, key);
                        }
                        if (!parent || !(canReflect.isObservableLike(parent) && canReflect.isMapLike(parent)) && !value) {
                            unableToBind = true;
                            return null;
                        }
                        if (typeof value === 'string') {
                            return value;
                        } else {
                            delegate = value;
                            return '';
                        }
                    }.bind(this));
                    name = name.trim();
                    var parts = name.split(/\s+/g), event = parts.pop();
                    return {
                        processor: this.processors[event] || basicProcessor,
                        parts: [
                            name,
                            parts.join(' '),
                            event
                        ],
                        delegate: delegate || undefined
                    };
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(controlActionData, 'name', { value: canReflect.getName(controlInstance || this.prototype) + '[' + methodName + '].actionData' });
                }
                readyCompute = new Observation(controlActionData, this);
                if (controlInstance) {
                    var handler = function (actionData) {
                        controlInstance._bindings.control[methodName](controlInstance.element);
                        controlInstance._bindings.control[methodName] = actionData.processor(actionData.delegate || controlInstance.element, actionData.parts[2], actionData.parts[1], methodName, controlInstance);
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        Object.defineProperty(handler, 'name', { value: canReflect.getName(controlInstance) + '[' + methodName + '].handler' });
                    }
                    canReflect.onValue(readyCompute, handler, 'mutate');
                    if (process.env.NODE_ENV !== 'production') {
                        if (unableToBind) {
                            dev.log('can-control: No property found for handling ' + methodName);
                        }
                    }
                    controlInstance._bindings.readyComputes[methodName] = {
                        compute: readyCompute,
                        handler: handler
                    };
                }
                return readyCompute.get();
            }
        },
        _lookup: function (options) {
            return [
                options,
                window
            ];
        },
        _removeDelegateFromKey: function (key) {
            return key;
        },
        _isDelegate: function (options, key) {
            return key === 'element';
        },
        _getDelegate: function (options, key) {
            return undefined;
        },
        processors: {},
        defaults: {},
        convertElement: function (element) {
            element = typeof element === 'string' ? document.querySelector(element) : element;
            return this.wrapElement(element);
        },
        wrapElement: function (el) {
            return el;
        },
        unwrapElement: function (el) {
            return el;
        },
        isSpecial: function (eventName) {
            return eventName === 'inserted' || eventName === 'removed';
        }
    }, {
        setup: function (element, options) {
            var cls = this.constructor, pluginname = cls.pluginName || cls.shortName, arr;
            if (!element) {
                throw new Error('Creating an instance of a named control without passing an element');
            }
            this.element = cls.convertElement(element);
            if (pluginname && pluginname !== 'Control' && this.element.classList) {
                this.element.classList.add(pluginname);
            }
            arr = controlData.get(this.element);
            if (!arr) {
                arr = [];
                controlData.set(this.element, arr);
            }
            arr.push(this);
            if (canReflect.isObservableLike(options) && canReflect.isMapLike(options)) {
                for (var prop in cls.defaults) {
                    if (!options.hasOwnProperty(prop)) {
                        observeReader.set(options, prop, cls.defaults[prop]);
                    }
                }
                this.options = options;
            } else {
                this.options = assign(assign({}, cls.defaults), options);
            }
            this.on();
            return [
                this.element,
                this.options
            ];
        },
        on: function (el, selector, eventName, func) {
            if (!el) {
                this.off();
                var cls = this.constructor, bindings = this._bindings, actions = cls.actions, element = this.constructor.unwrapElement(this.element), destroyCB = Control._shifter(this, 'destroy'), funcName, ready;
                for (funcName in actions) {
                    if (actions.hasOwnProperty(funcName)) {
                        ready = actions[funcName] || cls._action(funcName, this.options, this);
                        if (ready) {
                            bindings.control[funcName] = ready.processor(ready.delegate || element, ready.parts[2], ready.parts[1], funcName, this);
                        }
                    }
                }
                var removalDisposal = domMutate.onNodeRemoval(element, function () {
                    if (!element.ownerDocument.contains(element)) {
                        destroyCB();
                    }
                });
                bindings.user.push(function () {
                    if (removalDisposal) {
                        removalDisposal();
                        removalDisposal = undefined;
                    }
                });
                return bindings.user.length;
            }
            if (typeof el === 'string') {
                func = eventName;
                eventName = selector;
                selector = el;
                el = this.element;
            }
            if (func === undefined) {
                func = eventName;
                eventName = selector;
                selector = null;
            }
            if (typeof func === 'string') {
                func = Control._shifter(this, func);
            }
            this._bindings.user.push(binder(el, eventName, func, selector));
            return this._bindings.user.length;
        },
        off: function () {
            var el = this.constructor.unwrapElement(this.element), bindings = this._bindings;
            if (bindings) {
                (bindings.user || []).forEach(function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.control || {}, function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.readyComputes || {}, function (value) {
                    canReflect.offValue(value.compute, value.handler, 'mutate');
                });
            }
            this._bindings = {
                user: [],
                control: {},
                readyComputes: {}
            };
        },
        destroy: function () {
            if (this.element === null) {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('can-control: Control already destroyed');
                }
                return;
            }
            var Class = this.constructor, pluginName = Class.pluginName || Class.shortName && string.underscore(Class.shortName), controls;
            this.off();
            if (pluginName && pluginName !== 'can_control' && this.element.classList) {
                this.element.classList.remove(pluginName);
            }
            controls = controlData.get(this.element);
            if (controls) {
                controls.splice(controls.indexOf(this), 1);
            }
            this.element = null;
        }
    });
    processors = Control.processors;
    basicProcessor = function (el, event, selector, methodName, control) {
        return binder(el, event, Control._shifter(control, methodName), selector);
    };
    [
        'beforeremove',
        'change',
        'click',
        'contextmenu',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'reset',
        'resize',
        'scroll',
        'select',
        'submit',
        'focusin',
        'focusout',
        'mouseenter',
        'mouseleave',
        'touchstart',
        'touchmove',
        'touchcancel',
        'touchend',
        'touchleave',
        'inserted',
        'removed',
        'dragstart',
        'dragenter',
        'dragover',
        'dragleave',
        'drag',
        'drop',
        'dragend'
    ].forEach(function (v) {
        processors[v] = basicProcessor;
    });
    module.exports = namespace.Control = Control;
});
/*can-component@4.3.0#control/control*/
define('can-component@4.3.0#control/control', [
    'require',
    'exports',
    'module',
    'can-control',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Control = require('can-control');
    var canReflect = require('can-reflect');
    var paramReplacer = /\{([^\}]+)\}/g;
    var ComponentControl = Control.extend({
        _lookup: function (options) {
            return [
                options.scope,
                options,
                window
            ];
        },
        _removeDelegateFromKey: function (key) {
            return key.replace(/^(scope|^viewModel)\./, '');
        },
        _isDelegate: function (options, key) {
            return key === 'scope' || key === 'viewModel';
        },
        _getDelegate: function (options, key) {
            return options[key];
        },
        _action: function (methodName, options, controlInstance) {
            var hasObjectLookup;
            paramReplacer.lastIndex = 0;
            hasObjectLookup = paramReplacer.test(methodName);
            if (!controlInstance && hasObjectLookup) {
                return;
            } else {
                return Control._action.apply(this, arguments);
            }
        }
    }, {
        setup: function (el, options) {
            this.scope = options.scope;
            this.viewModel = options.viewModel;
            return Control.prototype.setup.call(this, el, options);
        },
        off: function () {
            if (this._bindings) {
                canReflect.eachKey(this._bindings.readyComputes || {}, function (value) {
                    canReflect.offValue(value.compute, value.handler);
                });
            }
            Control.prototype.off.apply(this, arguments);
            this._bindings.readyComputes = {};
        },
        destroy: function () {
            Control.prototype.destroy.apply(this, arguments);
            if (typeof this.options.destroy === 'function') {
                this.options.destroy.apply(this, arguments);
            }
        }
    });
    module.exports = ComponentControl;
});
/*can-reflect-dependencies@1.1.0#src/add-mutated-by*/
define('can-reflect-dependencies@1.1.0#src/add-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var makeDependencyRecord = function makeDependencyRecord() {
        return {
            keyDependencies: new Map(),
            valueDependencies: new Set()
        };
    };
    var makeRootRecord = function makeRootRecord() {
        return {
            mutateDependenciesForKey: new Map(),
            mutateDependenciesForValue: makeDependencyRecord()
        };
    };
    module.exports = function (mutatedByMap) {
        return function addMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                mutator = { valueDependencies: new Set([mutator]) };
            }
            var root = mutatedByMap.get(mutated);
            if (!root) {
                root = makeRootRecord();
                mutatedByMap.set(mutated, root);
            }
            if (gotKey && !root.mutateDependenciesForKey.get(key)) {
                root.mutateDependenciesForKey.set(key, makeDependencyRecord());
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.addValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (!entry) {
                        entry = new Set();
                        dependencyRecord.keyDependencies.set(obj, entry);
                    }
                    canReflect.addValues(entry, keysSet);
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#src/delete-mutated-by*/
define('can-reflect-dependencies@1.1.0#src/delete-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function (mutatedByMap) {
        return function deleteMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            var root = mutatedByMap.get(mutated);
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                mutator = { valueDependencies: new Set([mutator]) };
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.removeValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (entry) {
                        canReflect.removeValues(entry, keysSet);
                        if (!entry.size) {
                            dependencyRecord.keyDependencies.delete(obj);
                        }
                    }
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#src/is-function*/
define('can-reflect-dependencies@1.1.0#src/is-function', function (require, exports, module) {
    'use strict';
    module.exports = function isFunction(value) {
        return typeof value === 'function';
    };
});
/*can-reflect-dependencies@1.1.0#src/get-dependency-data-of*/
define('can-reflect-dependencies@1.1.0#src/get-dependency-data-of', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect',
    './is-function'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var isFunction = require('./is-function');
    var getWhatIChangeSymbol = canSymbol.for('can.getWhatIChange');
    var getKeyDependenciesSymbol = canSymbol.for('can.getKeyDependencies');
    var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
    var getKeyDependencies = function getKeyDependencies(obj, key) {
        if (isFunction(obj[getKeyDependenciesSymbol])) {
            return canReflect.getKeyDependencies(obj, key);
        }
    };
    var getValueDependencies = function getValueDependencies(obj) {
        if (isFunction(obj[getValueDependenciesSymbol])) {
            return canReflect.getValueDependencies(obj);
        }
    };
    var getMutatedKeyDependencies = function getMutatedKeyDependencies(mutatedByMap, obj, key) {
        var root = mutatedByMap.get(obj);
        var dependencyRecord;
        if (root && root.mutateDependenciesForKey.has(key)) {
            dependencyRecord = root.mutateDependenciesForKey.get(key);
        }
        return dependencyRecord;
    };
    var getMutatedValueDependencies = function getMutatedValueDependencies(mutatedByMap, obj) {
        var result;
        var root = mutatedByMap.get(obj);
        if (root) {
            var dependencyRecord = root.mutateDependenciesForValue;
            if (dependencyRecord.keyDependencies.size) {
                result = result || {};
                result.keyDependencies = dependencyRecord.keyDependencies;
            }
            if (dependencyRecord.valueDependencies.size) {
                result = result || {};
                result.valueDependencies = dependencyRecord.valueDependencies;
            }
        }
        return result;
    };
    var getWhatIChange = function getWhatIChange(obj, key) {
        if (isFunction(obj[getWhatIChangeSymbol])) {
            var gotKey = arguments.length === 2;
            return gotKey ? canReflect.getWhatIChange(obj, key) : canReflect.getWhatIChange(obj);
        }
    };
    var isEmptyRecord = function isEmptyRecord(record) {
        return record == null || !Object.keys(record).length || record.keyDependencies && !record.keyDependencies.size && (record.valueDependencies && !record.valueDependencies.size);
    };
    var getWhatChangesMe = function getWhatChangesMe(mutatedByMap, obj, key) {
        var gotKey = arguments.length === 3;
        var mutate = gotKey ? getMutatedKeyDependencies(mutatedByMap, obj, key) : getMutatedValueDependencies(mutatedByMap, obj);
        var derive = gotKey ? getKeyDependencies(obj, key) : getValueDependencies(obj);
        if (!isEmptyRecord(mutate) || !isEmptyRecord(derive)) {
            return Object.assign({}, mutate ? { mutate: mutate } : null, derive ? { derive: derive } : null);
        }
    };
    module.exports = function (mutatedByMap) {
        return function getDependencyDataOf(obj, key) {
            var gotKey = arguments.length === 2;
            var whatChangesMe = gotKey ? getWhatChangesMe(mutatedByMap, obj, key) : getWhatChangesMe(mutatedByMap, obj);
            var whatIChange = gotKey ? getWhatIChange(obj, key) : getWhatIChange(obj);
            if (whatChangesMe || whatIChange) {
                return Object.assign({}, whatIChange ? { whatIChange: whatIChange } : null, whatChangesMe ? { whatChangesMe: whatChangesMe } : null);
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#can-reflect-dependencies*/
define('can-reflect-dependencies@1.1.0#can-reflect-dependencies', [
    'require',
    'exports',
    'module',
    './src/add-mutated-by',
    './src/delete-mutated-by',
    './src/get-dependency-data-of'
], function (require, exports, module) {
    'use strict';
    var addMutatedBy = require('./src/add-mutated-by');
    var deleteMutatedBy = require('./src/delete-mutated-by');
    var getDependencyDataOf = require('./src/get-dependency-data-of');
    var mutatedByMap = new WeakMap();
    module.exports = {
        addMutatedBy: addMutatedBy(mutatedByMap),
        deleteMutatedBy: deleteMutatedBy(mutatedByMap),
        getDependencyDataOf: getDependencyDataOf(mutatedByMap)
    };
});
/*can-bind@1.0.0#can-bind*/
define('can-bind@1.0.0#can-bind', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-namespace',
    'can-queues',
    'can-log/dev/dev',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    var queues = require('can-queues');
    if (process.env.NODE_ENV !== 'production') {
        var canLog = require('can-log/dev/dev');
        var canReflectDeps = require('can-reflect-dependencies');
    }
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    var getValueSymbol = canSymbol.for('can.getValue');
    var onValueSymbol = canSymbol.for('can.onValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    function defaultSetValue(newValue, observable) {
        canReflect.setValue(observable, newValue);
    }
    function turnOffListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        if (listenToObservable[onValueSymbol]) {
            canReflect.offValue(listenToObservable, updateFunction, queue);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(updateObservable, listenToObservable);
                updateFunction[getChangesSymbol] = function getChangesDependencyRecord() {
                };
            }
        }
    }
    function turnOnListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        if (listenToObservable[onValueSymbol]) {
            canReflect.onValue(listenToObservable, updateFunction, queue);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(updateObservable, listenToObservable);
                updateFunction[getChangesSymbol] = function getChangesDependencyRecord() {
                    return { valueDependencies: new Set([updateObservable]) };
                };
            }
        }
    }
    function Semaphore() {
        this.value = 0;
    }
    Object.assign(Semaphore.prototype, {
        decrement: function () {
            this.value -= 1;
        },
        increment: function () {
            this.value += 1;
        }
    });
    function Bind(options) {
        this._options = options;
        if (process.env.NODE_ENV !== 'production') {
            if (options.child === undefined) {
                throw new TypeError('You must supply a child');
            }
            if (options.parent === undefined) {
                throw new TypeError('You must supply a parent');
            }
            if (options.queue && [
                    'notify',
                    'derive',
                    'domUI'
                ].indexOf(options.queue) === -1) {
                throw new RangeError('Invalid queue; must be one of notify, derive, or domUI');
            }
        }
        if (options.queue === undefined) {
            options.queue = 'domUI';
        }
        if (options.cycles > 0 === false) {
            options.cycles = 0;
        }
        options.onInitDoNotUpdateChild = typeof options.onInitDoNotUpdateChild === 'boolean' ? options.onInitDoNotUpdateChild : false;
        options.onInitSetUndefinedParentIfChildIsDefined = typeof options.onInitSetUndefinedParentIfChildIsDefined === 'boolean' ? options.onInitSetUndefinedParentIfChildIsDefined : true;
        var childSemaphore = new Semaphore();
        var parentSemaphore = new Semaphore();
        var childToParent = true;
        if (typeof options.childToParent === 'boolean') {
            childToParent = options.childToParent;
        } else if (options.child[getValueSymbol] == null) {
            childToParent = false;
        } else if (options.setParent === undefined && options.parent[setValueSymbol] == null) {
            childToParent = false;
        }
        var parentToChild = true;
        if (typeof options.parentToChild === 'boolean') {
            parentToChild = options.parentToChild;
        } else if (options.parent[getValueSymbol] == null) {
            parentToChild = false;
        } else if (options.setChild === undefined && options.child[setValueSymbol] == null) {
            parentToChild = false;
        }
        if (childToParent === false && parentToChild === false) {
            throw new Error('Neither the child nor parent will be updated; this is a no-way binding');
        }
        this._childToParent = childToParent;
        this._parentToChild = parentToChild;
        if (options.setChild === undefined) {
            options.setChild = defaultSetValue;
        }
        if (options.setParent === undefined) {
            options.setParent = defaultSetValue;
        }
        if (options.priority !== undefined) {
            canReflect.setPriority(options.child, options.priority);
            canReflect.setPriority(options.parent, options.priority);
        }
        var allowedUpdates = options.cycles * 2;
        var allowedChildUpdates = allowedUpdates + (options.sticky === 'childSticksToParent' ? 1 : 0);
        var allowedParentUpdates = allowedUpdates + (options.sticky === 'parentSticksToChild' ? 1 : 0);
        var bindingState = this._bindingState = {
            child: false,
            parent: false
        };
        this._updateChild = function (newValue) {
            updateValue({
                bindingState: bindingState,
                newValue: newValue,
                debugObservableName: 'child',
                debugPartnerName: 'parent',
                observable: options.child,
                setValue: options.setChild,
                semaphore: childSemaphore,
                allowedUpdates: allowedChildUpdates,
                sticky: options.sticky === 'parentSticksToChild',
                partner: options.parent,
                setPartner: options.setParent,
                partnerSemaphore: parentSemaphore
            });
        };
        this._updateParent = function (newValue) {
            updateValue({
                bindingState: bindingState,
                newValue: newValue,
                debugObservableName: 'parent',
                debugPartnerName: 'child',
                observable: options.parent,
                setValue: options.setParent,
                semaphore: parentSemaphore,
                allowedUpdates: allowedParentUpdates,
                sticky: options.sticky === 'childSticksToParent',
                partner: options.child,
                setPartner: options.setChild,
                partnerSemaphore: childSemaphore
            });
        };
        if (process.env.NODE_ENV !== 'production') {
            if (options.updateChildName) {
                Object.defineProperty(this._updateChild, 'name', { value: options.updateChildName });
            }
            if (options.updateParentName) {
                Object.defineProperty(this._updateParent, 'name', { value: options.updateParentName });
            }
        }
    }
    Object.defineProperty(Bind.prototype, 'parentValue', {
        get: function () {
            return canReflect.getValue(this._options.parent);
        }
    });
    Object.assign(Bind.prototype, {
        start: function () {
            var childValue;
            var options = this._options;
            var parentValue;
            this.startParent();
            this.startChild();
            if (this._childToParent === true && this._parentToChild === true) {
                parentValue = canReflect.getValue(options.parent);
                if (parentValue === undefined) {
                    childValue = canReflect.getValue(options.child);
                    if (childValue === undefined) {
                        if (options.onInitDoNotUpdateChild === false) {
                            this._updateChild(parentValue);
                        }
                    } else if (options.onInitSetUndefinedParentIfChildIsDefined === true) {
                        this._updateParent(childValue);
                    }
                } else {
                    if (options.onInitDoNotUpdateChild === false) {
                        this._updateChild(parentValue);
                    }
                }
            } else if (this._childToParent === true) {
                childValue = canReflect.getValue(options.child);
                this._updateParent(childValue);
            } else if (this._parentToChild === true) {
                if (options.onInitDoNotUpdateChild === false) {
                    parentValue = canReflect.getValue(options.parent);
                    this._updateChild(parentValue);
                }
            }
        },
        startChild: function () {
            if (this._bindingState.child === false && this._childToParent === true) {
                var options = this._options;
                this._bindingState.child = true;
                turnOnListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        },
        startParent: function () {
            if (this._bindingState.parent === false && this._parentToChild === true) {
                var options = this._options;
                this._bindingState.parent = true;
                turnOnListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
        },
        stop: function () {
            var bindingState = this._bindingState;
            var options = this._options;
            if (bindingState.parent === true && this._parentToChild === true) {
                bindingState.parent = false;
                turnOffListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
            if (bindingState.child === true && this._childToParent === true) {
                bindingState.child = false;
                turnOffListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        }
    });
    function updateValue(args) {
        var bindingState = args.bindingState;
        if (bindingState.child === false && bindingState.parent === false) {
            return;
        }
        var semaphore = args.semaphore;
        if (semaphore.value + args.partnerSemaphore.value <= args.allowedUpdates) {
            queues.batch.start();
            args.setValue(args.newValue, args.observable);
            semaphore.increment();
            queues.mutateQueue.enqueue(semaphore.decrement, semaphore, []);
            queues.batch.stop();
            if (args.sticky) {
                var observableValue = canReflect.getValue(args.observable);
                if (observableValue !== canReflect.getValue(args.partner)) {
                    args.setPartner(observableValue, args.partner);
                }
            }
        } else {
            if (process.env.NODE_ENV !== 'production') {
                var currentValue = canReflect.getValue(args.observable);
                if (currentValue !== args.newValue) {
                    var warningParts = [
                        'can-bind updateValue: attempting to update ' + args.debugObservableName + ' ' + canReflect.getName(args.observable) + ' to new value: %o',
                        '\u2026but the ' + args.debugObservableName + ' semaphore is at ' + semaphore.value + ' and the ' + args.debugPartnerName + ' semaphore is at ' + args.partnerSemaphore.value + '. The number of allowed updates is ' + args.allowedUpdates + '.',
                        'The ' + args.debugObservableName + ' value will remain unchanged; it\u2019s currently: %o'
                    ];
                    canLog.warn(warningParts.join('\n'), args.newValue, currentValue);
                }
            }
        }
    }
    module.exports = namespace.Bind = Bind;
});
/*can-attribute-encoder@1.1.0#can-attribute-encoder*/
define('can-attribute-encoder@1.1.0#can-attribute-encoder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var dev = require('can-log/dev/dev');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    var caseMattersAttributes = makeMap('allowReorder,attributeName,attributeType,autoReverse,baseFrequency,baseProfile,calcMode,clipPathUnits,contentScriptType,contentStyleType,diffuseConstant,edgeMode,externalResourcesRequired,filterRes,filterUnits,glyphRef,gradientTransform,gradientUnits,kernelMatrix,kernelUnitLength,keyPoints,keySplines,keyTimes,lengthAdjust,limitingConeAngle,markerHeight,markerUnits,markerWidth,maskContentUnits,maskUnits,patternContentUnits,patternTransform,patternUnits,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,repeatCount,repeatDur,requiredExtensions,requiredFeatures,specularConstant,specularExponent,spreadMethod,startOffset,stdDeviation,stitchTiles,surfaceScale,systemLanguage,tableValues,textLength,viewBox,viewTarget,xChannelSelector,yChannelSelector');
    function camelCaseToSpinalCase(match, lowerCaseChar, upperCaseChar) {
        return lowerCaseChar + '-' + upperCaseChar.toLowerCase();
    }
    function startsWith(allOfIt, startsWith) {
        return allOfIt.indexOf(startsWith) === 0;
    }
    function endsWith(allOfIt, endsWith) {
        return allOfIt.length - allOfIt.indexOf(endsWith) === endsWith.length;
    }
    var regexes = {
        leftParens: /\(/g,
        rightParens: /\)/g,
        leftBrace: /\{/g,
        rightBrace: /\}/g,
        camelCase: /([a-z]|^)([A-Z])/g,
        forwardSlash: /\//g,
        space: /\s/g,
        uppercase: /[A-Z]/g,
        uppercaseDelimiterThenChar: /:u:([a-z])/g,
        caret: /\^/g,
        dollar: /\$/g,
        at: /@/g
    };
    var delimiters = {
        prependUppercase: ':u:',
        replaceSpace: ':s:',
        replaceForwardSlash: ':f:',
        replaceLeftParens: ':lp:',
        replaceRightParens: ':rp:',
        replaceLeftBrace: ':lb:',
        replaceRightBrace: ':rb:',
        replaceCaret: ':c:',
        replaceDollar: ':d:',
        replaceAt: ':at:'
    };
    var encoder = {};
    encoder.encode = function (name) {
        var encoded = name;
        if (!caseMattersAttributes[encoded] && encoded.match(regexes.camelCase)) {
            if (startsWith(encoded, 'on:') || endsWith(encoded, ':to') || endsWith(encoded, ':from') || endsWith(encoded, ':bind') || endsWith(encoded, ':raw')) {
                encoded = encoded.replace(regexes.uppercase, function (char) {
                    return delimiters.prependUppercase + char.toLowerCase();
                });
            } else if (startsWith(encoded, '(') || startsWith(encoded, '{')) {
                encoded = encoded.replace(regexes.camelCase, camelCaseToSpinalCase);
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('can-attribute-encoder: Found attribute with name: ' + name + '. Converting to: ' + encoded + '.');
                }
            }
        }
        encoded = encoded.replace(regexes.space, delimiters.replaceSpace).replace(regexes.forwardSlash, delimiters.replaceForwardSlash).replace(regexes.leftParens, delimiters.replaceLeftParens).replace(regexes.rightParens, delimiters.replaceRightParens).replace(regexes.leftBrace, delimiters.replaceLeftBrace).replace(regexes.rightBrace, delimiters.replaceRightBrace).replace(regexes.caret, delimiters.replaceCaret).replace(regexes.dollar, delimiters.replaceDollar).replace(regexes.at, delimiters.replaceAt);
        return encoded;
    };
    encoder.decode = function (name) {
        var decoded = name;
        if (!caseMattersAttributes[decoded] && decoded.match(regexes.uppercaseDelimiterThenChar)) {
            if (startsWith(decoded, 'on:') || endsWith(decoded, ':to') || endsWith(decoded, ':from') || endsWith(decoded, ':bind') || endsWith(decoded, ':raw')) {
                decoded = decoded.replace(regexes.uppercaseDelimiterThenChar, function (match, char) {
                    return char.toUpperCase();
                });
            }
        }
        decoded = decoded.replace(delimiters.replaceLeftParens, '(').replace(delimiters.replaceRightParens, ')').replace(delimiters.replaceLeftBrace, '{').replace(delimiters.replaceRightBrace, '}').replace(delimiters.replaceForwardSlash, '/').replace(delimiters.replaceSpace, ' ').replace(delimiters.replaceCaret, '^').replace(delimiters.replaceDollar, '$').replace(delimiters.replaceAt, '@');
        return decoded;
    };
    if (namespace.encoder) {
        throw new Error('You can\'t have two versions of can-attribute-encoder, check your dependencies');
    } else {
        module.exports = namespace.encoder = encoder;
    }
});
/*can-view-parser@4.1.0#can-view-parser*/
define('can-view-parser@4.1.0#can-view-parser', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev',
    'can-attribute-encoder'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace'), dev = require('can-log/dev/dev'), encoder = require('can-attribute-encoder');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    if (process.env.NODE_ENV !== 'production') {
        var countLines = function countLines(input) {
            return input.split('\n').length - 1;
        };
    }
    var alphaNumeric = 'A-Za-z0-9', alphaNumericHU = '-:_' + alphaNumeric, magicStart = '{{', endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), magicMatch = new RegExp('\\{\\{(![\\s\\S]*?!|[\\s\\S]*?)\\}\\}\\}?', 'g'), space = /\s/, alphaRegex = new RegExp('[' + alphaNumeric + ']'), attributeRegexp = new RegExp('[' + alphaNumericHU + ']+s*=s*("[^"]*"|\'[^\']*\')');
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var caseMattersElements = makeMap('altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var special = makeMap('script');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var startOppositesMap = {
        '{': '}',
        '(': ')'
    };
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        var end = arguments.length;
                        if (arguments[end - 1] === undefined) {
                            end = arguments.length - 1;
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            end = arguments.length;
                        }
                        intermediate.push({
                            tokenType: name,
                            args: [].slice.call(arguments, 0, end)
                        });
                    }
                };
            });
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary, lineNo);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler, lineNo);
            if (process.env.NODE_ENV !== 'production') {
                lineNo += countLines(tag);
            }
            handler.end(tagName, unary, lineNo);
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (process.env.NODE_ENV !== 'production') {
                if (typeof tag === 'undefined') {
                    if (stack.length > 0) {
                        if (handler.filename) {
                            dev.warn(handler.filename + ': expected closing tag </' + stack[pos] + '>');
                        } else {
                            dev.warn('expected closing tag </' + stack[pos] + '>');
                        }
                    }
                } else if (pos < 0 || pos !== stack.length - 1) {
                    if (stack.length > 0) {
                        if (handler.filename) {
                            dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                        } else {
                            dev.warn(lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                        }
                    } else {
                        if (handler.filename) {
                            dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag);
                        } else {
                            dev.warn(lineNo + ': unexpected closing tag ' + tag);
                        }
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i], lineNo);
                    }
                }
                stack.length = pos;
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside, lineNo);
            }
        }
        var callChars = function () {
            if (charsText) {
                if (handler.chars) {
                    handler.chars(charsText, lineNo);
                }
                if (process.env.NODE_ENV !== 'production') {
                    lineNo += countLines(charsText);
                }
            }
            charsText = '';
        };
        var index, chars, match, lineNo, stack = [], last = html, charsText = '';
        if (process.env.NODE_ENV !== 'production') {
            lineNo = 1;
        }
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        callChars();
                        if (handler.comment) {
                            handler.comment(html.substring(4, index), lineNo);
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, index + 3));
                        }
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        callChars();
                        match[0].replace(endTag, parseEndTag);
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, match[0].length));
                        }
                        html = html.substring(match[0].length);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    var res = HTMLParser.searchStartTag(html);
                    if (res) {
                        callChars();
                        parseStartTag.apply(null, res.match);
                        html = res.html;
                        chars = false;
                    }
                } else if (html.indexOf(magicStart) === 0) {
                    match = html.match(magicMatch);
                    if (match) {
                        callChars();
                        match[0].replace(magicMatch, parseMustache);
                        if (process.env.NODE_ENV !== 'production') {
                            lineNo += countLines(html.substring(0, match[0].length));
                        }
                        html = html.substring(match[0].length);
                    }
                }
                if (chars) {
                    index = findBreak(html, magicStart);
                    if (index === 0 && html === last) {
                        charsText += html.charAt(0);
                        html = html.substr(1);
                        index = findBreak(html, magicStart);
                    }
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (text) {
                        charsText += text;
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text, lineNo);
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        lineNo += countLines(text);
                    }
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        callChars();
        parseEndTag();
        handler.done(lineNo);
        return intermediate;
    };
    var callAttrStart = function (state, curIndex, handler, rest, lineNo) {
        var attrName = rest.substring(typeof state.nameStart === 'number' ? state.nameStart : curIndex, curIndex), newAttrName = encoder.encode(attrName);
        state.attrStart = newAttrName;
        handler.attrStart(state.attrStart, lineNo);
        state.inName = false;
    };
    var callAttrEnd = function (state, curIndex, handler, rest, lineNo) {
        if (state.valueStart !== undefined && state.valueStart < curIndex) {
            var val = rest.substring(state.valueStart, curIndex);
            if (process.env.NODE_ENV !== 'production') {
                var quotedVal, closedQuote;
                quotedVal = rest.substring(state.valueStart - 1, curIndex + 1);
                quotedVal = quotedVal.trim();
                closedQuote = quotedVal.charAt(quotedVal.length - 1);
                if (state.inQuote !== closedQuote) {
                    if (handler.filename) {
                        dev.warn(handler.filename + ':' + lineNo + ': End quote is missing for ' + val);
                    } else {
                        dev.warn(lineNo + ': End quote is missing for ' + val);
                    }
                }
            }
            handler.attrValue(val, lineNo);
        }
        handler.attrEnd(state.attrStart, lineNo);
        state.attrStart = undefined;
        state.valueStart = undefined;
        state.inValue = false;
        state.inName = false;
        state.lookingForEq = false;
        state.inQuote = false;
        state.lookingForName = true;
    };
    var findBreak = function (str, magicStart) {
        var magicLength = magicStart.length;
        for (var i = 0, len = str.length; i < len; i++) {
            if (str[i] === '<' || str.substr(i, magicLength) === magicStart) {
                return i;
            }
        }
        return -1;
    };
    HTMLParser.parseAttrs = function (rest, handler, lineNo) {
        if (!rest) {
            return;
        }
        var i = 0;
        var curIndex;
        var state = {
            inName: false,
            nameStart: undefined,
            inValue: false,
            valueStart: undefined,
            inQuote: false,
            attrStart: undefined,
            lookingForName: true,
            lookingForValue: false,
            lookingForEq: false
        };
        while (i < rest.length) {
            curIndex = i;
            var cur = rest.charAt(i);
            i++;
            if (magicStart === rest.substr(curIndex, magicStart.length)) {
                if (state.inValue && curIndex > state.valueStart) {
                    handler.attrValue(rest.substring(state.valueStart, curIndex), lineNo);
                } else if (state.inName && state.nameStart < curIndex) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                } else if (state.lookingForValue) {
                    state.inValue = true;
                } else if (state.lookingForEq && state.attrStart) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
                magicMatch.lastIndex = curIndex;
                var match = magicMatch.exec(rest);
                if (match) {
                    handler.special(match[1], lineNo);
                    i = curIndex + match[0].length;
                    if (state.inValue) {
                        state.valueStart = curIndex + match[0].length;
                    }
                }
            } else if (state.inValue) {
                if (state.inQuote) {
                    if (cur === state.inQuote) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                } else if (space.test(cur)) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            } else if (cur === '=' && (state.lookingForEq || state.lookingForName || state.inName)) {
                if (!state.attrStart) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                }
                state.lookingForValue = true;
                state.lookingForEq = false;
                state.lookingForName = false;
            } else if (state.inName) {
                var started = rest[state.nameStart], otherStart, otherOpposite;
                if (startOppositesMap[started] === cur) {
                    otherStart = started === '{' ? '(' : '{';
                    otherOpposite = startOppositesMap[otherStart];
                    if (rest[curIndex + 1] === otherOpposite) {
                        callAttrStart(state, curIndex + 2, handler, rest, lineNo);
                        i++;
                    } else {
                        callAttrStart(state, curIndex + 1, handler, rest, lineNo);
                    }
                    state.lookingForEq = true;
                } else if (space.test(cur) && started !== '{' && started !== '(') {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    state.lookingForEq = true;
                }
            } else if (state.lookingForName) {
                if (!space.test(cur)) {
                    if (state.attrStart) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                    state.nameStart = curIndex;
                    state.inName = true;
                }
            } else if (state.lookingForValue) {
                if (!space.test(cur)) {
                    state.lookingForValue = false;
                    state.inValue = true;
                    if (cur === '\'' || cur === '"') {
                        state.inQuote = cur;
                        state.valueStart = curIndex + 1;
                    } else {
                        state.valueStart = curIndex;
                    }
                } else if (i === rest.length) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            }
        }
        if (state.inName) {
            callAttrStart(state, curIndex + 1, handler, rest, lineNo);
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        } else if (state.lookingForEq || state.lookingForValue || state.inValue) {
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        }
        magicMatch.lastIndex = 0;
    };
    HTMLParser.searchStartTag = function (html) {
        var closingIndex = html.indexOf('>');
        var attributeRange = attributeRegexp.exec(html.substring(1));
        var afterAttributeOffset = 1;
        while (attributeRange && closingIndex >= afterAttributeOffset + attributeRange.index) {
            afterAttributeOffset += attributeRange.index + attributeRange[0].length;
            while (closingIndex < afterAttributeOffset) {
                closingIndex += html.substring(closingIndex + 1).indexOf('>') + 1;
            }
            attributeRange = attributeRegexp.exec(html.substring(afterAttributeOffset));
        }
        if (closingIndex === -1 || !alphaRegex.test(html[1])) {
            return null;
        }
        var tagName, tagContent, match, rest = '', unary = '';
        var startTag = html.substring(0, closingIndex + 1);
        var isUnary = startTag[startTag.length - 2] === '/';
        var spaceIndex = startTag.search(space);
        if (isUnary) {
            unary = '/';
            tagContent = startTag.substring(1, startTag.length - 2).trim();
        } else {
            tagContent = startTag.substring(1, startTag.length - 1).trim();
        }
        if (spaceIndex === -1) {
            tagName = tagContent;
        } else {
            spaceIndex--;
            tagName = tagContent.substring(0, spaceIndex);
            rest = tagContent.substring(spaceIndex);
        }
        match = [
            startTag,
            tagName,
            rest,
            unary
        ];
        return {
            match: match,
            html: html.substring(startTag.length)
        };
    };
    module.exports = namespace.HTMLParser = HTMLParser;
});
/*can-dom-mutate@1.1.0#node*/
define('can-dom-mutate@1.1.0#node', [
    'require',
    'exports',
    'module',
    'can-globals',
    './can-dom-mutate',
    './-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var domMutate = require('./can-dom-mutate');
        var util = require('./-util');
        var isInDocument = util.isInDocument;
        var getParents = util.getParents;
        var synthetic = {
            dispatchNodeInsertion: function (container, node) {
                if (isInDocument(node)) {
                    domMutate.dispatchNodeInsertion(node);
                }
            },
            dispatchNodeRemoval: function (container, node) {
                if (isInDocument(container) && !isInDocument(node)) {
                    domMutate.dispatchNodeRemoval(node);
                }
            }
        };
        var compat = {
            replaceChild: function (newChild, oldChild) {
                var newChildren = getParents(newChild);
                var result = this.replaceChild(newChild, oldChild);
                synthetic.dispatchNodeRemoval(this, oldChild);
                for (var i = 0; i < newChildren.length; i++) {
                    synthetic.dispatchNodeInsertion(this, newChildren[i]);
                }
                return result;
            },
            setAttribute: function (name, value) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.setAttribute(name, value);
                var newAttributeValue = this.getAttribute(name);
                if (oldAttributeValue !== newAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            },
            removeAttribute: function (name) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.removeAttribute(name);
                if (oldAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            }
        };
        var compatData = [
            [
                'appendChild',
                'Insertion'
            ],
            [
                'insertBefore',
                'Insertion'
            ],
            [
                'removeChild',
                'Removal'
            ]
        ];
        compatData.forEach(function (pair) {
            var nodeMethod = pair[0];
            var dispatchMethod = 'dispatchNode' + pair[1];
            compat[nodeMethod] = function (node) {
                var nodes = getParents(node);
                var result = this[nodeMethod].apply(this, arguments);
                for (var i = 0; i < nodes.length; i++) {
                    synthetic[dispatchMethod](this, nodes[i]);
                }
                return result;
            };
        });
        var normal = {};
        var nodeMethods = [
            'appendChild',
            'insertBefore',
            'removeChild',
            'replaceChild',
            'setAttribute',
            'removeAttribute'
        ];
        nodeMethods.forEach(function (methodName) {
            normal[methodName] = function () {
                return this[methodName].apply(this, arguments);
            };
        });
        var mutate = {};
        function setMutateStrategy(observer) {
            var strategy = observer ? normal : compat;
            for (var key in strategy) {
                mutate[key] = strategy[key];
            }
        }
        var mutationObserverKey = 'MutationObserver';
        setMutateStrategy(globals.getKeyValue(mutationObserverKey));
        globals.onKeyValue(mutationObserverKey, setMutateStrategy);
        module.exports = mutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-nodelist@4.3.2#can-view-nodelist*/
define('can-view-nodelist@4.3.2#can-view-nodelist', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-dom-mutate/node'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutate = require('can-dom-mutate/node');
    var nodeMap = new Map(), splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements) {
            var map = new Map();
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map.set(node, replacements[i]);
            }
            return map;
        }, addUnfoundAsDeepChildren = function (list, rMap) {
            rMap.forEach(function (replacement) {
                list.newDeepChildren.push(replacement);
            });
        };
    var nodeLists = {
        update: function (nodeList, newNodes, oldNodes) {
            if (!oldNodes) {
                oldNodes = nodeLists.unregisterChildren(nodeList);
            }
            var arr = [];
            for (var i = 0, ref = arr.length = newNodes.length; i < ref; i++) {
                arr[i] = newNodes[i];
            }
            newNodes = arr;
            var oldListLength = nodeList.length;
            splice.apply(nodeList, [
                0,
                oldListLength
            ].concat(newNodes));
            if (nodeList.replacements) {
                nodeLists.nestReplacements(nodeList);
                nodeList.deepChildren = nodeList.newDeepChildren;
                nodeList.newDeepChildren = [];
            } else {
                nodeLists.nestList(nodeList);
            }
            return oldNodes;
        },
        nestReplacements: function (list) {
            var index = 0, rMap = replacementMap(list.replacements), rCount = list.replacements.length;
            while (index < list.length && rCount) {
                var node = list[index], replacement = rMap.get(node);
                if (replacement) {
                    rMap['delete'](node);
                    list.splice(index, itemsInChildListTree(replacement), replacement);
                    rCount--;
                }
                index++;
            }
            if (rCount) {
                addUnfoundAsDeepChildren(list, rMap);
            }
            list.replacements = [];
        },
        nestList: function (list) {
            var index = 0;
            while (index < list.length) {
                var node = list[index], childNodeList = nodeMap.get(node);
                if (childNodeList) {
                    if (childNodeList !== list) {
                        list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                    }
                } else {
                    nodeMap.set(node, list);
                }
                index++;
            }
        },
        last: function (nodeList) {
            var last = nodeList[nodeList.length - 1];
            if (last.nodeType) {
                return last;
            } else {
                return nodeLists.last(last);
            }
        },
        first: function (nodeList) {
            var first = nodeList[0];
            if (first.nodeType) {
                return first;
            } else {
                return nodeLists.first(first);
            }
        },
        flatten: function (nodeList) {
            var items = [];
            for (var i = 0; i < nodeList.length; i++) {
                var item = nodeList[i];
                if (item.nodeType) {
                    items.push(item);
                } else {
                    items.push.apply(items, nodeLists.flatten(item));
                }
            }
            return items;
        },
        register: function (nodeList, unregistered, parent, directlyNested) {
            nodeList.unregistered = unregistered;
            nodeList.parentList = parent;
            nodeList.nesting = parent && typeof parent.nesting !== 'undefined' ? parent.nesting + 1 : 0;
            if (parent) {
                nodeList.deepChildren = [];
                nodeList.newDeepChildren = [];
                nodeList.replacements = [];
                if (parent !== true) {
                    if (directlyNested) {
                        parent.replacements.push(nodeList);
                    } else {
                        parent.newDeepChildren.push(nodeList);
                    }
                }
            } else {
                nodeLists.nestList(nodeList);
            }
            return nodeList;
        },
        unregisterChildren: function (nodeList) {
            var nodes = [];
            for (var n = 0; n < nodeList.length; n++) {
                var node = nodeList[n];
                if (node.nodeType) {
                    if (!nodeList.replacements) {
                        nodeMap['delete'](node);
                    }
                    nodes.push(node);
                } else {
                    push.apply(nodes, nodeLists.unregister(node, true));
                }
            }
            var deepChildren = nodeList.deepChildren;
            if (deepChildren) {
                for (var l = 0; l < deepChildren.length; l++) {
                    nodeLists.unregister(deepChildren[l], true);
                }
            }
            return nodes;
        },
        unregister: function (nodeList, isChild) {
            var nodes = nodeLists.unregisterChildren(nodeList, true);
            nodeList.isUnregistered = true;
            if (nodeList.unregistered) {
                var unregisteredCallback = nodeList.unregistered;
                nodeList.replacements = nodeList.unregistered = null;
                if (!isChild) {
                    var deepChildren = nodeList.parentList && nodeList.parentList.deepChildren;
                    if (deepChildren) {
                        var index = deepChildren.indexOf(nodeList);
                        if (index !== -1) {
                            deepChildren.splice(index, 1);
                        }
                    }
                }
                unregisteredCallback();
            }
            return nodes;
        },
        after: function (oldElements, newFrag) {
            var last = oldElements[oldElements.length - 1];
            if (last.nextSibling) {
                domMutate.insertBefore.call(last.parentNode, newFrag, last.nextSibling);
            } else {
                domMutate.appendChild.call(last.parentNode, newFrag);
            }
        },
        replace: function (oldElements, newFrag) {
            var selectedValue, parentNode = oldElements[0].parentNode;
            if (parentNode.nodeName.toUpperCase() === 'SELECT' && parentNode.selectedIndex >= 0) {
                selectedValue = parentNode.value;
            }
            if (oldElements.length === 1) {
                domMutate.replaceChild.call(parentNode, newFrag, oldElements[0]);
            } else {
                nodeLists.after(oldElements, newFrag);
                nodeLists.remove(oldElements);
            }
            if (selectedValue !== undefined) {
                parentNode.value = selectedValue;
            }
        },
        remove: function (elementsToBeRemoved) {
            var parent = elementsToBeRemoved[0] && elementsToBeRemoved[0].parentNode;
            for (var i = 0; i < elementsToBeRemoved.length; i++) {
                domMutate.removeChild.call(parent, elementsToBeRemoved[i]);
            }
        },
        nodeMap: nodeMap
    };
    module.exports = namespace.nodeLists = nodeLists;
});
/*can-child-nodes@1.2.0#can-child-nodes*/
define('can-child-nodes@1.2.0#can-child-nodes', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function childNodes(node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return childNodes;
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    }
    module.exports = namespace.childNodes = childNodes;
});
/*can-fragment@1.2.0#can-fragment*/
define('can-fragment@1.2.0#can-fragment', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace',
    'can-reflect',
    'can-child-nodes'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var childNodes = require('can-child-nodes');
        var fragmentRE = /^\s*<(\w+)[^>]*>/, toString = {}.toString;
        function makeFragment(html, name, doc) {
            if (name === undefined) {
                name = fragmentRE.test(html) && RegExp.$1;
            }
            if (html && toString.call(html.replace) === '[object Function]') {
                html = html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, '<$1></$2>');
            }
            var container = doc.createElement('div'), temp = doc.createElement('div');
            if (name === 'tbody' || name === 'tfoot' || name === 'thead' || name === 'colgroup') {
                temp.innerHTML = '<table>' + html + '</table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else if (name === 'col') {
                temp.innerHTML = '<table><colgroup>' + html + '</colgroup></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'tr') {
                temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'td' || name === 'th') {
                temp.innerHTML = '<table><tbody><tr>' + html + '</tr></tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild.firstChild;
            } else if (name === 'option') {
                temp.innerHTML = '<select>' + html + '</select>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else {
                container.innerHTML = '' + html;
            }
            return [].slice.call(childNodes(container));
        }
        function fragment(html, doc) {
            if (html && html.nodeType === 11) {
                return html;
            }
            if (!doc) {
                doc = getDocument();
            } else if (doc.length) {
                doc = doc[0];
            }
            var parts = makeFragment(html, undefined, doc), frag = (doc || document).createDocumentFragment();
            for (var i = 0, length = parts.length; i < length; i++) {
                frag.appendChild(parts[i]);
            }
            return frag;
        }
        var makeFrag = function (item, doc) {
            var document = doc || getDocument();
            var frag;
            if (!item || typeof item === 'string') {
                frag = fragment(item == null ? '' : '' + item, document);
            } else if (item.nodeType === 11) {
                return item;
            } else if (typeof item.nodeType === 'number') {
                frag = document.createDocumentFragment();
                frag.appendChild(item);
                return frag;
            } else if (canReflect.isListLike(item)) {
                frag = document.createDocumentFragment();
                canReflect.eachIndex(item, function (item) {
                    frag.appendChild(makeFrag(item));
                });
            } else {
                frag = fragment('' + item, document);
            }
            if (!childNodes(frag).length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        };
        module.exports = namespace.fragment = namespace.frag = makeFrag;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-callbacks@4.3.0#can-view-callbacks*/
define('can-view-callbacks@4.3.0#can-view-callbacks', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-globals/global/global',
    'can-dom-mutate/node',
    'can-namespace',
    'can-view-nodelist',
    'can-fragment',
    'can-globals',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var ObservationRecorder = require('can-observation-recorder');
        var dev = require('can-log/dev/dev');
        var getGlobal = require('can-globals/global/global');
        var domMutate = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var nodeLists = require('can-view-nodelist');
        var makeFrag = require('can-fragment');
        var globals = require('can-globals');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var callbackMapSymbol = canSymbol.for('can.callbackMap');
        if (process.env.NODE_ENV !== 'production') {
            var requestedAttributes = {};
        }
        var tags = {};
        var automountEnabled = function () {
            return globals.getKeyValue('document').documentElement.getAttribute('data-can-automount') !== 'false';
        };
        var renderedElements = new WeakMap();
        var renderNodeAndChildren = function (node) {
            var tagName = node.tagName && node.tagName.toLowerCase();
            var tagHandler = tags[tagName];
            var children;
            if (tagHandler && !renderedElements.has(node)) {
                tagHandler(node, {});
            }
            if (node.getElementsByTagName) {
                children = node.getElementsByTagName('*');
                for (var k = 0, child; (child = children[k]) !== undefined; k++) {
                    renderNodeAndChildren(child);
                }
            }
        };
        var mutationObserverEnabled = false;
        var globalMutationObserver;
        var enableMutationObserver = function () {
            if (mutationObserverEnabled) {
                return;
            }
            var mutationHandler = function (mutationsList) {
                var addedNodes;
                for (var i = 0, mutation; (mutation = mutationsList[i]) !== undefined; i++) {
                    if (mutation.type === 'childList') {
                        addedNodes = mutation.addedNodes;
                        for (var j = 0, addedNode; (addedNode = addedNodes[j]) !== undefined; j++) {
                            if (!renderedElements.has(addedNode)) {
                                renderNodeAndChildren(addedNode);
                            }
                        }
                    }
                }
            };
            var MutationObserver = globals.getKeyValue('MutationObserver');
            if (MutationObserver) {
                globalMutationObserver = new MutationObserver(mutationHandler);
                globalMutationObserver.observe(getGlobal().document.documentElement, {
                    childList: true,
                    subtree: true
                });
                mutationObserverEnabled = true;
            }
        };
        var renderTagsInDocument = function (tagName) {
            var nodes = getGlobal().document.getElementsByTagName(tagName);
            for (var i = 0, node; (node = nodes[i]) !== undefined; i++) {
                renderNodeAndChildren(node);
            }
        };
        var attr = function (attributeName, attrHandler) {
            if (attrHandler) {
                if (typeof attributeName === 'string') {
                    attributes[attributeName] = attrHandler;
                    if (process.env.NODE_ENV !== 'production') {
                        if (requestedAttributes[attributeName]) {
                            dev.warn('can-view-callbacks: ' + attributeName + ' custom attribute behavior requested before it was defined.  Make sure ' + attributeName + ' is defined before it is needed.');
                        }
                    }
                } else {
                    regExpAttributes.push({
                        match: attributeName,
                        handler: attrHandler
                    });
                    if (process.env.NODE_ENV !== 'production') {
                        Object.keys(requestedAttributes).forEach(function (requested) {
                            if (attributeName.test(requested)) {
                                dev.warn('can-view-callbacks: ' + requested + ' custom attribute behavior requested before it was defined.  Make sure ' + requested + ' is defined before it is needed.');
                            }
                        });
                    }
                }
            } else {
                var cb = attributes[attributeName];
                if (!cb) {
                    for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                        var attrMatcher = regExpAttributes[i];
                        if (attrMatcher.match.test(attributeName)) {
                            return attrMatcher.handler;
                        }
                    }
                }
                if (process.env.NODE_ENV !== 'production') {
                    requestedAttributes[attributeName] = true;
                }
                return cb;
            }
        };
        var attrs = function (attrMap) {
            var map = canReflect.getKeyValue(attrMap, callbackMapSymbol) || attrMap;
            if (attrMaps.has(map)) {
                return;
            } else {
                attrMaps.set(map, true);
            }
            canReflect.eachKey(map, function (callback, exp) {
                attr(exp, callback);
            });
        };
        var attributes = {}, regExpAttributes = [], attrMaps = new WeakMap(), automaticCustomElementCharacters = /[-\:]/;
        var defaultCallback = function () {
        };
        var tag = function (tagName, tagHandler) {
            if (tagHandler) {
                var GLOBAL = getGlobal();
                var validCustomElementName = automaticCustomElementCharacters.test(tagName), tagExists = typeof tags[tagName.toLowerCase()] !== 'undefined', customElementExists;
                if (process.env.NODE_ENV !== 'production') {
                    if (tagExists) {
                        dev.warn('Custom tag: ' + tagName.toLowerCase() + ' is already defined');
                    }
                    if (!validCustomElementName && tagName !== 'content') {
                        dev.warn('Custom tag: ' + tagName.toLowerCase() + ' hyphen missed');
                    }
                }
                if (GLOBAL.html5) {
                    GLOBAL.html5.elements += ' ' + tagName;
                    GLOBAL.html5.shivDocument();
                }
                tags[tagName.toLowerCase()] = tagHandler;
                if (automountEnabled()) {
                    var customElements = globals.getKeyValue('customElements');
                    if (customElements) {
                        customElementExists = customElements.get(tagName.toLowerCase());
                        if (validCustomElementName && !customElementExists) {
                            var CustomElement = function () {
                                return Reflect.construct(HTMLElement, [], CustomElement);
                            };
                            CustomElement.prototype = Object.create(HTMLElement.prototype);
                            CustomElement.prototype.connectedCallback = function () {
                                if (!renderedElements.has(this)) {
                                    tags[tagName.toLowerCase()](this, {});
                                }
                            };
                            customElements.define(tagName, CustomElement);
                        }
                    } else {
                        enableMutationObserver();
                        renderTagsInDocument(tagName);
                    }
                } else if (mutationObserverEnabled) {
                    globalMutationObserver.disconnect();
                }
            } else {
                var cb;
                if (tagHandler === null) {
                    delete tags[tagName.toLowerCase()];
                } else {
                    cb = tags[tagName.toLowerCase()];
                }
                if (!cb && automaticCustomElementCharacters.test(tagName)) {
                    cb = defaultCallback;
                }
                return cb;
            }
        };
        var callbacks = {
            _tags: tags,
            _attributes: attributes,
            _regExpAttributes: regExpAttributes,
            defaultCallback: defaultCallback,
            tag: tag,
            attr: attr,
            attrs: attrs,
            tagHandler: function (el, tagName, tagData) {
                var scope = tagData.scope, helperTagCallback = scope && scope.templateContext.tags.get(tagName), tagCallback = helperTagCallback || tags[tagName], res;
                if (tagCallback) {
                    res = ObservationRecorder.ignore(tagCallback)(el, tagData);
                    renderedElements.set(el, true);
                } else {
                    res = scope;
                }
                if (process.env.NODE_ENV !== 'production') {
                    if (!tagCallback) {
                        var GLOBAL = getGlobal();
                        var ceConstructor = GLOBAL.document.createElement(tagName).constructor;
                        if (ceConstructor === GLOBAL.HTMLElement || ceConstructor === GLOBAL.HTMLUnknownElement) {
                            dev.warn('can-view-callbacks: No custom element found for ' + tagName);
                        }
                    }
                }
                if (res && tagData.subtemplate) {
                    if (scope !== res) {
                        scope = scope.add(res);
                    }
                    var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                    nodeList.expression = '<' + el.tagName + '>';
                    var result = tagData.subtemplate(scope, tagData.options, nodeList);
                    var frag = typeof result === 'string' ? makeFrag(result) : result;
                    domMutate.appendChild.call(el, frag);
                }
            }
        };
        namespace.view = namespace.view || {};
        if (namespace.view.callbacks) {
            throw new Error('You can\'t have two versions of can-view-callbacks, check your dependencies');
        } else {
            module.exports = namespace.view.callbacks = callbacks;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-target@4.1.0#can-view-target*/
define('can-view-target@4.1.0#can-view-target', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-dom-mutate/node',
    'can-namespace',
    'can-globals/mutation-observer/mutation-observer'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var MUTATION_OBSERVER = require('can-globals/mutation-observer/mutation-observer');
        var processNodes = function (nodes, paths, location, document) {
                var frag = document.createDocumentFragment();
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var node = nodes[i];
                    frag.appendChild(processNode(node, paths, location.concat(i), document));
                }
                return frag;
            }, keepsTextNodes = typeof document !== 'undefined' && function () {
                var testFrag = document.createDocumentFragment();
                var div = document.createElement('div');
                div.appendChild(document.createTextNode(''));
                div.appendChild(document.createTextNode(''));
                testFrag.appendChild(div);
                var cloned = testFrag.cloneNode(true);
                return cloned.firstChild.childNodes.length === 2;
            }(), clonesWork = typeof document !== 'undefined' && function () {
                var el = document.createElement('a');
                el.innerHTML = '<xyz></xyz>';
                var clone = el.cloneNode(true);
                var works = clone.innerHTML === '<xyz></xyz>';
                var MO, observer;
                if (works) {
                    el = document.createDocumentFragment();
                    el.appendChild(document.createTextNode('foo-bar'));
                    MO = MUTATION_OBSERVER();
                    if (MO) {
                        observer = new MO(function () {
                        });
                        observer.observe(document.documentElement, {
                            childList: true,
                            subtree: true
                        });
                        clone = el.cloneNode(true);
                        observer.disconnect();
                    } else {
                        clone = el.cloneNode(true);
                    }
                    return clone.childNodes.length === 1;
                }
                return works;
            }(), namespacesWork = typeof document !== 'undefined' && !!document.createElementNS;
        var cloneNode = clonesWork ? function (el) {
            return el.cloneNode(true);
        } : function (node) {
            var document = node.ownerDocument;
            var copy;
            if (node.nodeType === 1) {
                if (node.namespaceURI !== 'http://www.w3.org/1999/xhtml' && namespacesWork && document.createElementNS) {
                    copy = document.createElementNS(node.namespaceURI, node.nodeName);
                } else {
                    copy = document.createElement(node.nodeName);
                }
            } else if (node.nodeType === 3) {
                copy = document.createTextNode(node.nodeValue);
            } else if (node.nodeType === 8) {
                copy = document.createComment(node.nodeValue);
            } else if (node.nodeType === 11) {
                copy = document.createDocumentFragment();
            }
            if (node.attributes) {
                var attributes = node.attributes;
                for (var i = 0; i < attributes.length; i++) {
                    var attribute = attributes[i];
                    if (attribute && attribute.specified) {
                        domMutate.setAttribute.call(copy, attribute.nodeName || attribute.name, attribute.nodeValue || attribute.value);
                    }
                }
            }
            if (node && node.firstChild) {
                var child = node.firstChild;
                while (child) {
                    copy.appendChild(cloneNode(child));
                    child = child.nextSibling;
                }
            }
            return copy;
        };
        function processNode(node, paths, location, document) {
            var callback, loc = location, nodeType = typeof node, el, p, i, len;
            var getCallback = function () {
                if (!callback) {
                    callback = {
                        path: location,
                        callbacks: []
                    };
                    paths.push(callback);
                    loc = [];
                }
                return callback;
            };
            if (nodeType === 'object') {
                if (node.tag) {
                    if (namespacesWork && node.namespace) {
                        el = document.createElementNS(node.namespace, node.tag);
                    } else {
                        el = document.createElement(node.tag);
                    }
                    if (node.attrs) {
                        for (var attrName in node.attrs) {
                            var value = node.attrs[attrName];
                            if (typeof value === 'function') {
                                getCallback().callbacks.push({ callback: value });
                            } else {
                                domMutate.setAttribute.call(el, attrName, value);
                            }
                        }
                    }
                    if (node.attributes) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.attributes[i] });
                        }
                    }
                    if (node.children && node.children.length) {
                        if (callback) {
                            p = callback.paths = [];
                        } else {
                            p = paths;
                        }
                        el.appendChild(processNodes(node.children, p, loc, document));
                    }
                } else if (node.comment) {
                    el = document.createComment(node.comment);
                    if (node.callbacks) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.callbacks[i] });
                        }
                    }
                }
            } else if (nodeType === 'string') {
                el = document.createTextNode(node);
            } else if (nodeType === 'function') {
                if (keepsTextNodes) {
                    el = document.createTextNode('');
                    getCallback().callbacks.push({ callback: node });
                } else {
                    el = document.createComment('~');
                    getCallback().callbacks.push({
                        callback: function () {
                            var el = document.createTextNode('');
                            domMutate.replaceChild.call(this.parentNode, el, this);
                            return node.apply(el, arguments);
                        }
                    });
                }
            }
            return el;
        }
        function getCallbacks(el, pathData, elementCallbacks) {
            var path = pathData.path, callbacks = pathData.callbacks, paths = pathData.paths, child = el, pathLength = path ? path.length : 0, pathsLength = paths ? paths.length : 0;
            for (var i = 0; i < pathLength; i++) {
                child = child.childNodes.item(path[i]);
            }
            for (i = 0; i < pathsLength; i++) {
                getCallbacks(child, paths[i], elementCallbacks);
            }
            elementCallbacks.push({
                element: child,
                callbacks: callbacks
            });
        }
        function hydrateCallbacks(callbacks, args) {
            var len = callbacks.length, callbacksLength, callbackElement, callbackData;
            for (var i = 0; i < len; i++) {
                callbackData = callbacks[i];
                callbacksLength = callbackData.callbacks.length;
                callbackElement = callbackData.element;
                for (var c = 0; c < callbacksLength; c++) {
                    callbackData.callbacks[c].callback.apply(callbackElement, args);
                }
            }
        }
        function makeTarget(nodes, doc) {
            var paths = [];
            var frag = processNodes(nodes, paths, [], doc || getDocument());
            return {
                paths: paths,
                clone: frag,
                hydrate: function () {
                    var cloned = cloneNode(this.clone);
                    var args = [];
                    for (var a = 0, ref = args.length = arguments.length; a < ref; a++) {
                        args[a] = arguments[a];
                    }
                    var callbacks = [];
                    for (var i = 0; i < paths.length; i++) {
                        getCallbacks(cloned, paths[i], callbacks);
                    }
                    hydrateCallbacks(callbacks, args);
                    return cloned;
                }
            };
        }
        makeTarget.keepsTextNodes = keepsTextNodes;
        makeTarget.cloneNode = cloneNode;
        namespace.view = namespace.view || {};
        module.exports = namespace.view.target = makeTarget;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-simple-map@4.2.0#can-simple-map*/
define('can-simple-map@4.2.0#can-simple-map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-event-queue/map/map',
    'can-queues',
    'can-observation-recorder',
    'can-reflect',
    'can-log/dev/dev',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var eventQueue = require('can-event-queue/map/map');
    var queues = require('can-queues');
    var ObservationRecorder = require('can-observation-recorder');
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var ensureMeta = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
    var SimpleMap = Construct.extend('SimpleMap', {
        setup: function (initialData) {
            this._data = {};
            if (initialData && typeof initialData === 'object') {
                this.attr(initialData);
            }
        },
        attr: function (prop, value) {
            var self = this;
            if (arguments.length === 0) {
                ObservationRecorder.add(this, 'can.keys');
                var data = {};
                canReflect.eachKey(this._data, function (value, prop) {
                    ObservationRecorder.add(this, prop);
                    data[prop] = value;
                }, this);
                return data;
            } else if (arguments.length > 1) {
                var had = this._data.hasOwnProperty(prop);
                var old = this._data[prop];
                this._data[prop] = value;
                if (old !== value) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (typeof this._log === 'function') {
                            this._log(prop, value, old);
                        }
                    }
                    var dispatched = {
                        keyChanged: !had ? prop : undefined,
                        type: prop
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched = {
                            keyChanged: !had ? prop : undefined,
                            type: prop,
                            reasonLog: [
                                canReflect.getName(this) + '\'s',
                                prop,
                                'changed to',
                                value,
                                'from',
                                old
                            ]
                        };
                    }
                    this.dispatch(dispatched, [
                        value,
                        old
                    ]);
                }
            } else if (typeof prop === 'object') {
                queues.batch.start();
                canReflect.eachKey(prop, function (value, key) {
                    self.attr(key, value);
                });
                queues.batch.stop();
            } else {
                if (prop !== 'constructor') {
                    ObservationRecorder.add(this, prop);
                    return this._data[prop];
                }
                return this.constructor;
            }
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        get: function () {
            return this.attr.apply(this, arguments);
        },
        set: function () {
            return this.attr.apply(this, arguments);
        },
        log: function (key) {
            if (process.env.NODE_ENV !== 'production') {
                var quoteString = function quoteString(x) {
                    return typeof x === 'string' ? JSON.stringify(x) : x;
                };
            }
            var meta = ensureMeta(this);
            meta.allowedLogKeysSet = meta.allowedLogKeysSet || new Set();
            if (key) {
                meta.allowedLogKeysSet.add(key);
            }
            this._log = function (prop, current, previous, log) {
                if (key && !meta.allowedLogKeysSet.has(prop)) {
                    return;
                }
                dev.log(canReflect.getName(this), '\n key ', quoteString(prop), '\n is  ', quoteString(current), '\n was ', quoteString(previous));
            };
        }
    });
    eventQueue(SimpleMap.prototype);
    var simpleMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': SimpleMap.prototype.get,
        'can.setKeyValue': SimpleMap.prototype.set,
        'can.deleteKeyValue': function (prop) {
            var dispatched;
            if (this._data.hasOwnProperty(prop)) {
                var old = this._data[prop];
                delete this._data[prop];
                if (process.env.NODE_ENV !== 'production') {
                    if (typeof this._log === 'function') {
                        this._log(prop, undefined, old);
                    }
                }
                dispatched = {
                    keyChanged: prop,
                    type: prop
                };
                if (process.env.NODE_ENV !== 'production') {
                    dispatched = {
                        keyChanged: prop,
                        type: prop,
                        reasonLog: [
                            canReflect.getName(this) + '\'s',
                            prop,
                            'deleted',
                            old
                        ]
                    };
                }
                this.dispatch(dispatched, [
                    undefined,
                    old
                ]);
            }
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            return Object.keys(this._data);
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignMap(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            canReflect.updateMap(this, source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return false;
        },
        'can.getKeyDependencies': function (key) {
            return undefined;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        simpleMapProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{}';
        };
    }
    canReflect.assignSymbols(SimpleMap.prototype, simpleMapProto);
    module.exports = SimpleMap;
});
/*can-view-scope@4.7.0#template-context*/
define('can-view-scope@4.7.0#template-context', [
    'require',
    'exports',
    'module',
    'can-simple-map'
], function (require, exports, module) {
    'use strict';
    var SimpleMap = require('can-simple-map');
    var TemplateContext = function (options) {
        options = options || {};
        this.vars = new SimpleMap(options.vars || {});
        this.helpers = new SimpleMap(options.helpers || {});
        this.partials = new SimpleMap(options.partials || {});
        this.tags = new SimpleMap(options.tags || {});
    };
    module.exports = TemplateContext;
});
/*can-cid@1.3.0#can-cid*/
define('can-cid@1.3.0#can-cid', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var _cid = 0;
    var domExpando = 'can' + new Date();
    var cid = function (object, name) {
        var propertyName = object.nodeName ? domExpando : '_cid';
        if (!object[propertyName]) {
            _cid++;
            object[propertyName] = (name || '') + _cid;
        }
        return object[propertyName];
    };
    cid.domExpando = domExpando;
    cid.get = function (object) {
        var type = typeof object;
        var isObject = type !== null && (type === 'object' || type === 'function');
        return isObject ? cid(object) : type + ':' + object;
    };
    if (namespace.cid) {
        throw new Error('You can\'t have two versions of can-cid, check your dependencies');
    } else {
        module.exports = namespace.cid = cid;
    }
});
/*can-single-reference@1.2.0#can-single-reference*/
define('can-single-reference@1.2.0#can-single-reference', [
    'require',
    'exports',
    'module',
    'can-cid'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var CID = require('can-cid');
        var singleReference;
        function getKeyName(key, extraKey) {
            var keyName = extraKey ? CID(key) + ':' + extraKey : CID(key);
            return keyName || key;
        }
        singleReference = {
            set: function (obj, key, value, extraKey) {
                obj[getKeyName(key, extraKey)] = value;
            },
            getAndDelete: function (obj, key, extraKey) {
                var keyName = getKeyName(key, extraKey);
                var value = obj[keyName];
                delete obj[keyName];
                return value;
            }
        };
        module.exports = singleReference;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-scope@4.7.0#make-compute-like*/
define('can-view-scope@4.7.0#make-compute-like', [
    'require',
    'exports',
    'module',
    'can-single-reference',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var singleReference = require('can-single-reference');
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(compute, 'name', { value: 'Compute<' + canReflect.getName(observable) + '>' });
        }
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = function (newVal, oldVal) {
                handler.call(compute, { type: 'change' }, newVal, oldVal);
            };
            singleReference.set(handler, this, translationHandler);
            observable.on(translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            observable.off(singleReference.getAndDelete(handler, this));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-stache-helpers@1.2.0#can-stache-helpers*/
define('can-stache-helpers@1.2.0#can-stache-helpers', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    if (namespace.stacheHelpers) {
        throw new Error('You can\'t have two versions of can-stache-helpers, check your dependencies');
    } else {
        module.exports = namespace.stacheHelpers = {};
    }
});
/*can-view-scope@4.7.0#scope-key-data*/
define('can-view-scope@4.7.0#scope-key-data', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-stache-key',
    'can-assign',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    './make-compute-like',
    'can-reflect-dependencies',
    'can-event-queue/value/value',
    'can-stache-helpers'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var observeReader = require('can-stache-key');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var makeComputeLike = require('./make-compute-like');
    var canReflectDeps = require('can-reflect-dependencies');
    var valueEventBindings = require('can-event-queue/value/value');
    var stacheHelpers = require('can-stache-helpers');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    var peekValue = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var getFastPathRoot = ObservationRecorder.ignore(function (computeData) {
        if (computeData.reads && computeData.reads.length === 1) {
            var root = computeData.root;
            if (root && root[canSymbol.for('can.getValue')]) {
                root = canReflect.getValue(root);
            }
            return root && canReflect.isObservableLike(root) && canReflect.isMapLike(root) && typeof root[computeData.reads[0].key] !== 'function' && root;
        }
        return;
    });
    var isEventObject = function (obj) {
        return obj && typeof obj.batchNum === 'number' && typeof obj.type === 'string';
    };
    var ScopeKeyData = function (scope, key, options) {
        this.startingScope = scope;
        this.key = key;
        this.read = this.read.bind(this);
        this.dispatch = this.dispatch.bind(this);
        if (key === 'debugger') {
            this.startingScope = { _context: stacheHelpers };
            this.read = function () {
                var helperOptions = { scope: scope };
                var debuggerHelper = stacheHelpers['debugger'];
                return debuggerHelper(helperOptions);
            };
        }
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.read, 'name', { value: canReflect.getName(this) + '.read' });
            Object.defineProperty(this.dispatch, 'name', { value: canReflect.getName(this) + '.dispatch' });
        }
        var observation = this.observation = new Observation(this.read, this);
        this.options = assign({ observation: this.observation }, options);
        this.fastPath = undefined;
        this.root = undefined;
        this.initialValue = undefined;
        this.reads = undefined;
        this.setRoot = undefined;
        this.thisArg = undefined;
        this.parentHasKey = undefined;
        var valueDependencies = new Set();
        valueDependencies.add(observation);
        this.dependencies = { valueDependencies: valueDependencies };
    };
    valueEventBindings(ScopeKeyData.prototype);
    function fastOnBoundSet_Value() {
        this._value = this.newVal;
    }
    function fastOnBoundSetValue() {
        this.value = this.newVal;
    }
    Object.assign(ScopeKeyData.prototype, {
        constructor: ScopeKeyData,
        dispatch: function dispatch(newVal) {
            var old = this.value;
            this.value = newVal;
            this[dispatchSymbol].call(this, this.value, old);
        },
        onBound: function onBound() {
            this.bound = true;
            canReflect.onValue(this.observation, this.dispatch, 'notify');
            var fastPathRoot = getFastPathRoot(this);
            if (fastPathRoot) {
                this.toFastPath(fastPathRoot);
            }
            this.value = peekValue(this.observation);
        },
        onUnbound: function onUnbound() {
            this.bound = false;
            canReflect.offValue(this.observation, this.dispatch, 'notify');
            this.toSlowPath();
        },
        set: function (newVal) {
            var root = this.root || this.setRoot;
            if (root) {
                observeReader.write(root, this.reads, newVal, this.options);
            } else {
                this.startingScope.set(this.key, newVal, this.options);
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    Observation.temporarilyBind(this);
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                return this.observation.get();
            }
        },
        toFastPath: function (fastPathRoot) {
            var self = this, observation = this.observation;
            this.fastPath = true;
            observation.dependencyChange = function (target, newVal) {
                if (isEventObject(newVal)) {
                    throw 'no event objects!';
                }
                if (target === fastPathRoot && typeof newVal !== 'function') {
                    this.newVal = newVal;
                } else {
                    self.toSlowPath();
                }
                return Observation.prototype.dependencyChange.apply(this, arguments);
            };
            if (observation.hasOwnProperty('_value')) {
                observation.onBound = fastOnBoundSet_Value;
            } else {
                observation.onBound = fastOnBoundSetValue;
            }
        },
        toSlowPath: function () {
            this.observation.dependencyChange = Observation.prototype.dependencyChange;
            this.observation.onBound = Observation.prototype.onBound;
            this.fastPath = false;
        },
        read: function () {
            var data;
            if (this.root) {
                data = observeReader.read(this.root, this.reads, this.options);
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.deleteMutatedBy(this.thisArg || this.root, this.reads[this.reads.length - 1].key, this);
                }
                this.thisArg = data.parent;
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.addMutatedBy(this.thisArg || this.root, this.reads[this.reads.length - 1].key, { valueDependencies: new Set([this]) });
                }
                return data.value;
            }
            data = this.startingScope.read(this.key, this.options);
            if (process.env.NODE_ENV !== 'production') {
                if (data.rootObserve) {
                    canReflectDeps.addMutatedBy(data.thisArg || data.rootObserve, data.reads[data.reads.length - 1].key, { valueDependencies: new Set([this]) });
                }
            }
            this.scope = data.scope;
            this.reads = data.reads;
            this.root = data.rootObserve;
            this.setRoot = data.setRoot;
            this.thisArg = data.thisArg;
            this.parentHasKey = data.parentHasKey;
            return this.initialValue = data.value;
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        }
    });
    var scopeKeyDataPrototype = {
        'can.getValue': ScopeKeyData.prototype.get,
        'can.setValue': ScopeKeyData.prototype.set,
        'can.valueHasDependencies': ScopeKeyData.prototype.hasDependencies,
        'can.getValueDependencies': function () {
            return this.dependencies;
        },
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        scopeKeyDataPrototype['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '{{' + this.key + '}}';
        };
    }
    canReflect.assignSymbols(ScopeKeyData.prototype, scopeKeyDataPrototype);
    Object.defineProperty(ScopeKeyData.prototype, 'compute', {
        get: function () {
            var compute = makeComputeLike(this);
            Object.defineProperty(this, 'compute', {
                value: compute,
                writable: false,
                configurable: false
            });
            return compute;
        },
        configurable: true
    });
    module.exports = ScopeKeyData;
});
/*can-view-scope@4.7.0#compute_data*/
define('can-view-scope@4.7.0#compute_data', [
    'require',
    'exports',
    'module',
    './scope-key-data'
], function (require, exports, module) {
    'use strict';
    var ScopeKeyData = require('./scope-key-data');
    module.exports = function (scope, key, options) {
        return new ScopeKeyData(scope, key, options || { args: [] });
    };
});
/*can-view-scope@4.7.0#can-view-scope*/
define('can-view-scope@4.7.0#can-view-scope', [
    'require',
    'exports',
    'module',
    'can-stache-key',
    'can-observation-recorder',
    './template-context',
    './compute_data',
    'can-assign',
    'can-namespace',
    'can-reflect',
    'can-log/dev/dev',
    'can-define-lazy-value',
    'can-stache-helpers'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var observeReader = require('can-stache-key');
        var ObservationRecorder = require('can-observation-recorder');
        var TemplateContext = require('./template-context');
        var makeComputeData = require('./compute_data');
        var assign = require('can-assign');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var canLog = require('can-log/dev/dev');
        var defineLazyValue = require('can-define-lazy-value');
        var stacheHelpers = require('can-stache-helpers');
        function Scope(context, parent, meta) {
            this._context = context;
            this._parent = parent;
            this._meta = meta || {};
            this.__cache = {};
        }
        assign(Scope, {
            read: observeReader.read,
            TemplateContext: TemplateContext,
            keyInfo: function (attr) {
                var info = {};
                info.isDotSlash = attr.substr(0, 2) === './';
                info.isThisDot = attr.substr(0, 5) === 'this.';
                info.isThisAt = attr.substr(0, 5) === 'this@';
                info.isInCurrentContext = info.isDotSlash || info.isThisDot || info.isThisAt;
                info.isInParentContext = attr.substr(0, 3) === '../';
                info.isCurrentContext = attr === '.' || attr === 'this';
                info.isParentContext = attr === '..';
                info.isScope = attr === 'scope';
                info.isInScope = attr.substr(0, 6) === 'scope.' || attr.substr(0, 6) === 'scope@';
                info.isContextBased = info.isInCurrentContext || info.isInParentContext || info.isCurrentContext || info.isParentContext;
                return info;
            }
        });
        assign(Scope.prototype, {
            add: function (context, meta) {
                if (context !== this._context) {
                    return new this.constructor(context, this, meta);
                } else {
                    return this;
                }
            },
            find: function (attr, options) {
                return this.get(attr, assign({ currentScopeOnly: false }, options));
            },
            read: function (attr, options) {
                options = options || {};
                if (attr === './') {
                    attr = '.';
                }
                var keyInfo = Scope.keyInfo(attr);
                if (keyInfo.isContextBased && (this._meta.notContext || this._meta.special)) {
                    return this._parent.read(attr, options);
                }
                if (this._context instanceof TemplateContext) {
                    if (this._parent) {
                        return this._parent.read(attr, options);
                    } else {
                        return {};
                    }
                }
                var currentScopeOnly = 'currentScopeOnly' in options ? options.currentScopeOnly : true;
                if (keyInfo.isInCurrentContext) {
                    currentScopeOnly = true;
                    attr = keyInfo.isDotSlash ? attr.substr(2) : attr.substr(5);
                } else if ((keyInfo.isInParentContext || keyInfo.isParentContext) && this._parent) {
                    var parent = this._parent;
                    while (parent.isSpecial()) {
                        parent = parent._parent;
                    }
                    if (keyInfo.isParentContext) {
                        return observeReader.read(parent._context, [], options);
                    }
                    var parentValue = parent.read(attr.substr(3) || '.', options);
                    return assign(parentValue, { thisArg: parentValue.thisArg || parent._context });
                } else if (keyInfo.isCurrentContext) {
                    return observeReader.read(this._context, [], options);
                } else if (keyInfo.isScope) {
                    return { value: this };
                }
                var keyReads = observeReader.reads(attr);
                var readValue;
                if (keyInfo.isInScope) {
                    readValue = observeReader.read(this, keyReads.slice(1), options);
                    if (typeof readValue.value === 'undefined' && !readValue.parentHasKey) {
                        readValue = this.readFromTemplateContext(attr.slice(6), options);
                    }
                    return assign(readValue, { thisArg: keyReads.length > 1 ? readValue.parent : undefined });
                }
                return this._read(keyReads, options, currentScopeOnly);
            },
            readFromSpecialContext: function (key) {
                return this._read([{
                        key: key,
                        at: false
                    }], { special: true });
            },
            readFromTemplateContext: function (key, readOptions) {
                var keyReads = observeReader.reads(key);
                return observeReader.read(this.templateContext, keyReads, readOptions);
            },
            _read: function (keyReads, options, currentScopeOnly) {
                var currentScope = this, currentContext, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve, readOptions = assign({
                        foundObservable: function (observe, nameIndex) {
                            currentObserve = observe;
                            currentReads = keyReads.slice(nameIndex);
                        },
                        earlyExit: function (parentValue, nameIndex) {
                            if (nameIndex > setObserveDepth || nameIndex === setObserveDepth && (typeof parentValue === 'object' && keyReads[nameIndex].key in parentValue)) {
                                currentSetObserve = currentObserve;
                                currentSetReads = currentReads;
                                setObserveDepth = nameIndex;
                            }
                        }
                    }, options);
                var isRecording = ObservationRecorder.isRecording(), readSpecial = options && options.special === true;
                while (currentScope) {
                    currentContext = currentScope._context;
                    if (!readSpecial && currentScope._meta.special) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (readSpecial && !currentScope._meta.special) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (currentScope._context instanceof TemplateContext) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (currentContext !== null && (typeof currentContext === 'object' || typeof currentContext === 'function')) {
                        var getObserves = ObservationRecorder.trap();
                        var data = observeReader.read(currentContext, keyReads, readOptions);
                        var observes = getObserves();
                        if (data.value !== undefined || data.parentHasKey) {
                            if (!observes.length && isRecording) {
                                currentObserve = data.parent;
                                currentReads = keyReads.slice(keyReads.length - 1);
                            } else {
                                ObservationRecorder.addMany(observes);
                            }
                            return {
                                scope: currentScope,
                                rootObserve: currentObserve,
                                value: data.value,
                                reads: currentReads,
                                thisArg: keyReads.length > 1 ? data.parent : undefined,
                                parentHasKey: data.parentHasKey
                            };
                        } else {
                            undefinedObserves.push.apply(undefinedObserves, observes);
                        }
                    }
                    var parentIsNormalContext = currentScope._parent && !currentScope._parent.isSpecial();
                    if (currentScopeOnly && parentIsNormalContext) {
                        currentScope = null;
                    } else {
                        currentScope = currentScope._parent;
                    }
                }
                if (!(options && options.special)) {
                    var helper = this.getHelper(keyReads);
                    if (helper && helper.value) {
                        return helper;
                    }
                }
                ObservationRecorder.addMany(undefinedObserves);
                return {
                    setRoot: currentSetObserve,
                    reads: currentSetReads,
                    value: undefined
                };
            },
            getHelper: function (keyReads) {
                var scope = this, context, helper;
                while (scope) {
                    context = scope._context;
                    if (context instanceof TemplateContext) {
                        helper = observeReader.read(context.helpers, keyReads, { proxyMethods: false });
                        if (helper.value !== undefined) {
                            return helper;
                        }
                    }
                    scope = scope._parent;
                }
                return observeReader.read(stacheHelpers, keyReads, { proxyMethods: false });
            },
            get: function (key, options) {
                options = assign({ isArgument: true }, options);
                var res = this.read(key, options);
                return res.value;
            },
            peek: ObservationRecorder.ignore(function (key, options) {
                return this.get(key, options);
            }),
            peak: ObservationRecorder.ignore(function (key, options) {
                if (process.env.NODE_ENV !== 'production') {
                    canLog.warn('peak is deprecated, please use peek instead');
                }
                return this.peek(key, options);
            }),
            getScope: function (tester) {
                var scope = this;
                while (scope) {
                    if (tester(scope)) {
                        return scope;
                    }
                    scope = scope._parent;
                }
            },
            getContext: function (tester) {
                var res = this.getScope(tester);
                return res && res._context;
            },
            getTemplateContext: function () {
                var lastScope;
                var templateContext = this.getScope(function (scope) {
                    lastScope = scope;
                    return scope._context instanceof TemplateContext;
                });
                if (!templateContext) {
                    templateContext = new Scope(new TemplateContext());
                    lastScope._parent = templateContext;
                }
                return templateContext;
            },
            addTemplateContext: function () {
                return this.add(new TemplateContext());
            },
            getRoot: function () {
                var cur = this, child = this;
                while (cur._parent) {
                    child = cur;
                    cur = cur._parent;
                }
                if (cur._context instanceof TemplateContext) {
                    cur = child;
                }
                return cur._context;
            },
            getViewModel: function () {
                var vmScope = this.getScope(function (scope) {
                    return scope._meta.viewModel;
                });
                return vmScope && vmScope._context;
            },
            getTop: function () {
                var top;
                this.getScope(function (scope) {
                    if (scope._meta.viewModel) {
                        top = scope;
                    }
                    return false;
                });
                return top && top._context;
            },
            getPathsForKey: function getPathsForKey(key) {
                if (process.env.NODE_ENV !== 'production') {
                    var paths = {};
                    var getKeyDefinition = function (obj, key) {
                        if (!obj || typeof obj !== 'object') {
                            return {};
                        }
                        var keyExistsOnObj = key in obj;
                        var objHasKey = canReflect.hasKey(obj, key);
                        return {
                            isDefined: keyExistsOnObj || objHasKey,
                            isFunction: keyExistsOnObj && typeof obj[key] === 'function'
                        };
                    };
                    var reads = observeReader.reads(key);
                    var keyParts = reads.map(function (read) {
                        return read.key;
                    });
                    var scopeIndex = keyParts.indexOf('scope');
                    if (scopeIndex > -1) {
                        keyParts.splice(scopeIndex, 2);
                    }
                    var normalizedKey = keyParts.join('.');
                    var vm = this.getViewModel();
                    var vmKeyDefinition = getKeyDefinition(vm, normalizedKey);
                    if (vmKeyDefinition.isDefined) {
                        paths['scope.vm.' + normalizedKey + (vmKeyDefinition.isFunction ? '()' : '')] = vm;
                    }
                    var top = this.getTop();
                    var topKeyDefinition = getKeyDefinition(top, normalizedKey);
                    if (topKeyDefinition.isDefined) {
                        paths['scope.top.' + normalizedKey + (topKeyDefinition.isFunction ? '()' : '')] = top;
                    }
                    var cur = '';
                    this.getScope(function (scope) {
                        var canBeRead = !scope.isSpecial();
                        if (canBeRead) {
                            var contextKeyDefinition = getKeyDefinition(scope._context, normalizedKey);
                            if (contextKeyDefinition.isDefined) {
                                paths[cur + normalizedKey + (contextKeyDefinition.isFunction ? '()' : '')] = scope._context;
                            }
                            cur += '../';
                        }
                        return false;
                    });
                    return paths;
                }
            },
            hasKey: function hasKey(key) {
                var reads = observeReader.reads(key);
                var readValue;
                if (reads[0].key === 'scope') {
                    readValue = observeReader.read(this, reads.slice(1), key);
                } else {
                    readValue = observeReader.read(this._context, reads, key);
                }
                return readValue.foundLastParent && readValue.parentHasKey;
            },
            getDataForScopeSet: function getDataForScopeSet(key, options) {
                var keyInfo = Scope.keyInfo(key), parent;
                if (keyInfo.isCurrentContext) {
                    return {
                        parent: this._context,
                        how: 'setValue'
                    };
                } else if (keyInfo.isInParentContext || keyInfo.isParentContext) {
                    parent = this._parent;
                    while (parent._meta.notContext) {
                        parent = parent._parent;
                    }
                    if (keyInfo.isParentContext) {
                        return {
                            parent: parent._context,
                            how: 'setValue'
                        };
                    }
                    return {
                        how: 'set',
                        parent: parent,
                        passOptions: true,
                        key: key.substr(3) || '.'
                    };
                }
                var dotIndex = key.lastIndexOf('.'), slashIndex = key.lastIndexOf('/'), contextPath, propName;
                if (slashIndex > dotIndex) {
                    contextPath = key.substring(0, slashIndex);
                    propName = key.substring(slashIndex + 1, key.length);
                } else {
                    if (dotIndex !== -1) {
                        contextPath = key.substring(0, dotIndex);
                        propName = key.substring(dotIndex + 1, key.length);
                    } else {
                        contextPath = '.';
                        propName = key;
                    }
                }
                var context = this.read(contextPath, options).value;
                if (context === undefined) {
                    return { error: 'Attempting to set a value at ' + key + ' where ' + contextPath + ' is undefined.' };
                }
                if (!canReflect.isObservableLike(context) && canReflect.isObservableLike(context[propName])) {
                    if (canReflect.isMapLike(context[propName])) {
                        return {
                            parent: context,
                            key: propName,
                            how: 'updateDeep',
                            warn: 'can-view-scope: Merging data into "' + propName + '" because its parent is non-observable'
                        };
                    } else if (canReflect.isValueLike(context[propName])) {
                        return {
                            parent: context,
                            key: propName,
                            how: 'setValue'
                        };
                    } else {
                        return {
                            parent: context,
                            how: 'write',
                            key: propName,
                            passOptions: true
                        };
                    }
                } else {
                    return {
                        parent: context,
                        how: 'write',
                        key: propName,
                        passOptions: true
                    };
                }
            },
            set: function (key, value, options) {
                options = options || {};
                var data = this.getDataForScopeSet(key, options);
                var parent = data.parent;
                if (process.env.NODE_ENV !== 'production') {
                    if (data.error) {
                        return canLog.error(data.error);
                    }
                }
                if (data.warn) {
                    canLog.warn(data.warn);
                }
                switch (data.how) {
                case 'set':
                    parent.set(data.key, value, data.passOptions ? options : undefined);
                    break;
                case 'write':
                    observeReader.write(parent, data.key, value, options);
                    break;
                case 'setValue':
                    canReflect.setValue('key' in data ? parent[data.key] : parent, value);
                    break;
                case 'setKeyValue':
                    canReflect.setKeyValue(parent, data.key, value);
                    break;
                case 'updateDeep':
                    canReflect.updateDeep(parent[data.key], value);
                    break;
                }
            },
            attr: ObservationRecorder.ignore(function (key, value, options) {
                canLog.warn('can-view-scope::attr is deprecated, please use peek, get or set');
                options = assign({ isArgument: true }, options);
                if (arguments.length === 2) {
                    return this.set(key, value, options);
                } else {
                    return this.get(key, options);
                }
            }),
            computeData: function (key, options) {
                return makeComputeData(this, key, options);
            },
            compute: function (key, options) {
                return this.computeData(key, options).compute;
            },
            cloneFromRef: function () {
                var contexts = [];
                var scope = this, context, parent;
                while (scope) {
                    context = scope._context;
                    if (context instanceof TemplateContext) {
                        parent = scope._parent;
                        break;
                    }
                    contexts.unshift(context);
                    scope = scope._parent;
                }
                if (parent) {
                    contexts.forEach(function (context) {
                        parent = parent.add(context);
                    });
                    return parent;
                } else {
                    return this;
                }
            },
            isSpecial: function () {
                return this._meta.notContext || this._meta.special || this._context instanceof TemplateContext;
            }
        });
        canReflect.assignSymbols(Scope.prototype, { 'can.hasKey': Scope.prototype.hasKey });
        var templateContextPrimitives = [
            'filename',
            'lineNumber'
        ];
        templateContextPrimitives.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromTemplateContext(key).value;
                },
                set: function (val) {
                    this.templateContext[key] = val;
                }
            });
        });
        defineLazyValue(Scope.prototype, 'templateContext', function () {
            return this.getTemplateContext()._context;
        });
        defineLazyValue(Scope.prototype, 'root', function () {
            canLog.warn('`scope.root` is deprecated. Use either `scope.top` or `scope.vm` instead.');
            return this.getRoot();
        });
        defineLazyValue(Scope.prototype, 'vm', function () {
            return this.getViewModel();
        });
        defineLazyValue(Scope.prototype, 'top', function () {
            return this.getTop();
        });
        defineLazyValue(Scope.prototype, 'helpers', function () {
            return stacheHelpers;
        });
        var specialKeywords = [
            'index',
            'key',
            'element',
            'event',
            'viewModel',
            'arguments',
            'helperOptions'
        ];
        specialKeywords.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromSpecialContext(key).value;
                }
            });
        });
        if (process.env.NODE_ENV !== 'production') {
            Scope.prototype.log = function () {
                var scope = this;
                var indent = '';
                while (scope) {
                    console.log(indent, canReflect.getName(scope._context), scope._context);
                    scope = scope._parent;
                    indent += ' ';
                }
            };
        }
        namespace.view = namespace.view || {};
        module.exports = namespace.view.Scope = Scope;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.10.0#src/key-observable*/
define('can-stache@4.10.0#src/key-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable/settable/settable',
    'can-stache-key'
], function (require, exports, module) {
    'use strict';
    var SettableObservable = require('can-simple-observable/settable/settable');
    var stacheKey = require('can-stache-key');
    function KeyObservable(root, key) {
        key = '' + key;
        this.key = key;
        this.root = root;
        SettableObservable.call(this, function () {
            return stacheKey.get(this, key);
        }, root);
    }
    KeyObservable.prototype = Object.create(SettableObservable.prototype);
    KeyObservable.prototype.set = function (newVal) {
        stacheKey.set(this.root, this.key, newVal);
    };
    module.exports = KeyObservable;
});
/*can-stache@4.10.0#src/utils*/
define('can-stache@4.10.0#src/utils', [
    'require',
    'exports',
    'module',
    'can-view-scope',
    'can-observation-recorder',
    'can-stache-key',
    'can-reflect',
    './key-observable'
], function (require, exports, module) {
    'use strict';
    var Scope = require('can-view-scope');
    var ObservationRecorder = require('can-observation-recorder');
    var observationReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var KeyObservable = require('./key-observable');
    var createNoOpRenderer = function (metadata) {
        return function noop() {
            if (metadata) {
                metadata.rendered = true;
            }
        };
    };
    module.exports = {
        last: function (arr) {
            return arr != null && arr[arr.length - 1];
        },
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else {
                return JSON.parse(str);
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        },
        createRenderers: function (helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, isStringOnly) {
            helperOptions.fn = truthyRenderer ? this.makeRendererConvertScopes(truthyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.inverse = falseyRenderer ? this.makeRendererConvertScopes(falseyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.isSection = !!(truthyRenderer || falseyRenderer);
        },
        makeRendererConvertScopes: function (renderer, parentScope, nodeList, observeObservables, metadata) {
            var convertedRenderer = function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof Scope)) {
                    if (parentScope) {
                        newScope = parentScope.add(newScope);
                    } else {
                        newScope = new Scope(newScope || {});
                    }
                }
                if (metadata) {
                    metadata.rendered = true;
                }
                var result = renderer(newScope || parentScope, parentNodeList || nodeList);
                return result;
            };
            return observeObservables ? convertedRenderer : ObservationRecorder.ignore(convertedRenderer);
        },
        getItemsStringContent: function (items, isObserveList, helperOptions) {
            var txt = '', len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items);
            for (var i = 0; i < len; i++) {
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                txt += helperOptions.fn(item);
            }
            return txt;
        },
        getItemsFragContent: function (items, helperOptions, scope) {
            var result = [], len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items), hashExprs = helperOptions.exprData && helperOptions.exprData.hashExprs, hashOptions;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            for (var i = 0; i < len; i++) {
                var aliases = {};
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                if (canReflect.size(hashOptions) > 0) {
                    if (hashOptions.value) {
                        aliases[hashOptions.value] = item;
                    }
                    if (hashOptions.index) {
                        aliases[hashOptions.index] = i;
                    }
                }
                result.push(helperOptions.fn(scope.add(aliases, { notContext: true }).add({ index: i }, { special: true }).add(item)));
            }
            return result;
        }
    };
});
/*can-stache@4.10.0#src/html_section*/
define('can-stache@4.10.0#src/html_section', [
    'require',
    'exports',
    'module',
    'can-view-target',
    'can-view-scope',
    'can-observation-recorder',
    './utils',
    'can-globals/document/document',
    'can-assign'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var target = require('can-view-target');
        var Scope = require('can-view-scope');
        var ObservationRecorder = require('can-observation-recorder');
        var utils = require('./utils');
        var getDocument = require('can-globals/document/document');
        var assign = require('can-assign');
        var last = utils.last;
        var decodeHTML = typeof document !== 'undefined' && function () {
            var el = getDocument().createElement('div');
            return function (html) {
                if (html.indexOf('&') === -1) {
                    return html.replace(/\r\n/g, '\n');
                }
                el.innerHTML = html;
                return el.childNodes.length === 0 ? '' : el.childNodes.item(0).nodeValue;
            };
        }();
        var HTMLSectionBuilder = function (filename) {
            if (filename) {
                this.filename = filename;
            }
            this.stack = [new HTMLSection()];
        };
        assign(HTMLSectionBuilder.prototype, utils.mixins);
        assign(HTMLSectionBuilder.prototype, {
            startSubSection: function (process) {
                var newSection = new HTMLSection(process);
                this.stack.push(newSection);
                return newSection;
            },
            endSubSectionAndReturnRenderer: function () {
                if (this.last().isEmpty()) {
                    this.stack.pop();
                    return null;
                } else {
                    var htmlSection = this.endSection();
                    return htmlSection.compiled.hydrate.bind(htmlSection.compiled);
                }
            },
            startSection: function (process) {
                var newSection = new HTMLSection(process);
                this.last().add(newSection.targetCallback);
                this.stack.push(newSection);
            },
            endSection: function () {
                this.last().compile();
                return this.stack.pop();
            },
            inverse: function () {
                this.last().inverse();
            },
            compile: function () {
                var compiled = this.stack.pop().compile();
                return ObservationRecorder.ignore(function (scope, nodeList) {
                    if (!(scope instanceof Scope)) {
                        scope = new Scope(scope || {});
                    }
                    return compiled.hydrate(scope, nodeList);
                });
            },
            push: function (chars) {
                this.last().push(chars);
            },
            pop: function () {
                return this.last().pop();
            },
            removeCurrentNode: function () {
                this.last().removeCurrentNode();
            }
        });
        var HTMLSection = function (process) {
            this.data = 'targetData';
            this.targetData = [];
            this.targetStack = [];
            var self = this;
            this.targetCallback = function (scope, sectionNode) {
                process.call(this, scope, sectionNode, self.compiled.hydrate.bind(self.compiled), self.inverseCompiled && self.inverseCompiled.hydrate.bind(self.inverseCompiled));
            };
        };
        assign(HTMLSection.prototype, {
            inverse: function () {
                this.inverseData = [];
                this.data = 'inverseData';
            },
            push: function (data) {
                this.add(data);
                this.targetStack.push(data);
            },
            pop: function () {
                return this.targetStack.pop();
            },
            add: function (data) {
                if (typeof data === 'string') {
                    data = decodeHTML(data);
                }
                if (this.targetStack.length) {
                    last(this.targetStack).children.push(data);
                } else {
                    this[this.data].push(data);
                }
            },
            compile: function () {
                this.compiled = target(this.targetData, getDocument());
                if (this.inverseData) {
                    this.inverseCompiled = target(this.inverseData, getDocument());
                    delete this.inverseData;
                }
                this.targetStack = this.targetData = null;
                return this.compiled;
            },
            removeCurrentNode: function () {
                var children = this.children();
                return children.pop();
            },
            children: function () {
                if (this.targetStack.length) {
                    return last(this.targetStack).children;
                } else {
                    return this[this.data];
                }
            },
            isEmpty: function () {
                return !this.targetData.length;
            }
        });
        HTMLSectionBuilder.HTMLSection = HTMLSection;
        module.exports = HTMLSectionBuilder;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.0#lib/core*/
define('can-view-live@4.2.0#lib/core', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-dom-mutate',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var parser = require('can-view-parser');
    var domMutate = require('can-dom-mutate');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    var live = {
        setup: function (el, bind, unbind) {
            var tornDown = false, removalDisposal, data, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        if (removalDisposal) {
                            removalDisposal();
                            removalDisposal = undefined;
                        }
                    }
                    return true;
                };
            data = {
                teardownCheck: function (parent) {
                    return parent ? false : teardown();
                }
            };
            removalDisposal = domMutate.onNodeRemoval(el, function () {
                if (!el.ownerDocument.contains(el)) {
                    teardown();
                }
            });
            bind(data);
            return data;
        },
        listen: function (el, compute, change, queueName) {
            return live.setup(el, function bind() {
                canReflect.onValue(compute, change, queueName || 'notify');
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.addMutatedBy(el, compute);
                }
            }, function unbind(data) {
                canReflect.offValue(compute, change, queueName || 'notify');
                if (process.env.NODE_ENV !== 'production') {
                    canReflectDeps.deleteMutatedBy(el, compute);
                }
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        },
        getAttributeParts: function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        },
        isNode: function (obj) {
            return obj && obj.nodeType;
        },
        addTextNodeIfNoChildren: function (frag) {
            if (!frag.firstChild) {
                frag.appendChild(frag.ownerDocument.createTextNode(''));
            }
        },
        replace: function (nodes, val, teardown) {
            var oldNodes = nodes.slice(0), frag = makeFrag(val);
            nodeLists.register(nodes, teardown);
            nodeLists.update(nodes, childNodes(frag));
            nodeLists.replace(oldNodes, frag);
            return nodes;
        },
        getParentNode: function (el, defaultParentNode) {
            return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
        },
        makeString: function (txt) {
            return txt == null ? '' : '' + txt;
        }
    };
    module.exports = live;
});
/*can-dom-data-state@1.0.1#can-dom-data-state*/
define('can-dom-data-state@1.0.1#can-dom-data-state', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-dom-mutate',
    'can-cid'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutate = require('can-dom-mutate');
    var CID = require('can-cid');
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var data = {};
    var removedDisposalMap = {};
    var deleteNode = function () {
        var id = CID.get(this);
        var nodeDeleted = false;
        if (id && data[id]) {
            nodeDeleted = true;
            delete data[id];
        }
        if (removedDisposalMap[id]) {
            removedDisposalMap[id]();
            delete removedDisposalMap[id];
        }
        return nodeDeleted;
    };
    var setData = function (name, value) {
        var id = CID(this);
        var store = data[id] || (data[id] = {});
        if (name !== undefined) {
            store[name] = value;
            var isNode = !!(this && typeof this.nodeType === 'number');
            if (isNode && !removedDisposalMap[id]) {
                var target = this;
                removedDisposalMap[id] = domMutate.onNodeRemoval(target, function () {
                    if (!target.ownerDocument.contains(target)) {
                        setTimeout(function () {
                            deleteNode(target);
                        }, 13);
                    }
                });
            }
        }
        return store;
    };
    var domDataState = {
        _data: data,
        _removalDisposalMap: removedDisposalMap,
        getCid: function () {
            return CID.get(this);
        },
        cid: function () {
            return CID(this);
        },
        expando: CID.domExpando,
        get: function (key) {
            var id = CID.get(this), store = id && data[id];
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (prop) {
            var id = CID.get(this);
            var itemData = data[id];
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode.call(this);
            }
        },
        delete: deleteNode
    };
    if (namespace.domDataState) {
        throw new Error('You can\'t have two versions of can-dom-data-state, check your dependencies');
    } else {
        module.exports = namespace.domDataState = domDataState;
    }
});
/*can-diff@1.4.1#list/list*/
define('can-diff@1.4.1#list/list', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var slice = [].slice;
    function defaultIdentity(a, b) {
        return a === b;
    }
    function makeIdentityFromMapSchema(typeSchema) {
        if (typeSchema.identity && typeSchema.identity.length) {
            return function identityCheck(a, b) {
                var aId = canReflect.getIdentity(a, typeSchema), bId = canReflect.getIdentity(b, typeSchema);
                return aId === bId;
            };
        } else {
            return defaultIdentity;
        }
    }
    function makeIdentityFromListSchema(listSchema) {
        return listSchema.values != null ? makeIdentityFromMapSchema(canReflect.getSchema(listSchema.values)) : defaultIdentity;
    }
    function makeIdentity(oldList, oldListLength) {
        var listSchema = canReflect.getSchema(oldList), typeSchema;
        if (listSchema != null) {
            if (listSchema.values != null) {
                typeSchema = canReflect.getSchema(listSchema.values);
            } else {
                return defaultIdentity;
            }
        }
        if (typeSchema == null && oldListLength > 0) {
            typeSchema = canReflect.getSchema(canReflect.getKeyValue(oldList, 0));
        }
        if (typeSchema) {
            return makeIdentityFromMapSchema(typeSchema);
        } else {
            return defaultIdentity;
        }
    }
    function reverseDiff(oldDiffStopIndex, newDiffStopIndex, oldList, newList, identity) {
        var oldIndex = oldList.length - 1, newIndex = newList.length - 1;
        while (oldIndex > oldDiffStopIndex && newIndex > newDiffStopIndex) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex--;
                newIndex--;
                continue;
            } else {
                return [{
                        type: 'splice',
                        index: newDiffStopIndex,
                        deleteCount: oldIndex - oldDiffStopIndex + 1,
                        insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
                    }];
            }
        }
        return [{
                type: 'splice',
                index: newDiffStopIndex,
                deleteCount: oldIndex - oldDiffStopIndex + 1,
                insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
            }];
    }
    module.exports = function (oldList, newList, schemaOrIdentity) {
        var oldIndex = 0, newIndex = 0, oldLength = canReflect.size(oldList), newLength = canReflect.size(newList), patches = [];
        var schemaType = typeof schemaOrIdentity, identity;
        if (schemaType === 'function') {
            identity = schemaOrIdentity;
        } else if (schemaOrIdentity != null) {
            if (schemaOrIdentity.type === 'map') {
                identity = makeIdentityFromMapSchema(schemaOrIdentity);
            } else {
                identity = makeIdentityFromListSchema(schemaOrIdentity);
            }
        } else {
            identity = makeIdentity(oldList, oldLength);
        }
        while (oldIndex < oldLength && newIndex < newLength) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex++;
                newIndex++;
                continue;
            }
            if (newIndex + 1 < newLength && identity(oldItem, newList[newIndex + 1], oldIndex)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 0,
                    insert: [newList[newIndex]],
                    type: 'splice'
                });
                oldIndex++;
                newIndex += 2;
                continue;
            } else if (oldIndex + 1 < oldLength && identity(oldList[oldIndex + 1], newItem, oldIndex + 1)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                });
                oldIndex += 2;
                newIndex++;
                continue;
            } else {
                patches.push.apply(patches, reverseDiff(oldIndex, newIndex, oldList, newList, identity));
                return patches;
            }
        }
        if (newIndex === newLength && oldIndex === oldLength) {
            return patches;
        }
        patches.push({
            type: 'splice',
            index: newIndex,
            deleteCount: oldLength - oldIndex,
            insert: slice.call(newList, newIndex)
        });
        return patches;
    };
});
/*can-attribute-observable@1.0.0#behaviors*/
define('can-attribute-observable@1.0.0#behaviors', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/global/global',
    'can-dom-data-state',
    'can-dom-events',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-globals/mutation-observer/mutation-observer',
    'can-diff/list/list'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var global = require('can-globals/global/global')();
        var setData = require('can-dom-data-state');
        var domEvents = require('can-dom-events');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var diff = require('can-diff/list/list');
        var formElements = {
                'INPUT': true,
                'TEXTAREA': true,
                'SELECT': true
            }, toString = function (value) {
                if (value == null) {
                    return '';
                } else {
                    return '' + value;
                }
            }, isSVG = function (el) {
                return el.namespaceURI === 'http://www.w3.org/2000/svg';
            }, truthy = function () {
                return true;
            }, getSpecialTest = function (special) {
                return special && special.test || truthy;
            }, propProp = function (prop, obj) {
                obj = obj || {};
                obj.get = function () {
                    return this[prop];
                };
                obj.set = function (value) {
                    if (this[prop] !== value) {
                        this[prop] = value;
                    }
                    return value;
                };
                return obj;
            }, booleanProp = function (prop) {
                return {
                    isBoolean: true,
                    set: function (value) {
                        if (prop in this) {
                            this[prop] = value !== false;
                        } else {
                            domMutateNode.setAttribute.call(this, prop, '');
                        }
                    },
                    remove: function () {
                        this[prop] = false;
                    }
                };
            }, setupMO = function (el, callback) {
                var attrMO = setData.get.call(el, 'attrMO');
                if (!attrMO) {
                    var onMutation = function () {
                        callback.call(el);
                    };
                    var MO = getMutationObserver();
                    if (MO) {
                        var observer = new MO(onMutation);
                        observer.observe(el, {
                            childList: true,
                            subtree: true
                        });
                        setData.set.call(el, 'attrMO', observer);
                    } else {
                        setData.set.call(el, 'attrMO', true);
                        setData.set.call(el, 'canBindingCallback', { onMutation: onMutation });
                    }
                }
            }, _findOptionToSelect = function (parent, value) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION' && value === child.value) {
                        return child;
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        var groupChild = _findOptionToSelect(child, value);
                        if (groupChild) {
                            return groupChild;
                        }
                    }
                    child = child.nextSibling;
                }
            }, setChildOptions = function (el, value) {
                var option;
                if (value != null) {
                    option = _findOptionToSelect(el, value);
                }
                if (option) {
                    option.selected = true;
                } else {
                    el.selectedIndex = -1;
                }
            }, forEachOption = function (parent, fn) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION') {
                        fn(child);
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        forEachOption(child, fn);
                    }
                    child = child.nextSibling;
                }
            }, collectSelectedOptions = function (parent) {
                var selectedValues = [];
                forEachOption(parent, function (option) {
                    if (option.selected) {
                        selectedValues.push(option.value);
                    }
                });
                return selectedValues;
            }, markSelectedOptions = function (parent, values) {
                forEachOption(parent, function (option) {
                    option.selected = values.indexOf(option.value) !== -1;
                });
            }, setChildOptionsOnChange = function (select, aEL) {
                var handler = setData.get.call(select, 'attrSetChildOptions');
                if (handler) {
                    return Function.prototype;
                }
                handler = function () {
                    setChildOptions(select, select.value);
                };
                setData.set.call(select, 'attrSetChildOptions', handler);
                aEL.call(select, 'change', handler);
                return function (rEL) {
                    setData.clean.call(select, 'attrSetChildOptions');
                    rEL.call(select, 'change', handler);
                };
            }, behaviorRules = new Map([]), isPropWritable = function (el, prop) {
                var desc = Object.getOwnPropertyDescriptor(el.constructor.prototype, prop);
                if (desc) {
                    return desc.writable || desc.set;
                } else {
                    var proto = Object.getPrototypeOf(el);
                    if (proto) {
                        return isPropWritable(proto, prop);
                    }
                }
                return false;
            }, cacheRule = function (el, attrOrPropName, rule) {
                var rulesForElementType;
                rulesForElementType = behaviorRules.get(el.prototype);
                if (!rulesForElementType) {
                    rulesForElementType = {};
                    behaviorRules.set(el.constructor, rulesForElementType);
                }
                rulesForElementType[attrOrPropName] = rule;
                return rule;
            };
        var specialAttributes = {
            checked: {
                get: function () {
                    return this.checked;
                },
                set: function (val) {
                    var notFalse = !!val || val === '' || arguments.length === 0;
                    this.checked = notFalse;
                    if (notFalse && this.type === 'radio') {
                        this.defaultChecked = true;
                    }
                    return val;
                },
                remove: function () {
                    this.checked = false;
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'class': {
                get: function () {
                    if (isSVG(this)) {
                        return this.getAttribute('class');
                    }
                    return this.className;
                },
                set: function (val) {
                    val = val || '';
                    if (isSVG(this)) {
                        domMutateNode.setAttribute.call(this, 'class', '' + val);
                    } else {
                        this.className = val;
                    }
                    return val;
                }
            },
            disabled: booleanProp('disabled'),
            focused: {
                get: function () {
                    return this === document.activeElement;
                },
                set: function (val) {
                    var cur = attr.get(this, 'focused');
                    var docEl = this.ownerDocument.documentElement;
                    var element = this;
                    function focusTask() {
                        if (val) {
                            element.focus();
                        } else {
                            element.blur();
                        }
                    }
                    if (cur !== val) {
                        if (!docEl.contains(element)) {
                            var insertionDisposal = domMutate.onNodeInsertion(element, function () {
                                insertionDisposal();
                                focusTask();
                            });
                        } else {
                            focusTask();
                        }
                    }
                    return !!val;
                },
                addEventListener: function (eventName, handler, aEL) {
                    aEL.call(this, 'focus', handler);
                    aEL.call(this, 'blur', handler);
                    return function (rEL) {
                        rEL.call(this, 'focus', handler);
                        rEL.call(this, 'blur', handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'for': propProp('htmlFor'),
            innertext: propProp('innerText'),
            innerhtml: propProp('innerHTML'),
            innerHTML: propProp('innerHTML', {
                addEventListener: function (eventName, handler, aEL) {
                    var handlers = [];
                    var el = this;
                    [
                        'change',
                        'blur'
                    ].forEach(function (eventName) {
                        var localHandler = function () {
                            handler.apply(this, arguments);
                        };
                        domEvents.addEventListener(el, eventName, localHandler);
                        handlers.push([
                            eventName,
                            localHandler
                        ]);
                    });
                    return function (rEL) {
                        handlers.forEach(function (info) {
                            rEL.call(el, info[0], info[1]);
                        });
                    };
                }
            }),
            required: booleanProp('required'),
            readonly: booleanProp('readOnly'),
            selected: {
                get: function () {
                    return this.selected;
                },
                set: function (val) {
                    val = !!val;
                    setData.set.call(this, 'lastSetValue', val);
                    return this.selected = val;
                },
                addEventListener: function (eventName, handler, aEL) {
                    var option = this;
                    var select = this.parentNode;
                    var lastVal = option.selected;
                    var localHandler = function (changeEvent) {
                        var curVal = option.selected;
                        lastVal = setData.get.call(option, 'lastSetValue') || lastVal;
                        if (curVal !== lastVal) {
                            lastVal = curVal;
                            domEvents.dispatch(option, eventName);
                        }
                    };
                    var removeChangeHandler = setChildOptionsOnChange(select, aEL);
                    domEvents.addEventListener(select, 'change', localHandler);
                    aEL.call(option, eventName, handler);
                    return function (rEL) {
                        removeChangeHandler(rEL);
                        domEvents.removeEventListener(select, 'change', localHandler);
                        rEL.call(option, eventName, handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'OPTION' && this.parentNode && this.parentNode.nodeName === 'SELECT';
                }
            },
            style: {
                set: function () {
                    var el = global.document && getDocument().createElement('div');
                    if (el && el.style && 'cssText' in el.style) {
                        return function (val) {
                            return this.style.cssText = val || '';
                        };
                    } else {
                        return function (val) {
                            return domMutateNode.setAttribute.call(this, 'style', val);
                        };
                    }
                }()
            },
            textcontent: propProp('textContent'),
            value: {
                get: function () {
                    var value = this.value;
                    if (this.nodeName === 'SELECT') {
                        if ('selectedIndex' in this && this.selectedIndex === -1) {
                            value = undefined;
                        }
                    }
                    return value;
                },
                set: function (value) {
                    var nodeName = this.nodeName.toLowerCase();
                    if (nodeName === 'input') {
                        value = toString(value);
                    }
                    if (this.value !== value || nodeName === 'option') {
                        this.value = value;
                    }
                    if (nodeName === 'input' || nodeName === 'textarea') {
                        this.defaultValue = value;
                    }
                    if (nodeName === 'select') {
                        setData.set.call(this, 'attrValueLastVal', value);
                        setChildOptions(this, value === null ? value : this.value);
                        var docEl = this.ownerDocument.documentElement;
                        if (!docEl.contains(this)) {
                            var select = this;
                            var insertionDisposal = domMutate.onNodeInsertion(select, function () {
                                insertionDisposal();
                                setChildOptions(select, value === null ? value : select.value);
                            });
                        }
                        setupMO(this, function () {
                            var value = setData.get.call(this, 'attrValueLastVal');
                            attr.set(this, 'value', value);
                            domEvents.dispatch(this, 'change');
                        });
                    }
                    return value;
                },
                test: function () {
                    return formElements[this.nodeName];
                }
            },
            values: {
                get: function () {
                    return collectSelectedOptions(this);
                },
                set: function (values) {
                    values = values || [];
                    markSelectedOptions(this, values);
                    setData.set.call(this, 'stickyValues', attr.get(this, 'values'));
                    setupMO(this, function () {
                        var previousValues = setData.get.call(this, 'stickyValues');
                        attr.set(this, 'values', previousValues);
                        var currentValues = setData.get.call(this, 'stickyValues');
                        var changes = diff(previousValues.slice().sort(), currentValues.slice().sort());
                        if (changes.length) {
                            domEvents.dispatch(this, 'values');
                        }
                    });
                    return values;
                },
                addEventListener: function (eventName, handler, aEL) {
                    var localHandler = function () {
                        domEvents.dispatch(this, 'values');
                    };
                    domEvents.addEventListener(this, 'change', localHandler);
                    aEL.call(this, eventName, handler);
                    return function (rEL) {
                        domEvents.removeEventListener(this, 'change', localHandler);
                        rEL.call(this, eventName, handler);
                    };
                }
            }
        };
        var attr = {
            rules: behaviorRules,
            specialAttributes: specialAttributes,
            getRule: function (el, attrOrPropName) {
                var special = specialAttributes[attrOrPropName];
                if (special) {
                    return special;
                }
                var rulesForElementType = behaviorRules.get(el.constructor);
                var cached = rulesForElementType && rulesForElementType[attrOrPropName];
                if (cached) {
                    return cached;
                }
                if (!(attrOrPropName in el)) {
                    return this.attribute(attrOrPropName);
                }
                var newRule = isPropWritable(el, attrOrPropName) ? this.property(attrOrPropName) : this.attribute(attrOrPropName);
                return cacheRule(el, attrOrPropName, newRule);
            },
            attribute: function (attrName) {
                return {
                    get: function () {
                        return this.getAttribute(attrName);
                    },
                    set: function (val) {
                        domMutateNode.setAttribute.call(this, attrName, val);
                    }
                };
            },
            property: function (propName) {
                return {
                    get: function () {
                        return this[propName];
                    },
                    set: function (val) {
                        this[propName] = val;
                    }
                };
            },
            findSpecialListener: function (attributeName) {
                return specialAttributes[attributeName] && specialAttributes[attributeName].addEventListener;
            },
            setAttrOrProp: function (el, attrName, val) {
                return this.set(el, attrName, val);
            },
            set: function (el, attrName, val) {
                var rule = this.getRule(el, attrName);
                var setter = rule && rule.set;
                if (setter) {
                    return setter.call(el, val);
                }
            },
            get: function (el, attrName) {
                var rule = this.getRule(el, attrName);
                var getter = rule && rule.get;
                if (getter) {
                    return rule.test ? rule.test.call(el) && getter.call(el) : getter.call(el);
                }
            },
            remove: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var special = specialAttributes[attrName];
                var setter = special && special.set;
                var remover = special && special.remove;
                var test = getSpecialTest(special);
                if (typeof remover === 'function' && test.call(el)) {
                    remover.call(el);
                } else if (typeof setter === 'function' && test.call(el)) {
                    setter.call(el, undefined);
                } else {
                    domMutateNode.removeAttribute.call(el, attrName);
                }
            }
        };
        module.exports = attr;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.0#lib/attr*/
define('can-view-live@4.2.0#lib/attr', [
    'require',
    'exports',
    'module',
    './core',
    'can-reflect',
    'can-queues',
    'can-attribute-observable/behaviors'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var attr = require('can-attribute-observable/behaviors');
    live.attr = function (el, attributeName, compute) {
        function liveUpdateAttr(newVal) {
            queues.domUIQueue.enqueue(attr.set, attr, [
                el,
                attributeName,
                newVal
            ]);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveUpdateAttr, {
                'can.getChangesDependencyRecord': function () {
                    return { valueDependencies: new Set([el]) };
                }
            });
            Object.defineProperty(liveUpdateAttr, 'name', { value: 'live.attr update::' + canReflect.getName(compute) });
        }
        live.listen(el, compute, liveUpdateAttr);
        attr.set(el, attributeName, canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/attrs*/
define('can-view-live@4.2.0#lib/attrs', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-callbacks',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var viewCallbacks = require('can-view-callbacks');
    var domMutate = require('can-dom-mutate');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    live.attrs = function (el, compute, scope, options) {
        if (!canReflect.isObservableLike(compute)) {
            var attrs = live.getAttributeParts(compute);
            for (var name in attrs) {
                domMutateNode.setAttribute.call(el, name, attrs[name]);
            }
            return;
        }
        var oldAttrs = {};
        function liveAttrsUpdate(newVal) {
            var newAttrs = live.getAttributeParts(newVal), name;
            for (name in newAttrs) {
                var newValue = newAttrs[name], oldValue = oldAttrs[name];
                if (newValue !== oldValue) {
                    domMutateNode.setAttribute.call(el, name, newValue);
                    var callback = viewCallbacks.attr(name);
                    if (callback) {
                        callback(el, {
                            attributeName: name,
                            scope: scope,
                            options: options
                        });
                    }
                }
                delete oldAttrs[name];
            }
            for (name in oldAttrs) {
                domMutateNode.removeAttribute.call(el, name);
            }
            oldAttrs = newAttrs;
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveAttrsUpdate, {
                'can.getChangesDependencyRecord': function () {
                    return { valueDependencies: new Set([el]) };
                }
            });
            Object.defineProperty(liveAttrsUpdate, 'name', { value: 'live.attrs update::' + canReflect.getName(compute) });
            canReflectDeps.addMutatedBy(el, compute);
        }
        canReflect.onValue(compute, liveAttrsUpdate, 'domUI');
        var removalDisposal;
        var teardownHandler = function () {
            canReflect.offValue(compute, liveAttrsUpdate, 'domUI');
            if (removalDisposal) {
                removalDisposal();
                removalDisposal = undefined;
            }
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(el, compute);
            }
        };
        removalDisposal = domMutate.onNodeRemoval(el, function () {
            if (!el.ownerDocument.contains(el)) {
                teardownHandler();
            }
        });
        liveAttrsUpdate(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/html*/
define('can-view-live@4.2.0#lib/html', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-symbol',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var viewInsertSymbol = canSymbol.for('can.viewInsert');
    function updateNodeList(oldNodes, nodes, frag, nodeListUpdatedByFn) {
        if (nodes.isUnregistered !== true) {
            if (!nodeListUpdatedByFn) {
                nodeLists.update(nodes, childNodes(frag), oldNodes);
            }
            nodeLists.replace(oldNodes, frag);
        }
    }
    live.html = function (el, compute, parentNode, nodeListOrOptions) {
        var data;
        var makeAndPut;
        var nodeList;
        var nodes;
        var options;
        if (nodeListOrOptions !== undefined) {
            if (Array.isArray(nodeListOrOptions)) {
                nodeList = nodeListOrOptions;
            } else {
                nodeList = nodeListOrOptions.nodeList;
                options = nodeListOrOptions;
            }
        }
        var meta = { reasonLog: 'live.html replace::' + canReflect.getName(compute) };
        parentNode = live.getParentNode(el, parentNode);
        function liveHTMLUpdateHTML(newVal) {
            var attached = nodeLists.first(nodes).parentNode;
            if (attached) {
                makeAndPut(newVal, true);
            }
            var pn = nodeLists.first(nodes).parentNode;
            data.teardownCheck(pn);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveHTMLUpdateHTML, {
                'can.getChangesDependencyRecord': function () {
                    return { valueDependencies: new Set([parentNode]) };
                }
            });
            Object.defineProperty(liveHTMLUpdateHTML, 'name', { value: 'live.html update::' + canReflect.getName(compute) });
        }
        data = live.listen(parentNode, compute, liveHTMLUpdateHTML);
        nodes = nodeList || [el];
        makeAndPut = function (val, useQueue) {
            if (val && typeof val[viewInsertSymbol] === 'function') {
                val = val[viewInsertSymbol](options);
            }
            var isFunction = typeof val === 'function';
            var frag = makeFrag(isFunction ? '' : val);
            live.addTextNodeIfNoChildren(frag);
            var oldNodes;
            if (useQueue === true) {
                oldNodes = nodeLists.unregisterChildren(nodes, true);
                var nodeListUpdatedByFn = false;
                if (isFunction) {
                    val(frag.firstChild);
                    nodeListUpdatedByFn = nodeLists.first(nodes) === frag.firstChild;
                }
                queues.domUIQueue.enqueue(updateNodeList, null, [
                    oldNodes,
                    nodes,
                    frag,
                    nodeListUpdatedByFn
                ], meta);
            } else {
                oldNodes = nodeLists.update(nodes, childNodes(frag));
                if (isFunction) {
                    val(frag.firstChild);
                }
                nodeLists.replace(oldNodes, frag);
            }
        };
        data.nodeList = nodes;
        if (!nodeList) {
            nodeLists.register(nodes, data.teardownCheck);
        } else {
            nodeList.unregistered = data.teardownCheck;
        }
        makeAndPut(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/set-observable*/
define('can-view-live@4.2.0#lib/set-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('can-simple-observable');
    var canReflect = require('can-reflect');
    function SetObservable(initialValue, setter) {
        this.setter = setter;
        SimpleObservable.call(this, initialValue);
    }
    SetObservable.prototype = Object.create(SimpleObservable.prototype);
    SetObservable.prototype.constructor = SetObservable;
    SetObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    canReflect.assignSymbols(SetObservable.prototype, { 'can.setValue': SetObservable.prototype.set });
    module.exports = SetObservable;
});
/*can-diff@1.4.1#patcher/patcher*/
define('can-diff@1.4.1#patcher/patcher', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-key-tree',
    'can-symbol',
    '../list/list',
    'can-queues',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var KeyTree = require('can-key-tree');
    var canSymbol = require('can-symbol');
    var diff = require('../list/list');
    var queues = require('can-queues');
    var canSymbol = require('can-symbol');
    var onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue');
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    var Patcher = function (observableOrList, priority) {
        this.handlers = new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.setup.bind(this),
            onEmpty: this.teardown.bind(this)
        });
        this.observableOrList = observableOrList;
        this.isObservableValue = canReflect.isValueLike(this.observableOrList) || canReflect.isObservableLike(this.observableOrList);
        if (this.isObservableValue) {
            this.priority = canReflect.getPriority(observableOrList);
        } else {
            this.priority = priority || 0;
        }
        this.onList = this.onList.bind(this);
        this.onPatchesNotify = this.onPatchesNotify.bind(this);
        this.onPatchesDerive = this.onPatchesDerive.bind(this);
        this.patches = [];
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.onList, 'name', { value: 'live.list new list::' + canReflect.getName(observableOrList) });
            Object.defineProperty(this.onPatchesNotify, 'name', { value: 'live.list notify::' + canReflect.getName(observableOrList) });
            Object.defineProperty(this.onPatchesDerive, 'name', { value: 'live.list derive::' + canReflect.getName(observableOrList) });
        }
    };
    Patcher.prototype = {
        constructor: Patcher,
        setup: function () {
            if (this.observableOrList[onValueSymbol]) {
                canReflect.onValue(this.observableOrList, this.onList, 'notify');
                this.setupList(canReflect.getValue(this.observableOrList));
            } else {
                this.setupList(this.observableOrList);
            }
        },
        teardown: function () {
            if (this.observableOrList[offValueSymbol]) {
                canReflect.offValue(this.observableOrList, this.onList, 'notify');
            }
        },
        setupList: function (list) {
            this.currentList = list;
            if (list && list[onPatchesSymbol]) {
                list[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onList: function onList(newList) {
            var current = this.currentList || [];
            newList = newList || [];
            if (current[offPatchesSymbol]) {
                current[offPatchesSymbol](this.onPatchesNotify, 'notify');
            }
            var patches = diff(current, newList);
            this.currentList = newList;
            this.onPatchesNotify(patches);
            if (newList[onPatchesSymbol]) {
                newList[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onPatchesNotify: function onPatchesNotify(patches) {
            this.patches.push.apply(this.patches, patches);
            queues.deriveQueue.enqueue(this.onPatchesDerive, this, [], { priority: this.priority });
        },
        onPatchesDerive: function onPatchesDerive() {
            var patches = this.patches;
            this.patches = [];
            queues.enqueueByQueue(this.handlers.getNode([]), this.currentList, [
                patches,
                this.currentList
            ], null, [
                'Apply patches',
                patches
            ]);
        }
    };
    canReflect.assignSymbols(Patcher.prototype, {
        'can.onPatches': function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            this.handlers.delete([
                queue || 'mutate',
                handler
            ]);
        }
    });
    module.exports = Patcher;
});
/*can-view-live@4.2.0#lib/list*/
define('can-view-live@4.2.0#lib/list', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-dom-mutate/node',
    'can-reflect',
    'can-symbol',
    'can-reflect-dependencies',
    'can-simple-observable',
    './set-observable',
    'can-diff/patcher/patcher'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var frag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canReflectDeps = require('can-reflect-dependencies');
    var SimpleObservable = require('can-simple-observable');
    var SetObservable = require('./set-observable');
    var Patcher = require('can-diff/patcher/patcher');
    var splice = [].splice;
    var renderAndAddToNodeLists = function (newNodeLists, parentNodeList, render, context, args) {
            var itemNodeList = [];
            if (parentNodeList) {
                nodeLists.register(itemNodeList, null, true, true);
                itemNodeList.parentList = parentNodeList;
                itemNodeList.expression = '#each SUBEXPRESSION';
            }
            var itemHTML = render.apply(context, args.concat([itemNodeList])), itemFrag = frag(itemHTML);
            var children = canReflect.toArray(childNodes(itemFrag));
            if (parentNodeList) {
                nodeLists.update(itemNodeList, children);
                newNodeLists.push(itemNodeList);
            } else {
                newNodeLists.push(nodeLists.register(children));
            }
            return itemFrag;
        }, removeFromNodeList = function (masterNodeList, index, length) {
            var removedMappings = masterNodeList.splice(index + 1, length), itemsToRemove = [];
            removedMappings.forEach(function (nodeList) {
                var nodesToRemove = nodeLists.unregister(nodeList);
                [].push.apply(itemsToRemove, nodesToRemove);
            });
            return itemsToRemove;
        };
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    function ListDOMPatcher(el, compute, render, context, parentNode, nodeList, falseyRender) {
        this.patcher = new Patcher(compute);
        parentNode = live.getParentNode(el, parentNode);
        this.value = compute;
        this.render = render;
        this.context = context;
        this.parentNode = parentNode;
        this.falseyRender = falseyRender;
        this.masterNodeList = nodeList || nodeLists.register([el], null, true);
        this.placeholder = el;
        this.indexMap = [];
        this.isValueLike = canReflect.isValueLike(this.value);
        this.isObservableLike = canReflect.isObservableLike(this.value);
        this.onPatches = this.onPatches.bind(this);
        var data = this.data = live.setup(parentNode, this.setupValueBinding.bind(this), this.teardownValueBinding.bind(this));
        this.masterNodeList.unregistered = function () {
            data.teardownCheck();
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(this.onPatches, 'name', { value: 'live.list update::' + canReflect.getName(compute) });
        }
    }
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    ListDOMPatcher.prototype = {
        setupValueBinding: function () {
            this.patcher[onPatchesSymbol](this.onPatches, 'domUI');
            if (this.patcher.currentList && this.patcher.currentList.length) {
                this.onPatches([{
                        insert: this.patcher.currentList,
                        index: 0,
                        deleteCount: 0
                    }]);
            } else {
                this.addFalseyIfEmpty();
            }
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(this.parentNode, this.patcher.observableOrList);
            }
        },
        teardownValueBinding: function () {
            this.patcher[offPatchesSymbol](this.onPatches, 'domUI');
            this.exit = true;
            this.remove({ length: this.patcher.currentList.length }, 0, true);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.deleteMutatedBy(this.parentNode, this.patcher.observableOrList);
            }
        },
        onPatches: function ListDOMPatcher_onPatches(patches) {
            if (this.exit) {
                return;
            }
            for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
                var patch = patches[i];
                if (patch.type === 'move') {
                    this.move(patch.toIndex, patch.fromIndex);
                } else {
                    if (patch.deleteCount) {
                        this.remove({ length: patch.deleteCount }, patch.index, true);
                    }
                    if (patch.insert && patch.insert.length) {
                        this.add(patch.insert, patch.index);
                    }
                }
            }
        },
        add: function (items, index) {
            var frag = this.placeholder.ownerDocument.createDocumentFragment(), newNodeLists = [], newIndicies = [], masterNodeList = this.masterNodeList, render = this.render, context = this.context;
            items.forEach(function (item, key) {
                var itemIndex = new SimpleObservable(key + index), itemCompute = new SetObservable(item, function (newVal) {
                        canReflect.setKeyValue(this.patcher.currentList, itemIndex.get(), newVal);
                    }.bind(this)), itemFrag = renderAndAddToNodeLists(newNodeLists, masterNodeList, render, context, [
                        itemCompute,
                        itemIndex
                    ]);
                frag.appendChild(itemFrag);
                newIndicies.push(itemIndex);
            }, this);
            var masterListIndex = index + 1;
            if (!this.indexMap.length) {
                var falseyItemsToRemove = removeFromNodeList(masterNodeList, 0, masterNodeList.length - 1);
                nodeLists.remove(falseyItemsToRemove);
            }
            if (!masterNodeList[masterListIndex]) {
                nodeLists.after(masterListIndex === 1 ? [this.placeholder] : [nodeLists.last(this.masterNodeList[masterListIndex - 1])], frag);
            } else {
                var el = nodeLists.first(masterNodeList[masterListIndex]);
                domMutateNode.insertBefore.call(el.parentNode, frag, el);
            }
            splice.apply(this.masterNodeList, [
                masterListIndex,
                0
            ].concat(newNodeLists));
            splice.apply(this.indexMap, [
                index,
                0
            ].concat(newIndicies));
            for (var i = index + newIndicies.length, len = this.indexMap.length; i < len; i++) {
                this.indexMap[i].set(i);
            }
        },
        remove: function (items, index) {
            if (index < 0) {
                index = this.indexMap.length + index;
            }
            var itemsToRemove = removeFromNodeList(this.masterNodeList, index, items.length);
            var indexMap = this.indexMap;
            indexMap.splice(index, items.length);
            for (var i = index, len = indexMap.length; i < len; i++) {
                indexMap[i].set(i);
            }
            if (!this.exit) {
                this.addFalseyIfEmpty();
                nodeLists.remove(itemsToRemove);
            } else {
                nodeLists.unregister(this.masterNodeList);
            }
        },
        addFalseyIfEmpty: function () {
            if (this.falseyRender && this.indexMap.length === 0) {
                var falseyNodeLists = [];
                var falseyFrag = renderAndAddToNodeLists(falseyNodeLists, this.masterNodeList, this.falseyRender, this.currentList, [this.currentList]);
                nodeLists.after([this.masterNodeList[0]], falseyFrag);
                this.masterNodeList.push(falseyNodeLists[0]);
            }
        },
        move: function move(newIndex, currentIndex) {
            newIndex = newIndex + 1;
            currentIndex = currentIndex + 1;
            var masterNodeList = this.masterNodeList, indexMap = this.indexMap;
            var referenceNodeList = masterNodeList[newIndex];
            var movedElements = frag(nodeLists.flatten(masterNodeList[currentIndex]));
            var referenceElement;
            if (currentIndex < newIndex) {
                referenceElement = nodeLists.last(referenceNodeList).nextSibling;
            } else {
                referenceElement = nodeLists.first(referenceNodeList);
            }
            var parentNode = masterNodeList[0].parentNode;
            parentNode.insertBefore(movedElements, referenceElement);
            var temp = masterNodeList[currentIndex];
            [].splice.apply(masterNodeList, [
                currentIndex,
                1
            ]);
            [].splice.apply(masterNodeList, [
                newIndex,
                0,
                temp
            ]);
            newIndex = newIndex - 1;
            currentIndex = currentIndex - 1;
            var indexCompute = indexMap[currentIndex];
            [].splice.apply(indexMap, [
                currentIndex,
                1
            ]);
            [].splice.apply(indexMap, [
                newIndex,
                0,
                indexCompute
            ]);
            var i = Math.min(currentIndex, newIndex);
            var len = indexMap.length;
            for (i, len; i < len; i++) {
                indexMap[i].set(i);
            }
        },
        set: function (newVal, index) {
            this.remove({ length: 1 }, index, true);
            this.add([newVal], index);
        }
    };
    live.list = function (el, list, render, context, parentNode, nodeList, falseyRender) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        new ListDOMPatcher(el, list, render, context, parentNode, nodeList, falseyRender);
    };
});
/*can-view-live@4.2.0#lib/text*/
define('can-view-live@4.2.0#lib/text', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var canReflect = require('can-reflect');
    live.text = function (el, compute, parentNode, nodeList) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        var parent = live.getParentNode(el, parentNode);
        el.nodeValue = live.makeString(canReflect.getValue(compute));
        function liveTextUpdateTextNode(newVal) {
            el.nodeValue = live.makeString(newVal);
        }
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(liveTextUpdateTextNode, {
                'can.getChangesDependencyRecord': function () {
                    return { valueDependencies: new Set([parent]) };
                }
            });
            Object.defineProperty(liveTextUpdateTextNode, 'name', { value: 'live.text update::' + canReflect.getName(compute) });
        }
        var data = live.listen(parent, compute, liveTextUpdateTextNode, 'domUI');
        if (!nodeList) {
            nodeList = nodeLists.register([el], null, true);
        }
        nodeList.unregistered = data.teardownCheck;
        data.nodeList = nodeList;
    };
});
/*can-view-live@4.2.0#can-view-live*/
define('can-view-live@4.2.0#can-view-live', [
    'require',
    'exports',
    'module',
    './lib/core',
    './lib/attr',
    './lib/attrs',
    './lib/html',
    './lib/list',
    './lib/text'
], function (require, exports, module) {
    'use strict';
    var live = require('./lib/core');
    require('./lib/attr');
    require('./lib/attrs');
    require('./lib/html');
    require('./lib/list');
    require('./lib/text');
    module.exports = live;
});
/*can-stache@4.10.0#src/text_section*/
define('can-stache@4.10.0#src/text_section', [
    'require',
    'exports',
    'module',
    'can-view-live',
    './utils',
    'can-dom-mutate/node',
    'can-assign',
    'can-reflect',
    'can-observation'
], function (require, exports, module) {
    'use strict';
    var live = require('can-view-live');
    var utils = require('./utils');
    var domMutate = require('can-dom-mutate/node');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var noop = function () {
    };
    var TextSectionBuilder = function () {
        this.stack = [new TextSection()];
    };
    assign(TextSectionBuilder.prototype, utils.mixins);
    assign(TextSectionBuilder.prototype, {
        startSection: function (process) {
            var subSection = new TextSection();
            this.last().add({
                process: process,
                truthy: subSection
            });
            this.stack.push(subSection);
        },
        endSection: function () {
            this.stack.pop();
        },
        inverse: function () {
            this.stack.pop();
            var falseySection = new TextSection();
            this.last().last().falsey = falseySection;
            this.stack.push(falseySection);
        },
        compile: function (state) {
            var renderer = this.stack[0].compile();
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(renderer, 'name', { value: 'textSectionRenderer<' + state.tag + '.' + state.attr + '>' });
            }
            return function (scope) {
                function textSectionRender() {
                    return renderer(scope);
                }
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(textSectionRender, 'name', { value: 'textSectionRender<' + state.tag + '.' + state.attr + '>' });
                }
                var observation = new Observation(textSectionRender, null, { isObservable: false });
                canReflect.onValue(observation, noop);
                var value = canReflect.getValue(observation);
                if (canReflect.valueHasDependencies(observation)) {
                    if (state.textContentOnly) {
                        live.text(this, observation);
                    } else if (state.attr) {
                        live.attr(this, state.attr, observation);
                    } else {
                        live.attrs(this, observation, scope);
                    }
                    canReflect.offValue(observation, noop);
                } else {
                    if (state.textContentOnly) {
                        this.nodeValue = value;
                    } else if (state.attr) {
                        domMutate.setAttribute.call(this, state.attr, value);
                    } else {
                        live.attrs(this, value);
                    }
                }
            };
        }
    });
    var passTruthyFalsey = function (process, truthy, falsey) {
        return function (scope) {
            return process.call(this, scope, truthy, falsey);
        };
    };
    var TextSection = function () {
        this.values = [];
    };
    assign(TextSection.prototype, {
        add: function (data) {
            this.values.push(data);
        },
        last: function () {
            return this.values[this.values.length - 1];
        },
        compile: function () {
            var values = this.values, len = values.length;
            for (var i = 0; i < len; i++) {
                var value = this.values[i];
                if (typeof value === 'object') {
                    values[i] = passTruthyFalsey(value.process, value.truthy && value.truthy.compile(), value.falsey && value.falsey.compile());
                }
            }
            return function (scope) {
                var txt = '', value;
                for (var i = 0; i < len; i++) {
                    value = values[i];
                    txt += typeof value === 'string' ? value : value.call(this, scope);
                }
                return txt;
            };
        }
    });
    module.exports = TextSectionBuilder;
});
/*can-stache@4.10.0#expressions/arg*/
define('can-stache@4.10.0#expressions/arg', function (require, exports, module) {
    'use strict';
    var Arg = function (expression, modifiers) {
        this.expr = expression;
        this.modifiers = modifiers || {};
        this.isCompute = false;
    };
    Arg.prototype.value = function () {
        return this.expr.value.apply(this.expr, arguments);
    };
    if (process.env.NODE_ENV !== 'production') {
        Arg.prototype.sourceText = function () {
            return (this.modifiers.compute ? '~' : '') + this.expr.sourceText();
        };
    }
    module.exports = Arg;
});
/*can-stache@4.10.0#expressions/literal*/
define('can-stache@4.10.0#expressions/literal', function (require, exports, module) {
    'use strict';
    var Literal = function (value) {
        this._value = value;
    };
    Literal.prototype.value = function () {
        return this._value;
    };
    if (process.env.NODE_ENV !== 'production') {
        Literal.prototype.sourceText = function () {
            return JSON.stringify(this._value);
        };
    }
    module.exports = Literal;
});
/*can-simple-observable@2.2.0#setter/setter*/
define('can-simple-observable@2.2.0#setter/setter', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../settable/settable',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var SettableObservable = require('../settable/settable');
    var valueEventBindings = require('can-event-queue/value/value');
    function SetterObservable(getter, setter) {
        this.setter = setter;
        this.observation = new Observation(getter);
        this.handler = this.handler.bind(this);
        if (process.env.NODE_ENV !== 'production') {
            canReflect.assignSymbols(this, {
                'can.getName': function () {
                    return canReflect.getName(this.constructor) + '<' + canReflect.getName(getter) + '>';
                }
            });
            Object.defineProperty(this.handler, 'name', { value: canReflect.getName(this) + '.handler' });
        }
    }
    SetterObservable.prototype = Object.create(SettableObservable.prototype);
    SetterObservable.prototype.constructor = SetterObservable;
    SetterObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    SetterObservable.prototype.hasDependencies = function () {
        return canReflect.valueHasDependencies(this.observation);
    };
    canReflect.assignSymbols(SetterObservable.prototype, {
        'can.setValue': SetterObservable.prototype.set,
        'can.valueHasDependencies': SetterObservable.prototype.hasDependencies
    });
    module.exports = SetterObservable;
});
/*can-stache@4.10.0#src/expression-helpers*/
define('can-stache@4.10.0#src/expression-helpers', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    'can-reflect',
    'can-stache-key',
    'can-symbol',
    'can-observation',
    'can-view-scope/make-compute-like',
    'can-simple-observable/setter/setter'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var canReflect = require('can-reflect');
    var stacheKey = require('can-stache-key');
    var canSymbol = require('can-symbol');
    var Observation = require('can-observation');
    var makeComputeLike = require('can-view-scope/make-compute-like');
    var SetterObservable = require('can-simple-observable/setter/setter');
    function getObservableValue_fromKey(key, scope, readOptions) {
        var data = scope.computeData(key, readOptions);
        Observation.temporarilyBind(data);
        return data;
    }
    function computeHasDependencies(compute) {
        return compute[canSymbol.for('can.valueHasDependencies')] ? canReflect.valueHasDependencies(compute) : compute.computeInstance.hasDependencies;
    }
    function getObservableValue_fromDynamicKey_fromObservable(key, root, helperOptions, readOptions) {
        var getKeys = function () {
            return stacheKey.reads(('' + canReflect.getValue(key)).replace('.', '\\.'));
        };
        var parentHasKey;
        var computeValue = new SetterObservable(function getDynamicKey() {
            var readData = stacheKey.read(canReflect.getValue(root), getKeys());
            parentHasKey = readData.parentHasKey;
            return readData.value;
        }, function setDynamicKey(newVal) {
            stacheKey.write(canReflect.getValue(root), getKeys(), newVal);
        });
        Observation.temporarilyBind(computeValue);
        computeValue.initialValue = canReflect.getValue(computeValue);
        computeValue.parentHasKey = parentHasKey;
        return computeValue;
    }
    function convertToArgExpression(expr) {
        if (!(expr instanceof Arg) && !(expr instanceof Literal)) {
            return new Arg(expr);
        } else {
            return expr;
        }
    }
    function toComputeOrValue(value) {
        if (canReflect.isObservableLike(value)) {
            if (canReflect.isValueLike(value) && canReflect.valueHasDependencies(value) === false) {
                return canReflect.getValue(value);
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    function toCompute(value) {
        if (value) {
            if (value.isComputed) {
                return value;
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    module.exports = {
        getObservableValue_fromKey: getObservableValue_fromKey,
        computeHasDependencies: computeHasDependencies,
        getObservableValue_fromDynamicKey_fromObservable: getObservableValue_fromDynamicKey_fromObservable,
        convertToArgExpression: convertToArgExpression,
        toComputeOrValue: toComputeOrValue,
        toCompute: toCompute
    };
});
/*can-stache@4.10.0#expressions/hashes*/
define('can-stache@4.10.0#expressions/hashes', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var expressionHelpers = require('../src/expression-helpers');
    var Hashes = function (hashes) {
        this.hashExprs = hashes;
    };
    Hashes.prototype.value = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = expressionHelpers.convertToArgExpression(this.hashExprs[prop]), value = val.value.apply(val, arguments);
            hash[prop] = {
                call: !val.modifiers || !val.modifiers.compute,
                value: value
            };
        }
        return new Observation(function () {
            var finalHash = {};
            for (var prop in hash) {
                finalHash[prop] = hash[prop].call ? canReflect.getValue(hash[prop].value) : expressionHelpers.toComputeOrValue(hash[prop].value);
            }
            return finalHash;
        });
    };
    if (process.env.NODE_ENV !== 'production') {
        Hashes.prototype.sourceText = function () {
            var hashes = [];
            canReflect.eachKey(this.hashExprs, function (expr, prop) {
                hashes.push(prop + '=' + expr.sourceText());
            });
            return hashes.join(' ');
        };
    }
    module.exports = Hashes;
});
/*can-stache@4.10.0#expressions/bracket*/
define('can-stache@4.10.0#expressions/bracket', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV !== 'production') {
        var canSymbol = require('can-symbol');
    }
    var expressionHelpers = require('../src/expression-helpers');
    var Bracket = function (key, root, originalKey) {
        this.root = root;
        this.key = key;
        if (process.env.NODE_ENV !== 'production') {
            this[canSymbol.for('can-stache.originalKey')] = originalKey;
        }
    };
    Bracket.prototype.value = function (scope, helpers) {
        var root = this.root ? this.root.value(scope, helpers) : scope.peek('this');
        return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key.value(scope, helpers), root, scope, helpers, {});
    };
    if (process.env.NODE_ENV !== 'production') {
        Bracket.prototype.sourceText = function () {
            if (this.rootExpr) {
                return this.rootExpr.sourceText() + '[' + this.key + ']';
            } else {
                return '[' + this.key + ']';
            }
        };
    }
    Bracket.prototype.closingTag = function () {
        if (process.env.NODE_ENV !== 'production') {
            return this[canSymbol.for('can-stache.originalKey')] || '';
        }
    };
    module.exports = Bracket;
});
/*can-stache@4.10.0#src/set-identifier*/
define('can-stache@4.10.0#src/set-identifier', function (require, exports, module) {
    'use strict';
    module.exports = function SetIdentifier(value) {
        this.value = value;
    };
});
/*can-stache@4.10.0#expressions/call*/
define('can-stache@4.10.0#expressions/call', [
    'require',
    'exports',
    'module',
    './hashes',
    '../src/set-identifier',
    'can-symbol',
    'can-simple-observable/setter/setter',
    '../src/expression-helpers',
    'can-reflect',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var Hashes = require('./hashes');
    var SetIdentifier = require('../src/set-identifier');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var SetterObservable = require('can-simple-observable/setter/setter');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var assign = require('can-assign');
    var Call = function (methodExpression, argExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions.map(expressionHelpers.convertToArgExpression);
    };
    Call.prototype.args = function (scope, ignoreArgLookup) {
        var hashExprs = {};
        var args = [];
        var gotIgnoreFunction = typeof ignoreArgLookup === 'function';
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            if (arg.expr instanceof Hashes) {
                assign(hashExprs, arg.expr.hashExprs);
            }
            if (!gotIgnoreFunction || !ignoreArgLookup(i)) {
                var value = arg.value.apply(arg, arguments);
                args.push({
                    call: !arg.modifiers || !arg.modifiers.compute,
                    value: value
                });
            }
        }
        return function (doNotWrapArguments) {
            var finalArgs = [];
            if (canReflect.size(hashExprs) > 0) {
                finalArgs.hashExprs = hashExprs;
            }
            for (var i = 0, len = args.length; i < len; i++) {
                if (doNotWrapArguments) {
                    finalArgs[i] = args[i].value;
                } else {
                    finalArgs[i] = args[i].call ? canReflect.getValue(args[i].value) : expressionHelpers.toCompute(args[i].value);
                }
            }
            return finalArgs;
        };
    };
    Call.prototype.value = function (scope, helperOptions) {
        var callExpression = this;
        var method = this.methodExpr.value(scope, { proxyMethods: false }), func = canReflect.getValue(method);
        var getArgs = callExpression.args(scope, func && func.ignoreArgLookup);
        var computeFn = function (newVal) {
            var func = canReflect.getValue(method);
            if (typeof func === 'function') {
                var args = getArgs(func.isLiveBound);
                if (func.requiresOptionsArgument) {
                    if (args.hashExprs && helperOptions && helperOptions.exprData) {
                        helperOptions.exprData.hashExprs = args.hashExprs;
                    }
                    args.push(helperOptions);
                }
                if (arguments.length) {
                    args.unshift(new SetIdentifier(newVal));
                }
                return func.apply(method.thisArg || scope.peek('this'), args);
            }
        };
        if (process.env.NODE_ENV !== 'production') {
            Object.defineProperty(computeFn, 'name', { value: '{{' + this.sourceText() + '}}' });
        }
        if (helperOptions && helperOptions.doNotWrapInObservation) {
            return computeFn();
        } else {
            var computeValue = new SetterObservable(computeFn, computeFn);
            return computeValue;
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        Call.prototype.sourceText = function () {
            var args = this.argExprs.map(function (arg) {
                return arg.sourceText();
            });
            return this.methodExpr.sourceText() + '(' + args.join(',') + ')';
        };
    }
    Call.prototype.closingTag = function () {
        if (process.env.NODE_ENV !== 'production') {
            if (this.methodExpr[sourceTextSymbol]) {
                return this.methodExpr[sourceTextSymbol];
            }
        }
        return this.methodExpr.key;
    };
    module.exports = Call;
});
/*can-stache@4.10.0#expressions/helper*/
define('can-stache@4.10.0#expressions/helper', [
    'require',
    'exports',
    'module',
    './literal',
    './hashes',
    'can-assign',
    'can-log/dev/dev',
    '../src/expression-helpers',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Literal = require('./literal');
    var Hashes = require('./hashes');
    var assign = require('can-assign');
    var dev = require('can-log/dev/dev');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var Helper = function (methodExpression, argExpressions, hashExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions;
        this.hashExprs = hashExpressions;
        this.mode = null;
    };
    Helper.prototype.args = function (scope) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            args.push(expressionHelpers.toComputeOrValue(arg.value.apply(arg, arguments)));
        }
        return args;
    };
    Helper.prototype.hash = function (scope) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop];
            hash[prop] = expressionHelpers.toComputeOrValue(val.value.apply(val, arguments));
        }
        return hash;
    };
    Helper.prototype.value = function (scope, helperOptions) {
        var methodKey = this.methodExpr instanceof Literal ? '' + this.methodExpr._value : this.methodExpr.key, helperInstance = this, helperFn = expressionHelpers.getObservableValue_fromKey(methodKey, scope, { proxyMethods: false }), initialValue = helperFn && helperFn.initialValue, thisArg = helperFn && helperFn.thisArg;
        if (typeof initialValue === 'function') {
            helperFn = function helperFn() {
                var args = helperInstance.args(scope), helperOptionArg = assign(assign({}, helperOptions), {
                        hash: helperInstance.hash(scope),
                        exprData: helperInstance
                    });
                args.push(helperOptionArg);
                return initialValue.apply(thisArg || scope.peek('this'), args);
            };
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(helperFn, 'name', { value: canReflect.getName(this) });
            }
        } else if (process.env.NODE_ENV !== 'production') {
            var filename = scope.peek('scope.filename');
            var lineNumber = scope.peek('scope.lineNumber');
            dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find helper "' + methodKey + '".');
        }
        return helperFn;
    };
    Helper.prototype.closingTag = function () {
        return this.methodExpr.key;
    };
    if (process.env.NODE_ENV !== 'production') {
        Helper.prototype.sourceText = function () {
            var text = [this.methodExpr.sourceText()];
            if (this.argExprs.length) {
                text.push(this.argExprs.map(function (arg) {
                    return arg.sourceText();
                }).join(' '));
            }
            if (canReflect.size(this.hashExprs) > 0) {
                text.push(Hashes.prototype.sourceText.call(this));
            }
            return text.join(' ');
        };
    }
    if (process.env.NODE_ENV !== 'production') {
        canReflect.assignSymbols(Helper.prototype, {
            'can.getName': function () {
                return canReflect.getName(this.constructor) + '{{' + this.sourceText() + '}}';
            }
        });
    }
    module.exports = Helper;
});
/*can-stache@4.10.0#expressions/lookup*/
define('can-stache@4.10.0#expressions/lookup', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers',
    'can-reflect',
    'can-symbol',
    'can-log/dev/dev',
    'can-stache-key'
], function (require, exports, module) {
    'use strict';
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var dev = require('can-log/dev/dev');
    var observeReader = require('can-stache-key');
    var Lookup = function (key, root, sourceText) {
        this.key = key;
        this.rootExpr = root;
        canReflect.setKeyValue(this, sourceTextSymbol, sourceText);
    };
    Lookup.prototype.value = function (scope, readOptions) {
        var value;
        if (this.rootExpr) {
            value = expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key, this.rootExpr.value(scope), scope, {}, {});
        } else {
            value = expressionHelpers.getObservableValue_fromKey(this.key, scope, readOptions);
        }
        if (process.env.NODE_ENV !== 'production') {
            if (typeof value.initialValue === 'undefined' && this.key !== 'debugger' && !value.parentHasKey) {
                var filename = scope.peek('scope.filename');
                var lineNumber = scope.peek('scope.lineNumber');
                var reads = observeReader.reads(this.key);
                var firstKey = reads[0].key;
                var key = reads.map(function (read) {
                    return read.key + (read.at ? '()' : '');
                }).join('.');
                var pathsForKey = scope.getPathsForKey(firstKey);
                var paths = Object.keys(pathsForKey);
                var includeSuggestions = paths.length && !paths.includes(firstKey);
                var warning = [(filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find key "' + key + '".' + (includeSuggestions ? ' Did you mean' + (paths.length > 1 ? ' one of these' : '') + '?\n' : '\n')];
                if (includeSuggestions) {
                    paths.forEach(function (path) {
                        warning.push('\t"' + path + '" which will read from');
                        warning.push(pathsForKey[path]);
                        warning.push('\n');
                    });
                }
                warning.push('\n');
                dev.warn.apply(dev, warning);
            }
        }
        return value;
    };
    if (process.env.NODE_ENV !== 'production') {
        Lookup.prototype.sourceText = function () {
            if (this[sourceTextSymbol]) {
                return this[sourceTextSymbol];
            } else if (this.rootExpr) {
                return this.rootExpr.sourceText() + '.' + this.key;
            } else {
                return this.key;
            }
        };
    }
    module.exports = Lookup;
});
/*can-stache@4.10.0#src/expression*/
define('can-stache@4.10.0#src/expression', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    '../expressions/hashes',
    '../expressions/bracket',
    '../expressions/call',
    '../expressions/helper',
    '../expressions/lookup',
    './set-identifier',
    '../src/expression-helpers',
    './utils',
    'can-assign',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var Hashes = require('../expressions/hashes');
    var Bracket = require('../expressions/bracket');
    var Call = require('../expressions/call');
    var Helper = require('../expressions/helper');
    var Lookup = require('../expressions/lookup');
    var SetIdentifier = require('./set-identifier');
    var expressionHelpers = require('../src/expression-helpers');
    var utils = require('./utils');
    var assign = require('can-assign');
    var last = utils.last;
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var Hash = function () {
    };
    var keyRegExp = /[\w\.\\\-_@\/\&%]+/, tokensRegExp = /('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$]+|[\(\)]|,|\~|\[|\]\s*|\s*(?=\[))/g, bracketSpaceRegExp = /\]\s+/, literalRegExp = /^('.*?'|".*?"|-?[0-9]+\.?[0-9]*|true|false|null|undefined)$/;
    var isTokenKey = function (token) {
        return keyRegExp.test(token);
    };
    var testDot = /^[\.@]\w/;
    var isAddingToExpression = function (token) {
        return isTokenKey(token) && testDot.test(token);
    };
    var ensureChildren = function (type) {
        if (!type.children) {
            type.children = [];
        }
        return type;
    };
    var Stack = function () {
        this.root = {
            children: [],
            type: 'Root'
        };
        this.current = this.root;
        this.stack = [this.root];
    };
    assign(Stack.prototype, {
        top: function () {
            return last(this.stack);
        },
        isRootTop: function () {
            return this.top() === this.root;
        },
        popTo: function (types) {
            this.popUntil(types);
            this.pop();
        },
        pop: function () {
            if (!this.isRootTop()) {
                this.stack.pop();
            }
        },
        first: function (types) {
            var curIndex = this.stack.length - 1;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        firstParent: function (types) {
            var curIndex = this.stack.length - 2;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        popUntil: function (types) {
            while (types.indexOf(this.top().type) === -1 && !this.isRootTop()) {
                this.stack.pop();
            }
            return this.top();
        },
        addTo: function (types, type) {
            var cur = this.popUntil(types);
            ensureChildren(cur).children.push(type);
        },
        addToAndPush: function (types, type) {
            this.addTo(types, type);
            this.stack.push(type);
        },
        push: function (type) {
            this.stack.push(type);
        },
        topLastChild: function () {
            return last(this.top().children);
        },
        replaceTopLastChild: function (type) {
            var children = ensureChildren(this.top()).children;
            children.pop();
            children.push(type);
            return type;
        },
        replaceTopLastChildAndPush: function (type) {
            this.replaceTopLastChild(type);
            this.stack.push(type);
        },
        replaceTopAndPush: function (type) {
            var children;
            if (this.top() === this.root) {
                children = ensureChildren(this.top()).children;
            } else {
                this.stack.pop();
                children = ensureChildren(this.top()).children;
            }
            children.pop();
            children.push(type);
            this.stack.push(type);
            return type;
        }
    });
    var convertKeyToLookup = function (key) {
        var lastPath = key.lastIndexOf('./');
        var lastDot = key.lastIndexOf('.');
        if (lastDot > lastPath) {
            return key.substr(0, lastDot) + '@' + key.substr(lastDot + 1);
        }
        var firstNonPathCharIndex = lastPath === -1 ? 0 : lastPath + 2;
        var firstNonPathChar = key.charAt(firstNonPathCharIndex);
        if (firstNonPathChar === '.' || firstNonPathChar === '@') {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex + 1);
        } else {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex);
        }
    };
    var convertToAtLookup = function (ast) {
        if (ast.type === 'Lookup') {
            canReflect.setKeyValue(ast, sourceTextSymbol, ast.key);
            ast.key = convertKeyToLookup(ast.key);
        }
        return ast;
    };
    var convertToHelperIfTopIsLookup = function (stack) {
        var top = stack.top();
        if (top && top.type === 'Lookup') {
            var base = stack.stack[stack.stack.length - 2];
            if (base.type !== 'Helper' && base) {
                stack.replaceTopAndPush({
                    type: 'Helper',
                    method: top
                });
            }
        }
    };
    var expression = {
        toComputeOrValue: expressionHelpers.toComputeOrValue,
        convertKeyToLookup: convertKeyToLookup,
        Literal: Literal,
        Lookup: Lookup,
        Arg: Arg,
        Hash: Hash,
        Hashes: Hashes,
        Call: Call,
        Helper: Helper,
        Bracket: Bracket,
        SetIdentifier: SetIdentifier,
        tokenize: function (expression) {
            var tokens = [];
            (expression.trim() + ' ').replace(tokensRegExp, function (whole, arg) {
                if (bracketSpaceRegExp.test(arg)) {
                    tokens.push(arg[0]);
                    tokens.push(arg.slice(1));
                } else {
                    tokens.push(arg);
                }
            });
            return tokens;
        },
        lookupRules: {
            'default': function (ast, methodType, isArg) {
                return ast.type === 'Helper' ? Helper : Lookup;
            },
            'method': function (ast, methodType, isArg) {
                return Lookup;
            }
        },
        methodRules: {
            'default': function (ast) {
                return ast.type === 'Call' ? Call : Helper;
            },
            'call': function (ast) {
                return Call;
            }
        },
        parse: function (expressionString, options) {
            options = options || {};
            var ast = this.ast(expressionString);
            if (!options.lookupRule) {
                options.lookupRule = 'default';
            }
            if (typeof options.lookupRule === 'string') {
                options.lookupRule = expression.lookupRules[options.lookupRule];
            }
            if (!options.methodRule) {
                options.methodRule = 'default';
            }
            if (typeof options.methodRule === 'string') {
                options.methodRule = expression.methodRules[options.methodRule];
            }
            var expr = this.hydrateAst(ast, options, options.baseMethodType || 'Helper');
            return expr;
        },
        hydrateAst: function (ast, options, methodType, isArg) {
            var hashes;
            if (ast.type === 'Lookup') {
                var LookupRule = options.lookupRule(ast, methodType, isArg);
                var lookup = new LookupRule(ast.key, ast.root && this.hydrateAst(ast.root, options, methodType), ast[sourceTextSymbol]);
                return lookup;
            } else if (ast.type === 'Literal') {
                return new Literal(ast.value);
            } else if (ast.type === 'Arg') {
                return new Arg(this.hydrateAst(ast.children[0], options, methodType, isArg), { compute: true });
            } else if (ast.type === 'Hash') {
                throw new Error('');
            } else if (ast.type === 'Hashes') {
                hashes = {};
                ast.children.forEach(function (hash) {
                    hashes[hash.prop] = this.hydrateAst(hash.children[0], options, methodType, true);
                }, this);
                return new Hashes(hashes);
            } else if (ast.type === 'Call' || ast.type === 'Helper') {
                hashes = {};
                var args = [], children = ast.children, ExpressionType = options.methodRule(ast);
                if (children) {
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.type === 'Hashes' && ast.type === 'Helper' && ExpressionType !== Call) {
                            child.children.forEach(function (hash) {
                                hashes[hash.prop] = this.hydrateAst(hash.children[0], options, ast.type, true);
                            }, this);
                        } else {
                            args.push(this.hydrateAst(child, options, ast.type, true));
                        }
                    }
                }
                return new ExpressionType(this.hydrateAst(ast.method, options, ast.type), args, hashes);
            } else if (ast.type === 'Bracket') {
                var originalKey;
                if (process.env.NODE_ENV !== 'production') {
                    originalKey = ast[canSymbol.for('can-stache.originalKey')];
                }
                return new Bracket(this.hydrateAst(ast.children[0], options), ast.root ? this.hydrateAst(ast.root, options) : undefined, originalKey);
            }
        },
        ast: function (expression) {
            var tokens = this.tokenize(expression);
            return this.parseAst(tokens, { index: 0 });
        },
        parseAst: function (tokens, cursor) {
            var stack = new Stack(), top, firstParent, lastToken;
            while (cursor.index < tokens.length) {
                var token = tokens[cursor.index], nextToken = tokens[cursor.index + 1];
                cursor.index++;
                if (nextToken === '=') {
                    top = stack.top();
                    if (top && top.type === 'Lookup') {
                        firstParent = stack.firstParent([
                            'Call',
                            'Helper',
                            'Hash'
                        ]);
                        if (firstParent.type === 'Call' || firstParent.type === 'Root') {
                            stack.popUntil(['Call']);
                            top = stack.top();
                            stack.replaceTopAndPush({
                                type: 'Helper',
                                method: top.type === 'Root' ? last(top.children) : top
                            });
                        }
                    }
                    firstParent = stack.firstParent([
                        'Call',
                        'Helper',
                        'Hashes'
                    ]);
                    var hash = {
                        type: 'Hash',
                        prop: token
                    };
                    if (firstParent.type === 'Hashes') {
                        stack.addToAndPush(['Hashes'], hash);
                    } else {
                        stack.addToAndPush([
                            'Helper',
                            'Call'
                        ], {
                            type: 'Hashes',
                            children: [hash]
                        });
                        stack.push(hash);
                    }
                    cursor.index++;
                } else if (literalRegExp.test(token)) {
                    convertToHelperIfTopIsLookup(stack);
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (firstParent.type === 'Hash' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else if (firstParent.type === 'Bracket' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    }
                } else if (keyRegExp.test(token)) {
                    lastToken = stack.topLastChild();
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket') && isAddingToExpression(token)) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Lookup',
                            root: lastToken,
                            key: token.slice(1)
                        });
                    } else if (firstParent.type === 'Bracket') {
                        if (!(firstParent.children && firstParent.children.length > 0)) {
                            stack.addToAndPush(['Bracket'], {
                                type: 'Lookup',
                                key: token
                            });
                        } else {
                            if (stack.first([
                                    'Helper',
                                    'Call',
                                    'Hash',
                                    'Arg'
                                ]).type === 'Helper' && token[0] !== '.') {
                                stack.addToAndPush(['Helper'], {
                                    type: 'Lookup',
                                    key: token
                                });
                            } else {
                                stack.replaceTopAndPush({
                                    type: 'Lookup',
                                    key: token.slice(1),
                                    root: firstParent
                                });
                            }
                        }
                    } else {
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash',
                            'Arg',
                            'Bracket'
                        ], {
                            type: 'Lookup',
                            key: token
                        });
                    }
                } else if (token === '~') {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addToAndPush([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Arg',
                        key: token
                    });
                } else if (token === '(') {
                    top = stack.top();
                    if (top.type === 'Lookup') {
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: convertToAtLookup(top)
                        });
                    } else {
                        throw new Error('Unable to understand expression ' + tokens.join(''));
                    }
                } else if (token === ')') {
                    stack.popTo(['Call']);
                } else if (token === ',') {
                    stack.popUntil(['Call']);
                } else if (token === '[') {
                    top = stack.top();
                    lastToken = stack.topLastChild();
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket')) {
                        stack.replaceTopAndPush({
                            type: 'Bracket',
                            root: lastToken
                        });
                    } else if (top.type === 'Lookup' || top.type === 'Bracket') {
                        var bracket = {
                            type: 'Bracket',
                            root: top
                        };
                        if (process.env.NODE_ENV !== 'production') {
                            canReflect.setKeyValue(bracket, canSymbol.for('can-stache.originalKey'), top.key);
                        }
                        stack.replaceTopAndPush(bracket);
                    } else if (top.type === 'Call') {
                        stack.addToAndPush(['Call'], { type: 'Bracket' });
                    } else if (top === ' ') {
                        stack.popUntil(['Lookup']);
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash'
                        ], { type: 'Bracket' });
                    } else {
                        stack.replaceTopAndPush({ type: 'Bracket' });
                    }
                } else if (token === ']') {
                    stack.pop();
                } else if (token === ' ') {
                    stack.push(token);
                }
            }
            return stack.root.children[0];
        }
    };
    module.exports = expression;
});
/*can-stache@4.10.0#src/mustache_core*/
define('can-stache@4.10.0#src/mustache_core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    'can-observation',
    'can-observation-recorder',
    './utils',
    './expression',
    'can-fragment',
    'can-dom-mutate',
    'can-symbol',
    'can-reflect',
    'can-log/dev/dev',
    'can-globals/document/document',
    'can-define-lazy-value'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var Observation = require('can-observation');
        var ObservationRecorder = require('can-observation-recorder');
        var utils = require('./utils');
        var expression = require('./expression');
        var frag = require('can-fragment');
        var domMutate = require('can-dom-mutate');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var dev = require('can-log/dev/dev');
        var getDocument = require('can-globals/document/document');
        var defineLazyValue = require('can-define-lazy-value');
        function HelperOptions(scope, nodeList, exprData, stringOnly) {
            this.metadata = { rendered: false };
            this.stringOnly = stringOnly;
            this.scope = scope;
            this.nodeList = nodeList;
            this.exprData = exprData;
        }
        defineLazyValue(HelperOptions.prototype, 'context', function () {
            return this.scope.peek('this');
        });
        var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g, k = function () {
            };
        var viewInsertSymbol = canSymbol.for('can.viewInsert');
        var core = {
            expression: expression,
            makeEvaluator: function (scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly) {
                if (mode === '^') {
                    var temp = truthyRenderer;
                    truthyRenderer = falseyRenderer;
                    falseyRenderer = temp;
                }
                var value, helperOptions = new HelperOptions(scope, nodeList, exprData, stringOnly);
                utils.createRenderers(helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                if (exprData instanceof expression.Call) {
                    value = exprData.value(scope, helperOptions);
                } else if (exprData instanceof expression.Bracket) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Lookup) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Helper && exprData.methodExpr instanceof expression.Bracket) {
                    value = exprData.methodExpr.value(scope, helperOptions);
                } else {
                    value = exprData.value(scope, helperOptions);
                    if (typeof value === 'function') {
                        return value;
                    }
                }
                if (!mode || helperOptions.metadata.rendered) {
                    return value;
                } else if (mode === '#' || mode === '^') {
                    return function () {
                        var finalValue = canReflect.getValue(value);
                        var result;
                        if (helperOptions.metadata.rendered) {
                            result = finalValue;
                        } else if (typeof finalValue !== 'string' && canReflect.isListLike(finalValue)) {
                            var isObserveList = canReflect.isObservableLike(finalValue) && canReflect.isListLike(finalValue);
                            if (canReflect.getKeyValue(finalValue, 'length')) {
                                if (stringOnly) {
                                    result = utils.getItemsStringContent(finalValue, isObserveList, helperOptions);
                                } else {
                                    result = frag(utils.getItemsFragContent(finalValue, helperOptions, scope));
                                }
                            } else {
                                result = helperOptions.inverse(scope);
                            }
                        } else {
                            result = finalValue ? helperOptions.fn(finalValue || scope) : helperOptions.inverse(scope);
                        }
                        helperOptions.metadata.rendered = false;
                        return result;
                    };
                } else {
                }
            },
            makeLiveBindingPartialRenderer: function (expressionString, state) {
                expressionString = expressionString.trim();
                var exprData, partialName = expressionString.split(/\s+/).shift();
                if (partialName !== expressionString) {
                    exprData = core.expression.parse(expressionString);
                }
                return function (scope, parentSectionNodeList) {
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var nodeList = [this];
                    nodeList.expression = '>' + partialName;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var partialFrag = new Observation(function () {
                        var localPartialName = partialName;
                        if (exprData && exprData.argExprs.length === 1) {
                            var newContext = canReflect.getValue(exprData.argExprs[0].value(scope));
                            if (typeof newContext === 'undefined') {
                                if (process.env.NODE_ENV !== 'production') {
                                    dev.warn('The context (' + exprData.argExprs[0].key + ') you passed into the' + 'partial (' + partialName + ') is not defined in the scope!');
                                }
                            } else {
                                scope = scope.add(newContext);
                            }
                        }
                        var partial = canReflect.getKeyValue(scope.templateContext.partials, localPartialName);
                        var renderer;
                        if (partial) {
                            renderer = function () {
                                return partial.render ? partial.render(scope, nodeList) : partial(scope);
                            };
                        } else {
                            var scopePartialName = scope.read(localPartialName, { isArgument: true }).value;
                            if (scopePartialName === null || !scopePartialName && localPartialName[0] === '*') {
                                return frag('');
                            }
                            if (scopePartialName) {
                                localPartialName = scopePartialName;
                            }
                            renderer = function () {
                                if (typeof localPartialName === 'function') {
                                    return localPartialName(scope, {}, nodeList);
                                } else {
                                    var domRenderer = core.getTemplateById(localPartialName);
                                    return domRenderer ? domRenderer(scope, {}, nodeList) : getDocument().createDocumentFragment();
                                }
                            };
                        }
                        var res = ObservationRecorder.ignore(renderer)();
                        return frag(res);
                    });
                    canReflect.setPriority(partialFrag, nodeList.nesting);
                    live.html(this, partialFrag, this.parentNode, nodeList);
                };
            },
            makeStringBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString), fullExpression = mode + expressionString;
                var branchRenderer = function branchRenderer(scope, truthyRenderer, falseyRenderer) {
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var evaluator = scope.__cache[fullExpression];
                    if (mode || !evaluator) {
                        evaluator = makeEvaluator(scope, null, mode, exprData, truthyRenderer, falseyRenderer, true);
                        if (!mode) {
                            scope.__cache[fullExpression] = evaluator;
                        }
                    }
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')], res;
                    if (gotObservableValue) {
                        res = canReflect.getValue(evaluator);
                    } else {
                        res = evaluator();
                    }
                    return res == null ? '' : '' + res;
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            makeLiveBindingBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString);
                if (!(exprData instanceof expression.Helper) && !(exprData instanceof expression.Call) && !(exprData instanceof expression.Bracket) && !(exprData instanceof expression.Lookup)) {
                    exprData = new expression.Helper(exprData, [], {});
                }
                var branchRenderer = function branchRenderer(scope, parentSectionNodeList, truthyRenderer, falseyRenderer) {
                    var stringOnly = state.tag;
                    if (process.env.NODE_ENV !== 'production') {
                        scope.set('scope.filename', state.filename);
                        scope.set('scope.lineNumber', state.lineNo);
                    }
                    var nodeList = [this];
                    nodeList.expression = expressionString;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var evaluator = makeEvaluator(scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly);
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')];
                    var observable;
                    if (gotObservableValue) {
                        observable = evaluator;
                    } else {
                        if (process.env.NODE_ENV !== 'production') {
                            Object.defineProperty(evaluator, 'name', { value: '{{' + (mode || '') + expressionString + '}}' });
                        }
                        observable = new Observation(evaluator, null, { isObservable: false });
                    }
                    if (canReflect.setPriority(observable, nodeList.nesting) === false) {
                        throw new Error('can-stache unable to set priority on observable');
                    }
                    canReflect.onValue(observable, k);
                    var value = canReflect.getValue(observable);
                    if (typeof value === 'function' && !(exprData instanceof expression.Lookup)) {
                        ObservationRecorder.ignore(value)(this);
                    } else if (canReflect.valueHasDependencies(observable)) {
                        if (state.attr) {
                            live.attr(this, state.attr, observable);
                        } else if (state.tag) {
                            live.attrs(this, observable);
                        } else if (state.text && typeof value !== 'object') {
                            live.text(this, observable, this.parentNode, nodeList);
                        } else {
                            live.html(this, observable, this.parentNode, { nodeList: nodeList });
                        }
                    } else {
                        if (state.attr) {
                            domMutate.setAttribute(this, state.attr, value);
                        } else if (state.tag) {
                            live.attrs(this, value);
                        } else if (state.text && typeof value === 'string') {
                            this.nodeValue = value;
                        } else if (value != null) {
                            if (typeof value[viewInsertSymbol] === 'function') {
                                var insert = value[viewInsertSymbol]({ nodeList: nodeList });
                                var oldNodes = nodeLists.update(nodeList, [insert]);
                                nodeLists.replace(oldNodes, insert);
                            } else {
                                nodeLists.replace([this], frag(value, this.ownerDocument));
                            }
                        }
                    }
                    canReflect.offValue(observable, k);
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            splitModeFromExpression: function (expression, state) {
                expression = expression.trim();
                var mode = expression.charAt(0);
                if ('#/{&^>!<'.indexOf(mode) >= 0) {
                    expression = expression.substr(1).trim();
                } else {
                    mode = null;
                }
                if (mode === '{' && state.node) {
                    mode = null;
                }
                return {
                    mode: mode,
                    expression: expression
                };
            },
            cleanLineEndings: function (template) {
                return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
                    spaceAfter = spaceAfter || '';
                    returnBefore = returnBefore || '';
                    spaceBefore = spaceBefore || '';
                    var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
                    if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                        return whole;
                    } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                        spaceBefore = returnBefore + spaceBefore && ' ';
                        return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
                    } else {
                        return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
                    }
                });
            },
            cleanWhitespaceControl: function (template) {
                return template.replace(mustacheWhitespaceRegExp, function (whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter, matchIndex) {
                    if (controlBefore === '-') {
                        spaceBefore = '';
                    }
                    if (controlAfter === '-') {
                        spaceAfter = '';
                    }
                    return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
                });
            },
            getTemplateById: function () {
            }
        };
        var makeEvaluator = core.makeEvaluator, splitModeFromExpression = core.splitModeFromExpression;
        module.exports = core;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#base-url/base-url*/
define('can-globals@1.2.0#base-url/base-url', [
    'require',
    'exports',
    'module',
    '../can-globals-instance',
    '../global/global',
    '../document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('../can-globals-instance');
        require('../global/global');
        require('../document/document');
        globals.define('base-url', function () {
            var global = globals.getKeyValue('global');
            var domDocument = globals.getKeyValue('document');
            if (domDocument && 'baseURI' in domDocument) {
                return domDocument.baseURI;
            } else if (global.location) {
                var href = global.location.href;
                var lastSlash = href.lastIndexOf('/');
                return lastSlash !== -1 ? href.substr(0, lastSlash) : href;
            } else if (typeof process !== 'undefined') {
                return process.cwd();
            }
        });
        module.exports = globals.makeExport('base-url');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-parse-uri@1.2.0#can-parse-uri*/
define('can-parse-uri@1.2.0#can-parse-uri', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.parseURI = function (url) {
        var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
        return m ? {
            href: m[0] || '',
            protocol: m[1] || '',
            authority: m[2] || '',
            host: m[3] || '',
            hostname: m[4] || '',
            port: m[5] || '',
            pathname: m[6] || '',
            search: m[7] || '',
            hash: m[8] || ''
        } : null;
    };
});
/*can-join-uris@1.2.0#can-join-uris*/
define('can-join-uris@1.2.0#can-join-uris', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-parse-uri'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var parseURI = require('can-parse-uri');
    module.exports = namespace.joinURIs = function (base, href) {
        function removeDotSegments(input) {
            var output = [];
            input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                if (p === '/..') {
                    output.pop();
                } else {
                    output.push(p);
                }
            });
            return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
        }
        href = parseURI(href || '');
        base = parseURI(base || '');
        return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
    };
});
/*can-stache@4.10.0#helpers/-debugger*/
define('can-stache@4.10.0#helpers/-debugger', [
    'require',
    'exports',
    'module',
    'can-log',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canLog = require('can-log');
    function noop() {
    }
    var resolveValue = noop;
    var evaluateArgs = noop;
    var __testing = {};
    if (process.env.NODE_ENV !== 'production') {
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        __testing = { allowDebugger: true };
        resolveValue = function (value) {
            if (value && value[canSymbol.for('can.getValue')]) {
                return canReflect.getValue(value);
            }
            return value;
        };
        evaluateArgs = function (left, right) {
            switch (arguments.length) {
            case 0:
                return true;
            case 1:
                return !!resolveValue(left);
            case 2:
                return resolveValue(left) === resolveValue(right);
            default:
                canLog.log([
                    'Usage:',
                    '  {{debugger}}: break any time this helper is evaluated',
                    '  {{debugger condition}}: break when `condition` is truthy',
                    '  {{debugger left right}}: break when `left` === `right`'
                ].join('\n'));
                throw new Error('{{debugger}} must have less than three arguments');
            }
        };
    }
    function debuggerHelper(left, right) {
        if (process.env.NODE_ENV !== 'production') {
            var shouldBreak = evaluateArgs.apply(null, Array.prototype.slice.call(arguments, 0, -1));
            if (!shouldBreak) {
                return;
            }
            var options = arguments[arguments.length - 1];
            var get = function (path) {
                return options.scope.get(path);
            };
            canLog.log('Use `get(<path>)` to debug this template');
            var allowDebugger = __testing.allowDebugger;
            if (allowDebugger) {
                debugger;
                return;
            }
        }
        canLog.warn('Forgotten {{debugger}} helper');
    }
    debuggerHelper.requiresOptionsArgument = true;
    module.exports = {
        helper: debuggerHelper,
        evaluateArgs: evaluateArgs,
        resolveValue: resolveValue,
        __testing: __testing
    };
});
/*can-stache@4.10.0#src/truthy-observable*/
define('can-stache@4.10.0#src/truthy-observable', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var canReflect = require('can-reflect');
    module.exports = function (observable) {
        return new Observation(function truthyObservation() {
            var val = canReflect.getValue(observable);
            return !!val;
        });
    };
});
/*can-symbol@1.6.1#can-symbol*/
define('can-symbol@1.6.1#can-symbol', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var namespace = require('can-namespace');
        var CanSymbol;
        if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
            CanSymbol = Symbol;
        } else {
            var symbolNum = 0;
            CanSymbol = function CanSymbolPolyfill(description) {
                var symbolValue = '@@symbol' + symbolNum++ + description;
                var symbol = {};
                Object.defineProperties(symbol, {
                    toString: {
                        value: function () {
                            return symbolValue;
                        }
                    }
                });
                return symbol;
            };
            var descriptionToSymbol = {};
            var symbolToDescription = {};
            CanSymbol.for = function (description) {
                var symbol = descriptionToSymbol[description];
                if (!symbol) {
                    symbol = descriptionToSymbol[description] = CanSymbol(description);
                    symbolToDescription[symbol] = description;
                }
                return symbol;
            };
            CanSymbol.keyFor = function (symbol) {
                return symbolToDescription[symbol];
            };
            [
                'hasInstance',
                'isConcatSpreadable',
                'iterator',
                'match',
                'prototype',
                'replace',
                'search',
                'species',
                'split',
                'toPrimitive',
                'toStringTag',
                'unscopables'
            ].forEach(function (name) {
                CanSymbol[name] = CanSymbol('Symbol.' + name);
            });
        }
        [
            'isMapLike',
            'isListLike',
            'isValueLike',
            'isFunctionLike',
            'getOwnKeys',
            'getOwnKeyDescriptor',
            'proto',
            'getOwnEnumerableKeys',
            'hasOwnKey',
            'hasKey',
            'size',
            'getName',
            'getIdentity',
            'assignDeep',
            'updateDeep',
            'getValue',
            'setValue',
            'getKeyValue',
            'setKeyValue',
            'updateValues',
            'addValue',
            'removeValues',
            'apply',
            'new',
            'onValue',
            'offValue',
            'onKeyValue',
            'offKeyValue',
            'getKeyDependencies',
            'getValueDependencies',
            'keyHasDependencies',
            'valueHasDependencies',
            'onKeys',
            'onKeysAdded',
            'onKeysRemoved',
            'onPatches'
        ].forEach(function (name) {
            CanSymbol.for('can.' + name);
        });
        module.exports = namespace.Symbol = CanSymbol;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.10.0#helpers/core*/
define('can-stache@4.10.0#helpers/core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    '../src/utils',
    'can-globals/base-url/base-url',
    'can-join-uris',
    'can-assign',
    'can-log/dev/dev',
    'can-reflect',
    './-debugger',
    '../src/key-observable',
    'can-observation',
    '../src/truthy-observable',
    'can-stache-helpers',
    'can-dom-data',
    'can-dom-data-state'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var utils = require('../src/utils');
        var getBaseURL = require('can-globals/base-url/base-url');
        var joinURIs = require('can-join-uris');
        var assign = require('can-assign');
        var dev = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var debuggerHelper = require('./-debugger').helper;
        var KeyObservable = require('../src/key-observable');
        var Observation = require('can-observation');
        var TruthyObservable = require('../src/truthy-observable');
        var helpers = require('can-stache-helpers');
        var domData = require('can-dom-data');
        var domDataState = require('can-dom-data-state');
        var looksLikeOptions = function (options) {
            return options && typeof options.fn === 'function' && typeof options.inverse === 'function';
        };
        var resolve = function (value) {
            if (value && canReflect.isValueLike(value)) {
                return canReflect.getValue(value);
            } else {
                return value;
            }
        };
        var resolveHash = function (hash) {
            var params = {};
            for (var prop in hash) {
                params[prop] = resolve(hash[prop]);
            }
            return params;
        };
        var bindAndRead = function (value) {
            if (value && canReflect.isValueLike(value)) {
                Observation.temporarilyBind(value);
                return canReflect.getValue(value);
            } else {
                return value;
            }
        };
        var eachHelper = function (items) {
            var args = [].slice.call(arguments), options = args.pop(), hashExprs = options.exprData.hashExprs, resolved = bindAndRead(items), hashOptions, aliases;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            if ((canReflect.isObservableLike(resolved) && canReflect.isListLike(resolved) || canReflect.isListLike(resolved) && canReflect.isValueLike(items)) && !options.stringOnly) {
                options.metadata.rendered = true;
                return function (el) {
                    var nodeList = [el];
                    nodeList.expression = 'live.list';
                    nodeLists.register(nodeList, null, options.nodeList, true);
                    nodeLists.update(options.nodeList, [el]);
                    var cb = function (item, index, parentNodeList) {
                        var aliases = {};
                        if (canReflect.size(hashOptions) > 0) {
                            if (hashOptions.value) {
                                aliases[hashOptions.value] = item;
                            }
                            if (hashOptions.index) {
                                aliases[hashOptions.index] = index;
                            }
                        }
                        return options.fn(options.scope.add(aliases, { notContext: true }).add({ index: index }, { special: true }).add(item), options.options, parentNodeList);
                    };
                    live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                        return options.inverse(options.scope.add(list), options.options, parentNodeList);
                    });
                };
            }
            var expr = resolve(items), result;
            if (!!expr && canReflect.isListLike(expr)) {
                result = utils.getItemsFragContent(expr, options, options.scope);
                return options.stringOnly ? result.join('') : result;
            } else if (canReflect.isObservableLike(expr) && canReflect.isMapLike(expr) || expr instanceof Object) {
                result = [];
                canReflect.each(expr, function (val, key) {
                    var value = new KeyObservable(expr, key);
                    aliases = {};
                    if (canReflect.size(hashOptions) > 0) {
                        if (hashOptions.value) {
                            aliases[hashOptions.value] = value;
                        }
                        if (hashOptions.key) {
                            aliases[hashOptions.key] = key;
                        }
                    }
                    result.push(options.fn(options.scope.add(aliases, { notContext: true }).add({ key: key }, { special: true }).add(value)));
                });
                return options.stringOnly ? result.join('') : result;
            }
        };
        eachHelper.isLiveBound = true;
        eachHelper.requiresOptionsArgument = true;
        eachHelper.ignoreArgLookup = function ignoreArgLookup(index) {
            return index === 1;
        };
        var indexHelper = function (offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.peek('scope.index');
            return '' + ((typeof index === 'function' ? index() : index) + offset);
        };
        indexHelper.requiresOptionsArgument = true;
        var ifHelper = function (expr, options) {
            var value;
            if (expr && canReflect.isValueLike(expr)) {
                value = canReflect.getValue(new TruthyObservable(expr));
            } else {
                value = !!resolve(expr);
            }
            if (value) {
                return options.fn(options.scope || this);
            } else {
                return options.inverse(options.scope || this);
            }
        };
        ifHelper.requiresOptionsArgument = true;
        var isHelper = function () {
            var lastValue, curValue, options = arguments[arguments.length - 1];
            if (arguments.length <= 2) {
                return options.inverse();
            }
            var args = arguments;
            function isHelper() {
                for (var i = 0; i < args.length - 1; i++) {
                    curValue = resolve(args[i]);
                    curValue = typeof curValue === 'function' ? curValue() : curValue;
                    if (i > 0) {
                        if (curValue !== lastValue) {
                            return false;
                        }
                    }
                    lastValue = curValue;
                }
                return true;
            }
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(isHelper, 'name', {
                    value: 'is(' + [].slice.call(args, 0, 2).map(function (arg) {
                        return canReflect.getName(arg);
                    }).join(',') + ')'
                });
            }
            var callFn = new Observation(isHelper);
            return callFn.get() ? options.fn() : options.inverse();
        };
        isHelper.requiresOptionsArgument = true;
        var unlessHelper = function (expr, options) {
            return ifHelper.apply(this, [
                expr,
                assign(assign({}, options), {
                    fn: options.inverse,
                    inverse: options.fn
                })
            ]);
        };
        unlessHelper.requiresOptionsArgument = true;
        var withHelper = function (expr, options) {
            var ctx = expr;
            if (!options) {
                options = expr;
                expr = true;
                ctx = options.hash;
            } else {
                expr = resolve(expr);
                if (options.hash && canReflect.size(options.hash) > 0) {
                    ctx = options.scope.add(options.hash, { notContext: true }).add(ctx);
                }
            }
            return options.fn(ctx || {});
        };
        withHelper.requiresOptionsArgument = true;
        var dataHelper = function (attr, value) {
            var data = (looksLikeOptions(value) ? value.context : value) || this;
            return function setData(el) {
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('The {{data}} helper has been deprecated; use {{domData}} instead: https://canjs.com/doc/can-stache.helpers.domData.html');
                }
                domDataState.set.call(el, attr, data);
            };
        };
        var domDataHelper = function (attr, value) {
            var data = (looksLikeOptions(value) ? value.context : value) || this;
            return function setDomData(el) {
                domData.set(el, attr, data);
            };
        };
        var switchHelper = function (expression, options) {
            resolve(expression);
            var found = false;
            var caseHelper = function (value, options) {
                if (!found && resolve(expression) === resolve(value)) {
                    found = true;
                    return options.fn(options.scope.peek('this') || this);
                }
            };
            caseHelper.requiresOptionsArgument = true;
            var defaultHelper = function (options) {
                if (!found) {
                    return options ? options.scope.peek('this') : true;
                }
            };
            defaultHelper.requiresOptionsArgument = true;
            canReflect.assignSymbols(defaultHelper, {
                'can.isValueLike': true,
                'can.isFunctionLike': false,
                'can.getValue': function () {
                    return this(options);
                }
            });
            var newScope = options.scope.add({
                case: caseHelper,
                default: defaultHelper
            }, { notContext: true });
            return options.fn(newScope, options);
        };
        switchHelper.requiresOptionsArgument = true;
        var joinBaseHelper = function (firstExpr) {
            var args = [].slice.call(arguments);
            var options = args.pop();
            var moduleReference = args.map(function (expr) {
                var value = resolve(expr);
                return typeof value === 'function' ? value() : value;
            }).join('');
            var templateModule = canReflect.getKeyValue(options.scope.templateContext.helpers, 'module');
            var parentAddress = templateModule ? templateModule.uri : undefined;
            var isRelative = moduleReference[0] === '.';
            if (isRelative && parentAddress) {
                return joinURIs(parentAddress, moduleReference);
            } else {
                var baseURL = typeof System !== 'undefined' && (System.renderingBaseURL || System.baseURL) || getBaseURL();
                if (moduleReference[0] !== '/' && baseURL[baseURL.length - 1] !== '/') {
                    baseURL += '/';
                }
                return joinURIs(baseURL, moduleReference);
            }
        };
        joinBaseHelper.requiresOptionsArgument = true;
        var builtInHelpers = {
            'debugger': debuggerHelper,
            each: eachHelper,
            eachOf: eachHelper,
            index: indexHelper,
            'if': ifHelper,
            is: isHelper,
            eq: isHelper,
            unless: unlessHelper,
            'with': withHelper,
            console: console,
            data: dataHelper,
            domData: domDataHelper,
            'switch': switchHelper,
            joinBase: joinBaseHelper
        };
        var addBuiltInHelpers = function () {
            canReflect.each(builtInHelpers, function (helper, helperName) {
                helpers[helperName] = helper;
            });
        };
        addBuiltInHelpers();
        var registerHelper = function (name, callback) {
            if (process.env.NODE_ENV !== 'production') {
                if (helpers[name]) {
                    dev.warn('The helper ' + name + ' has already been registered.');
                }
            }
            callback.requiresOptionsArgument = true;
            helpers[name] = callback;
        };
        var registerHelpers = function (helpers) {
            var name, callback;
            for (name in helpers) {
                callback = helpers[name];
                registerHelper(name, makeSimpleHelper(callback));
            }
        };
        var makeSimpleHelper = function (fn) {
            return function () {
                var realArgs = [];
                canReflect.eachIndex(arguments, function (val) {
                    while (val && val.isComputed) {
                        val = val();
                    }
                    realArgs.push(val);
                });
                return fn.apply(this, realArgs);
            };
        };
        module.exports = {
            registerHelper: registerHelper,
            addHelper: function (name, callback) {
                if (typeof name === 'object') {
                    return registerHelpers(name);
                }
                return registerHelper(name, makeSimpleHelper(callback));
            },
            addLiveHelper: function (name, callback) {
                callback.isLiveBound = true;
                return registerHelper(name, callback);
            },
            getHelper: function (name, scope) {
                var helper = scope && scope.getHelper(name);
                if (!helper) {
                    helper = helpers[name];
                }
                return helper;
            },
            resolve: resolve,
            resolveHash: resolveHash,
            looksLikeOptions: looksLikeOptions,
            __resetHelpers: function () {
                for (var helper in helpers) {
                    delete helpers[helper];
                }
                addBuiltInHelpers();
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.10.0#helpers/converter*/
define('can-stache@4.10.0#helpers/converter', [
    'require',
    'exports',
    'module',
    './core',
    '../src/set-identifier',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var helpers = require('./core');
    var SetIdentifier = require('../src/set-identifier');
    var canReflect = require('can-reflect');
    function makeConverter(getterSetter) {
        getterSetter = getterSetter || {};
        return function (newVal, source) {
            var args = canReflect.toArray(arguments);
            if (newVal instanceof SetIdentifier) {
                return typeof getterSetter.set === 'function' ? getterSetter.set.apply(this, [newVal.value].concat(args.slice(1))) : source(newVal.value);
            } else {
                return typeof getterSetter.get === 'function' ? getterSetter.get.apply(this, args) : args[0];
            }
        };
    }
    var converterPackages = new WeakMap();
    helpers.addConverter = function (name, getterSetter) {
        if (typeof name === 'object') {
            if (!converterPackages.has(name)) {
                converterPackages.set(name, true);
                canReflect.eachKey(name, function (getterSetter, name) {
                    helpers.addConverter(name, getterSetter);
                });
            }
            return;
        }
        var helper = makeConverter(getterSetter);
        helper.isLiveBound = true;
        helpers.registerHelper(name, helper);
    };
    helpers.registerConverter = function (name, getterSetter) {
        helpers.registerHelper(name, makeConverter(getterSetter));
    };
    module.exports = helpers;
});
/*can-stache-ast@1.0.0#controls*/
define('can-stache-ast@1.0.0#controls', function (require, exports, module) {
    var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g;
    function splitModeFromExpression(expression, state) {
        expression = expression.trim();
        var mode = expression.charAt(0);
        if ('#/{&^>!<'.indexOf(mode) >= 0) {
            expression = expression.substr(1).trim();
        } else {
            mode = null;
        }
        if (mode === '{' && state.node) {
            mode = null;
        }
        return {
            mode: mode,
            expression: expression
        };
    }
    function cleanLineEndings(template) {
        return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
            spaceAfter = spaceAfter || '';
            returnBefore = returnBefore || '';
            spaceBefore = spaceBefore || '';
            var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
            if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                return whole;
            } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                spaceBefore = returnBefore + spaceBefore && ' ';
                return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
            } else {
                return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
            }
        });
    }
    function whiteSpaceReplacement(whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter) {
        if (controlBefore === '-') {
            spaceBefore = '';
        }
        if (controlAfter === '-') {
            spaceAfter = '';
        }
        return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
    }
    function cleanWhitespaceControl(template) {
        return template.replace(mustacheWhitespaceRegExp, whiteSpaceReplacement);
    }
    exports.cleanLineEndings = cleanLineEndings;
    exports.cleanWhitespaceControl = cleanWhitespaceControl;
});
/*can-stache-ast@1.0.0#can-stache-ast*/
define('can-stache-ast@1.0.0#can-stache-ast', [
    'require',
    'exports',
    'module',
    './controls',
    'can-view-parser'
], function (require, exports, module) {
    var controls = require('./controls');
    var parser = require('can-view-parser');
    exports.parse = function (filename, source) {
        if (arguments.length === 1) {
            source = arguments[0];
            filename = undefined;
        }
        var template = source;
        template = controls.cleanWhitespaceControl(template);
        template = controls.cleanLineEndings(template);
        var imports = [], dynamicImports = [], importDeclarations = [], ases = {}, inImport = false, inFrom = false, inAs = false, isUnary = false, importIsDynamic = false, currentAs = '', currentFrom = '';
        function processImport(line) {
            if (currentAs) {
                ases[currentAs] = currentFrom;
                currentAs = '';
            }
            if (importIsDynamic) {
                dynamicImports.push(currentFrom);
            } else {
                imports.push(currentFrom);
            }
            importDeclarations.push({
                specifier: currentFrom,
                loc: { line: line }
            });
        }
        var program = parser(template, {
            filename: filename,
            start: function (tagName, unary) {
                if (tagName === 'can-import') {
                    isUnary = unary;
                    importIsDynamic = false;
                    inImport = true;
                } else if (tagName === 'can-dynamic-import') {
                    isUnary = unary;
                    importIsDynamic = true;
                    inImport = true;
                } else if (inImport) {
                    importIsDynamic = true;
                    inImport = false;
                }
            },
            attrStart: function (attrName) {
                if (attrName === 'from') {
                    inFrom = true;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = true;
                }
            },
            attrEnd: function (attrName) {
                if (attrName === 'from') {
                    inFrom = false;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = false;
                }
            },
            attrValue: function (value) {
                if (inFrom && inImport) {
                    currentFrom = value;
                } else if (inAs && inImport) {
                    currentAs = value;
                }
            },
            end: function (tagName, unary, line) {
                if ((tagName === 'can-import' || tagName === 'can-dynamic-import') && isUnary) {
                    processImport(line);
                }
            },
            close: function (tagName, unary, line) {
                if (tagName === 'can-import' || tagName === 'can-dynamic-import') {
                    processImport(line);
                }
            },
            chars: function (text) {
                if (text.trim().length > 0) {
                    importIsDynamic = true;
                }
            },
            special: function () {
                importIsDynamic = true;
            }
        }, true);
        return {
            intermediate: program,
            program: program,
            imports: imports,
            dynamicImports: dynamicImports,
            importDeclarations: importDeclarations,
            ases: ases,
            exports: ases
        };
    };
});
/*can-import-module@1.2.0#can-import-module*/
define('can-import-module@1.2.0#can-import-module', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getGlobal = require('can-globals/global/global');
        var namespace = require('can-namespace');
        module.exports = namespace.import = function (moduleName, parentName) {
            return new Promise(function (resolve, reject) {
                try {
                    var global = getGlobal();
                    if (typeof global.System === 'object' && isFunction(global.System['import'])) {
                        global.System['import'](moduleName, { name: parentName }).then(resolve, reject);
                    } else if (global.define && global.define.amd) {
                        global.require([moduleName], function (value) {
                            resolve(value);
                        });
                    } else if (global.require) {
                        resolve(global.require(moduleName));
                    } else {
                        if (typeof stealRequire !== 'undefined') {
                            steal.import(moduleName, { name: parentName }).then(resolve, reject);
                        } else {
                            resolve();
                        }
                    }
                } catch (err) {
                    reject(err);
                }
            });
        };
        function isFunction(fn) {
            return typeof fn === 'function';
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.10.0#can-stache*/
define('can-stache@4.10.0#can-stache', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-view-callbacks',
    './src/html_section',
    './src/text_section',
    './src/mustache_core',
    './helpers/core',
    './helpers/converter',
    'can-stache-ast',
    './src/utils',
    'can-attribute-encoder',
    'can-log/dev/dev',
    'can-namespace',
    'can-globals/document/document',
    'can-assign',
    'can-import-module',
    'can-reflect',
    'can-view-scope',
    'can-view-scope/template-context',
    'can-observation-recorder',
    'can-view-target',
    'can-view-nodelist'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var parser = require('can-view-parser');
        var viewCallbacks = require('can-view-callbacks');
        var HTMLSectionBuilder = require('./src/html_section');
        var TextSectionBuilder = require('./src/text_section');
        var mustacheCore = require('./src/mustache_core');
        var mustacheHelpers = require('./helpers/core');
        require('./helpers/converter');
        var getIntermediateAndImports = require('can-stache-ast').parse;
        var utils = require('./src/utils');
        var makeRendererConvertScopes = utils.makeRendererConvertScopes;
        var last = utils.last;
        var attributeEncoder = require('can-attribute-encoder');
        var dev = require('can-log/dev/dev');
        var namespace = require('can-namespace');
        var DOCUMENT = require('can-globals/document/document');
        var assign = require('can-assign');
        var importer = require('can-import-module');
        var canReflect = require('can-reflect');
        var Scope = require('can-view-scope');
        var TemplateContext = require('can-view-scope/template-context');
        var ObservationRecorder = require('can-observation-recorder');
        require('can-view-target');
        require('can-view-nodelist');
        if (!viewCallbacks.tag('content')) {
            viewCallbacks.tag('content', function (el, tagData) {
                return tagData.scope;
            });
        }
        var wrappedAttrPattern = /[{(].*[)}]/;
        var colonWrappedAttrPattern = /^on:|(:to|:from|:bind)$|.*:to:on:.*/;
        var svgNamespace = 'http://www.w3.org/2000/svg';
        var namespaces = {
                'svg': svgNamespace,
                'g': svgNamespace
            }, textContentOnlyTag = {
                style: true,
                script: true
            };
        function stache(filename, template) {
            if (arguments.length === 1) {
                template = arguments[0];
                filename = undefined;
            }
            var inlinePartials = {};
            if (typeof template === 'string') {
                template = mustacheCore.cleanWhitespaceControl(template);
                template = mustacheCore.cleanLineEndings(template);
            }
            var section = new HTMLSectionBuilder(filename), state = {
                    node: null,
                    attr: null,
                    sectionElementStack: [],
                    text: false,
                    namespaceStack: [],
                    textContentOnly: null
                }, makeRendererAndUpdateSection = function (section, mode, stache, lineNo) {
                    if (mode === '>') {
                        section.add(mustacheCore.makeLiveBindingPartialRenderer(stache, copyState({
                            filename: section.filename,
                            lineNo: lineNo
                        })));
                    } else if (mode === '/') {
                        var createdSection = section.last();
                        if (createdSection.startedWith === '<') {
                            inlinePartials[stache] = section.endSubSectionAndReturnRenderer();
                            section.removeCurrentNode();
                        } else {
                            section.endSection();
                        }
                        if (process.env.NODE_ENV !== 'production') {
                            if (section instanceof HTMLSectionBuilder) {
                                var last = state.sectionElementStack[state.sectionElementStack.length - 1];
                                if (last.tag && last.type === 'section' && stache !== '' && stache !== last.tag) {
                                    if (filename) {
                                        dev.warn(filename + ':' + lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                    } else {
                                        dev.warn(lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                    }
                                }
                            }
                        }
                        if (section instanceof HTMLSectionBuilder) {
                            state.sectionElementStack.pop();
                        }
                    } else if (mode === 'else') {
                        section.inverse();
                    } else {
                        var makeRenderer = section instanceof HTMLSectionBuilder ? mustacheCore.makeLiveBindingBranchRenderer : mustacheCore.makeStringBranchRenderer;
                        if (mode === '{' || mode === '&') {
                            section.add(makeRenderer(null, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^' || mode === '<') {
                            var renderer = makeRenderer(mode, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            }));
                            var sectionItem = { type: 'section' };
                            section.startSection(renderer);
                            section.last().startedWith = mode;
                            if (section instanceof HTMLSectionBuilder) {
                                if (process.env.NODE_ENV !== 'production') {
                                    var tag = typeof renderer.exprData.closingTag === 'function' ? renderer.exprData.closingTag() : '';
                                    sectionItem.tag = tag;
                                }
                                state.sectionElementStack.push(sectionItem);
                            }
                        } else {
                            section.add(makeRenderer(null, stache, copyState({
                                text: true,
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        }
                    }
                }, isDirectlyNested = function () {
                    var lastElement = state.sectionElementStack[state.sectionElementStack.length - 1];
                    return state.sectionElementStack.length ? lastElement.type === 'section' || lastElement.type === 'custom' : true;
                }, copyState = function (overwrites) {
                    var cur = {
                        tag: state.node && state.node.tag,
                        attr: state.attr && state.attr.name,
                        directlyNested: isDirectlyNested(),
                        textContentOnly: !!state.textContentOnly
                    };
                    return overwrites ? assign(cur, overwrites) : cur;
                }, addAttributesCallback = function (node, callback) {
                    if (!node.attributes) {
                        node.attributes = [];
                    }
                    node.attributes.unshift(callback);
                };
            parser(template, {
                filename: filename,
                start: function (tagName, unary, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace && !unary) {
                        state.namespaceStack.push(matchedNamespace);
                    }
                    state.node = {
                        tag: tagName,
                        children: [],
                        namespace: matchedNamespace || last(state.namespaceStack)
                    };
                },
                end: function (tagName, unary, lineNo) {
                    var isCustomTag = viewCallbacks.tag(tagName);
                    var directlyNested = isDirectlyNested();
                    if (unary) {
                        section.add(state.node);
                        if (isCustomTag) {
                            addAttributesCallback(state.node, function (scope, parentNodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: null,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    directlyNested: directlyNested
                                });
                            });
                        }
                    } else {
                        section.push(state.node);
                        state.sectionElementStack.push({
                            type: isCustomTag ? 'custom' : null,
                            tag: isCustomTag ? null : tagName,
                            templates: {},
                            directlyNested: directlyNested
                        });
                        if (isCustomTag) {
                            section.startSubSection();
                        } else if (textContentOnlyTag[tagName]) {
                            state.textContentOnly = new TextSectionBuilder();
                        }
                    }
                    state.node = null;
                },
                close: function (tagName, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace) {
                        state.namespaceStack.pop();
                    }
                    var isCustomTag = viewCallbacks.tag(tagName), renderer;
                    if (isCustomTag) {
                        renderer = section.endSubSectionAndReturnRenderer();
                    }
                    if (textContentOnlyTag[tagName]) {
                        section.last().add(state.textContentOnly.compile(copyState()));
                        state.textContentOnly = null;
                    }
                    var oldNode = section.pop();
                    if (isCustomTag) {
                        if (tagName === 'can-template') {
                            var parent = state.sectionElementStack[state.sectionElementStack.length - 2];
                            if (renderer) {
                                parent.templates[oldNode.attrs.name] = makeRendererConvertScopes(renderer);
                            }
                            section.removeCurrentNode();
                        } else {
                            var current = state.sectionElementStack[state.sectionElementStack.length - 1];
                            addAttributesCallback(oldNode, function (scope, parentNodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: renderer ? makeRendererConvertScopes(renderer) : renderer,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    templates: current.templates,
                                    directlyNested: current.directlyNested
                                });
                            });
                        }
                    }
                    state.sectionElementStack.pop();
                },
                attrStart: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add(attrName + '="');
                    } else {
                        state.attr = {
                            name: attrName,
                            value: ''
                        };
                    }
                },
                attrEnd: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add('" ');
                    } else {
                        if (!state.node.attrs) {
                            state.node.attrs = {};
                        }
                        state.node.attrs[state.attr.name] = state.attr.section ? state.attr.section.compile(copyState()) : state.attr.value;
                        var attrCallback = viewCallbacks.attr(attrName);
                        if (process.env.NODE_ENV !== 'production') {
                            var decodedAttrName = attributeEncoder.decode(attrName);
                            var weirdAttribute = !!wrappedAttrPattern.test(decodedAttrName) || !!colonWrappedAttrPattern.test(decodedAttrName);
                            if (weirdAttribute && !attrCallback) {
                                dev.warn('unknown attribute binding ' + decodedAttrName + '. Is can-stache-bindings imported?');
                            }
                        }
                        if (attrCallback) {
                            if (!state.node.attributes) {
                                state.node.attributes = [];
                            }
                            state.node.attributes.push(function (scope, nodeList) {
                                if (process.env.NODE_ENV !== 'production') {
                                    scope.set('scope.lineNumber', lineNo);
                                }
                                attrCallback(this, {
                                    attributeName: attrName,
                                    scope: scope,
                                    nodeList: nodeList
                                });
                            });
                        }
                        state.attr = null;
                    }
                },
                attrValue: function (value, lineNo) {
                    var section = state.node.section || state.attr.section;
                    if (section) {
                        section.add(value);
                    } else {
                        state.attr.value += value;
                    }
                },
                chars: function (text, lineNo) {
                    (state.textContentOnly || section).add(text);
                },
                special: function (text, lineNo) {
                    var firstAndText = mustacheCore.splitModeFromExpression(text, state), mode = firstAndText.mode, expression = firstAndText.expression;
                    if (expression === 'else') {
                        var inverseSection;
                        if (state.attr && state.attr.section) {
                            inverseSection = state.attr.section;
                        } else if (state.node && state.node.section) {
                            inverseSection = state.node.section;
                        } else {
                            inverseSection = state.textContentOnly || section;
                        }
                        inverseSection.inverse();
                        return;
                    }
                    if (mode === '!') {
                        return;
                    }
                    if (state.node && state.node.section) {
                        makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        if (state.node.section.subSectionDepth() === 0) {
                            state.node.attributes.push(state.node.section.compile(copyState()));
                            delete state.node.section;
                        }
                    } else if (state.attr) {
                        if (!state.attr.section) {
                            state.attr.section = new TextSectionBuilder();
                            if (state.attr.value) {
                                state.attr.section.add(state.attr.value);
                            }
                        }
                        makeRendererAndUpdateSection(state.attr.section, mode, expression, lineNo);
                    } else if (state.node) {
                        if (!state.node.attributes) {
                            state.node.attributes = [];
                        }
                        if (!mode) {
                            state.node.attributes.push(mustacheCore.makeLiveBindingBranchRenderer(null, expression, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^') {
                            if (!state.node.section) {
                                state.node.section = new TextSectionBuilder();
                            }
                            makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        } else {
                            throw new Error(mode + ' is currently not supported within a tag.');
                        }
                    } else {
                        makeRendererAndUpdateSection(state.textContentOnly || section, mode, expression, lineNo);
                    }
                },
                comment: function (text) {
                    section.add({ comment: text });
                },
                done: function (lineNo) {
                }
            });
            var renderer = section.compile();
            var scopifiedRenderer = ObservationRecorder.ignore(function (scope, options, nodeList) {
                if (nodeList === undefined && canReflect.isListLike(options)) {
                    nodeList = options;
                    options = undefined;
                }
                if (options && !options.helpers && !options.partials && !options.tags) {
                    options = { helpers: options };
                }
                canReflect.eachKey(options && options.helpers, function (helperValue) {
                    helperValue.requiresOptionsArgument = true;
                });
                var templateContext = new TemplateContext(options);
                canReflect.eachKey(inlinePartials, function (partial, partialName) {
                    canReflect.setKeyValue(templateContext.partials, partialName, partial);
                });
                canReflect.setKeyValue(templateContext, 'view', scopifiedRenderer);
                if (process.env.NODE_ENV !== 'production') {
                    canReflect.setKeyValue(templateContext, 'filename', section.filename);
                }
                if (!(scope instanceof Scope)) {
                    scope = new Scope(templateContext).add(scope);
                } else {
                    var templateContextScope = new Scope(templateContext);
                    templateContextScope._parent = scope._parent;
                    scope._parent = templateContextScope;
                }
                return renderer(scope, nodeList);
            });
            return scopifiedRenderer;
        }
        assign(stache, mustacheHelpers);
        stache.safeString = function (text) {
            return {
                toString: function () {
                    return text;
                }
            };
        };
        stache.async = function (source) {
            var iAi = getIntermediateAndImports(source);
            var importPromises = iAi.imports.map(function (moduleName) {
                return importer(moduleName);
            });
            return Promise.all(importPromises).then(function () {
                return stache(iAi.intermediate);
            });
        };
        var templates = {};
        stache.from = mustacheCore.getTemplateById = function (id) {
            if (!templates[id]) {
                var el = DOCUMENT().getElementById(id);
                if (el) {
                    templates[id] = stache('#' + id, el.innerHTML);
                }
            }
            return templates[id];
        };
        stache.registerPartial = function (id, partial) {
            templates[id] = typeof partial === 'string' ? stache(partial) : partial;
        };
        stache.addBindings = viewCallbacks.attrs;
        module.exports = namespace.stache = stache;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-model@4.0.1#can-view-model*/
define('can-view-model@4.0.1#can-view-model', [
    'require',
    'exports',
    'module',
    'can-simple-map',
    'can-namespace',
    'can-globals/document/document',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var SimpleMap = require('can-simple-map');
        var ns = require('can-namespace');
        var getDocument = require('can-globals/document/document');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var viewModelSymbol = canSymbol.for('can.viewModel');
        module.exports = ns.viewModel = function (el, attr, val) {
            if (typeof el === 'string') {
                el = getDocument().querySelector(el);
            } else if (canReflect.isListLike(el) && !el.nodeType) {
                el = el[0];
            }
            if (canReflect.isObservableLike(attr) && canReflect.isMapLike(attr)) {
                el[viewModelSymbol] = attr;
                return;
            }
            var scope = el[viewModelSymbol];
            if (!scope) {
                scope = new SimpleMap();
                el[viewModelSymbol] = scope;
            }
            switch (arguments.length) {
            case 0:
            case 1:
                return scope;
            case 2:
                return canReflect.getKeyValue(scope, attr);
            default:
                canReflect.setKeyValue(scope, attr, val);
                return el;
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.0.0#event*/
define('can-attribute-observable@1.0.0#event', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-dom-events',
    'can-dom-events/helpers/util'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var canEvent = {
        on: function on(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.addEventListener(this, eventName, handler, queue);
            } else {
                canReflect.onKeyValue(this, eventName, handler, queue);
            }
        },
        off: function off(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.removeEventListener(this, eventName, handler, queue);
            } else {
                canReflect.offKeyValue(this, eventName, handler, queue);
            }
        },
        one: function one(event, handler, queue) {
            var one = function () {
                canEvent.off.call(this, event, one, queue);
                return handler.apply(this, arguments);
            };
            canEvent.on.call(this, event, one, queue);
            return this;
        }
    };
    module.exports = canEvent;
});
/*can-attribute-observable@1.0.0#get-event-name*/
define('can-attribute-observable@1.0.0#get-event-name', [
    'require',
    'exports',
    'module',
    './behaviors'
], function (require, exports, module) {
    'use strict';
    var attr = require('./behaviors');
    var isRadioInput = function isRadioInput(el) {
        return el.nodeName.toLowerCase() === 'input' && el.type === 'radio';
    };
    var isValidProp = function isValidProp(prop, bindingData) {
        return prop === 'checked' && !bindingData.legacyBindings;
    };
    module.exports = function getEventName(el, prop, bindingData) {
        var event = 'change';
        if (isRadioInput(el) && isValidProp(prop, bindingData)) {
            event = 'can-attribute-observable-radiochange';
        }
        if (attr.findSpecialListener(prop)) {
            event = prop;
        }
        return event;
    };
});
/*can-event-dom-radiochange@2.2.0#can-event-dom-radiochange*/
define('can-event-dom-radiochange@2.2.0#can-event-dom-radiochange', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        function getRoot() {
            return getDocument().documentElement;
        }
        function findParentForm(el) {
            while (el) {
                if (el.nodeName === 'FORM') {
                    break;
                }
                el = el.parentNode;
            }
            return el;
        }
        function shouldReceiveEventFromRadio(source, dest) {
            var name = source.getAttribute('name');
            return name && name === dest.getAttribute('name') && findParentForm(source) === findParentForm(dest);
        }
        function isRadioInput(el) {
            return el.nodeName === 'INPUT' && el.type === 'radio';
        }
        function attachRootListener(domEvents, eventTypeTargets) {
            var root = getRoot();
            var newListener = function (event) {
                var target = event.target;
                if (!isRadioInput(target)) {
                    return;
                }
                for (var eventType in eventTypeTargets) {
                    var newEvent = { type: eventType };
                    var listeningNodes = eventTypeTargets[eventType];
                    listeningNodes.forEach(function (el) {
                        if (shouldReceiveEventFromRadio(target, el)) {
                            domEvents.dispatch(el, newEvent, false);
                        }
                    });
                }
            };
            domEvents.addEventListener(root, 'change', newListener);
            return newListener;
        }
        function detachRootListener(domEvents, listener) {
            var root = getRoot();
            domEvents.removeEventListener(root, 'change', listener);
        }
        var radioChangeEvent = {
            defaultEventType: 'radiochange',
            addEventListener: function (target, eventType, handler) {
                if (!isRadioInput(target)) {
                    throw new Error('Listeners for ' + eventType + ' must be radio inputs');
                }
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios = {};
                    if (!radioChangeEvent._rootListener) {
                        radioChangeEvent._rootListener = attachRootListener(this, eventTypeTrackedRadios);
                    }
                }
                var trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType] = new Set();
                }
                trackedRadios.add(target);
                target.addEventListener(eventType, handler);
            },
            removeEventListener: function (target, eventType, handler) {
                target.removeEventListener(eventType, handler);
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    return;
                }
                var trackedRadios = eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    return;
                }
                trackedRadios.delete(target);
                if (trackedRadios.size === 0) {
                    delete eventTypeTrackedRadios[eventType];
                    for (var key in eventTypeTrackedRadios) {
                        if (eventTypeTrackedRadios.hasOwnProperty(key)) {
                            return;
                        }
                    }
                    delete radioChangeEvent._eventTypeTrackedRadios;
                    detachRootListener(this, radioChangeEvent._rootListener);
                    delete radioChangeEvent._rootListener;
                }
            }
        };
        module.exports = namespace.domEventRadioChange = radioChangeEvent;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.0.0#can-attribute-observable*/
define('can-attribute-observable@1.0.0#can-attribute-observable', [
    'require',
    'exports',
    'module',
    'can-queues',
    './event',
    'can-reflect',
    'can-observation',
    './behaviors',
    './get-event-name',
    'can-reflect-dependencies',
    'can-observation-recorder',
    'can-simple-observable/settable/settable',
    'can-dom-events',
    'can-event-dom-radiochange'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var queues = require('can-queues');
        var canEvent = require('./event');
        var canReflect = require('can-reflect');
        var Observation = require('can-observation');
        var attr = require('./behaviors');
        var getEventName = require('./get-event-name');
        var canReflectDeps = require('can-reflect-dependencies');
        var ObservationRecorder = require('can-observation-recorder');
        var SettableObservable = require('can-simple-observable/settable/settable');
        var domEvents = require('can-dom-events');
        var radioChangeEvent = require('can-event-dom-radiochange');
        var internalRadioChangeEventType = 'can-attribute-observable-radiochange';
        domEvents.addEvent(radioChangeEvent, internalRadioChangeEventType);
        var isSelect = function isSelect(el) {
            return el.nodeName.toLowerCase() === 'select';
        };
        var isMultipleSelect = function isMultipleSelect(el, prop) {
            return isSelect(el) && prop === 'value' && el.multiple;
        };
        var slice = Array.prototype.slice;
        function canUtilAEL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.addEventListener.apply(null, args);
        }
        function canUtilREL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.removeEventListener.apply(null, args);
        }
        function AttributeObservable(el, prop, bindingData, event) {
            this.el = el;
            this.bound = false;
            this.bindingData = bindingData;
            this.prop = isMultipleSelect(el, prop) ? 'values' : prop;
            this.event = event || getEventName(el, prop, bindingData);
            this.handler = this.handler.bind(this);
            if (process.env.NODE_ENV !== 'production') {
                canReflectDeps.addMutatedBy(this.el, this.prop, this);
                canReflect.assignSymbols(this, {
                    'can.getName': function getName() {
                        return 'AttributeObservable<' + el.nodeName.toLowerCase() + '.' + this.prop + '>';
                    }
                });
            }
        }
        AttributeObservable.prototype = Object.create(SettableObservable.prototype);
        Object.assign(AttributeObservable.prototype, {
            constructor: AttributeObservable,
            get: function get() {
                if (ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                return attr.get(this.el, this.prop);
            },
            set: function set(newVal) {
                attr.setAttrOrProp(this.el, this.prop, newVal);
                this.value = newVal;
                return newVal;
            },
            handler: function handler(newVal, event) {
                var old = this.value;
                var queuesArgs = [];
                this.value = attr.get(this.el, this.prop);
                if (this.value !== old) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (typeof this._log === 'function') {
                            this._log(old, newVal);
                        }
                    }
                    queuesArgs = [
                        this.handlers.getNode([]),
                        this,
                        [
                            newVal,
                            old
                        ]
                    ];
                    if (process.env.NODE_ENV !== 'production') {
                        queuesArgs = [
                            this.handlers.getNode([]),
                            this,
                            [
                                newVal,
                                old
                            ],
                            null,
                            [
                                this.el,
                                this.prop,
                                'changed to',
                                newVal,
                                'from',
                                old,
                                'by',
                                event
                            ]
                        ];
                    }
                    queues.enqueueByQueue.apply(queues, queuesArgs);
                }
            },
            onBound: function onBound() {
                var observable = this;
                observable.bound = true;
                observable._handler = function (event) {
                    observable.handler(attr.get(observable.el, observable.prop), event);
                };
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.on.call(observable.el, 'change', observable._handler);
                }
                var specialBinding = attr.findSpecialListener(observable.prop);
                if (specialBinding) {
                    observable._specialDisposal = specialBinding.call(observable.el, observable.prop, observable._handler, canUtilAEL);
                }
                canEvent.on.call(observable.el, observable.event, observable._handler);
                this.value = attr.get(this.el, this.prop);
            },
            onUnbound: function onUnbound() {
                var observable = this;
                observable.bound = false;
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.off.call(observable.el, 'change', observable._handler);
                }
                if (observable._specialDisposal) {
                    observable._specialDisposal.call(observable.el, canUtilREL);
                    observable._specialDisposal = null;
                }
                canEvent.off.call(observable.el, observable.event, observable._handler);
            },
            valueHasDependencies: function valueHasDependencies() {
                return true;
            },
            getValueDependencies: function getValueDependencies() {
                return {
                    keyDependencies: new Map([[
                            this.el,
                            new Set([this.prop])
                        ]])
                };
            }
        });
        canReflect.assignSymbols(AttributeObservable.prototype, {
            'can.isMapLike': false,
            'can.getValue': AttributeObservable.prototype.get,
            'can.setValue': AttributeObservable.prototype.set,
            'can.onValue': AttributeObservable.prototype.on,
            'can.offValue': AttributeObservable.prototype.off,
            'can.valueHasDependencies': AttributeObservable.prototype.hasDependencies,
            'can.getValueDependencies': AttributeObservable.prototype.getValueDependencies
        });
        module.exports = AttributeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-bindings@4.3.1#can-stache-bindings*/
define('can-stache-bindings@4.3.1#can-stache-bindings', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-stache/src/expression',
    'can-view-callbacks',
    'can-view-model',
    'can-stache-key',
    'can-observation-recorder',
    'can-simple-observable',
    'can-assign',
    'can-log/dev/dev',
    'can-dom-mutate',
    'can-dom-data-state',
    'can-symbol',
    'can-reflect',
    'can-reflect-dependencies',
    'can-attribute-encoder',
    'can-queues',
    'can-simple-observable/setter/setter',
    'can-attribute-observable',
    'can-view-scope/make-compute-like',
    'can-view-nodelist',
    'can-attribute-observable/event'
], function (require, exports, module) {
    'use strict';
    var Bind = require('can-bind');
    var expression = require('can-stache/src/expression');
    var viewCallbacks = require('can-view-callbacks');
    var canViewModel = require('can-view-model');
    var observeReader = require('can-stache-key');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('can-simple-observable');
    var assign = require('can-assign');
    var dev = require('can-log/dev/dev');
    var domMutate = require('can-dom-mutate');
    var domData = require('can-dom-data-state');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    var encoder = require('can-attribute-encoder');
    var queues = require('can-queues');
    var SettableObservable = require('can-simple-observable/setter/setter');
    var AttributeObservable = require('can-attribute-observable');
    var makeCompute = require('can-view-scope/make-compute-like');
    var ViewNodeList = require('can-view-nodelist');
    var canEvent = require('can-attribute-observable/event');
    var bindings = new Map();
    var onMatchStr = 'on:', vmMatchStr = 'vm:', elMatchStr = 'el:', byMatchStr = ':by:', toMatchStr = ':to', fromMatchStr = ':from', bindMatchStr = ':bind', viewModelBindingStr = 'viewModel', attributeBindingStr = 'attribute', scopeBindingStr = 'scope', viewModelOrAttributeBindingStr = 'viewModelOrAttribute';
    var throwOnlyOneTypeOfBindingError = function () {
        throw new Error('can-stache-bindings - you can not have contextual bindings ( this:from=\'value\' ) and key bindings ( prop:from=\'value\' ) on one element.');
    };
    var checkBindingState = function (bindingState, bindingInfo) {
        var isSettingOnViewModel = bindingInfo.parentToChild && bindingInfo.child === viewModelBindingStr;
        if (isSettingOnViewModel) {
            var bindingName = bindingInfo.childName;
            var isSettingViewModel = isSettingOnViewModel && (bindingName === 'this' || bindingName === '.');
            if (isSettingViewModel) {
                if (bindingState.isSettingViewModel || bindingState.isSettingOnViewModel) {
                    throwOnlyOneTypeOfBindingError();
                } else {
                    return {
                        isSettingViewModel: true,
                        initialViewModelData: undefined
                    };
                }
            } else {
                if (bindingState.isSettingViewModel) {
                    throwOnlyOneTypeOfBindingError();
                } else {
                    return {
                        isSettingOnViewModel: true,
                        initialViewModelData: bindingState.initialViewModelData
                    };
                }
            }
        } else {
            return bindingState;
        }
    };
    var behaviors = {
        viewModel: function (el, tagData, makeViewModel, initialViewModelData, staticDataBindingsOnly) {
            var viewModel, onCompleteBindings = [], onTeardowns = {}, bindingInfos = {}, attributeViewModelBindings = assign({}, initialViewModelData), bindingsState = {
                    isSettingOnViewModel: false,
                    isSettingViewModel: false,
                    initialViewModelData: initialViewModelData || {}
                }, hasDataBinding = false;
            canReflect.each(el.attributes || [], function (node) {
                var dataBinding = makeDataBinding(node, el, {
                    templateType: tagData.templateType,
                    scope: tagData.scope,
                    getViewModel: function () {
                        return viewModel;
                    },
                    attributeViewModelBindings: attributeViewModelBindings,
                    alreadyUpdatedChild: true,
                    nodeList: tagData.parentNodeList,
                    favorViewModel: true
                });
                if (dataBinding) {
                    var bindingInfo = dataBinding.bindingInfo;
                    bindingsState = checkBindingState(bindingsState, bindingInfo);
                    hasDataBinding = true;
                    if (bindingInfo.parentToChild) {
                        var parentValue = bindingInfo.stickyParentToChild ? makeCompute(dataBinding.parent) : dataBinding.canBinding.parentValue;
                        if (parentValue !== undefined) {
                            if (bindingsState.isSettingViewModel) {
                                bindingsState.initialViewModelData = parentValue;
                            } else {
                                bindingsState.initialViewModelData[cleanVMName(bindingInfo.childName, tagData.scope)] = parentValue;
                            }
                        }
                    }
                    onCompleteBindings.push(dataBinding.canBinding.start.bind(dataBinding.canBinding));
                    onTeardowns[node.name] = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                }
            });
            if (staticDataBindingsOnly && !hasDataBinding) {
                return;
            }
            viewModel = makeViewModel(bindingsState.initialViewModelData, hasDataBinding);
            for (var i = 0, len = onCompleteBindings.length; i < len; i++) {
                onCompleteBindings[i]();
            }
            var attributeDisposal;
            if (!bindingsState.isSettingViewModel) {
                attributeDisposal = domMutate.onNodeAttributeChange(el, function (ev) {
                    var attrName = ev.attributeName, value = el.getAttribute(attrName);
                    if (onTeardowns[attrName]) {
                        onTeardowns[attrName]();
                    }
                    var parentBindingWasAttribute = bindingInfos[attrName] && bindingInfos[attrName].parent === attributeBindingStr;
                    if (value !== null || parentBindingWasAttribute) {
                        var dataBinding = makeDataBinding({
                            name: attrName,
                            value: value
                        }, el, {
                            templateType: tagData.templateType,
                            scope: tagData.scope,
                            getViewModel: function () {
                                return viewModel;
                            },
                            attributeViewModelBindings: attributeViewModelBindings,
                            initializeValues: true,
                            nodeList: tagData.parentNodeList
                        });
                        if (dataBinding) {
                            dataBinding.canBinding.start();
                            bindingInfos[attrName] = dataBinding.bindingInfo;
                            onTeardowns[attrName] = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                        }
                    }
                });
            }
            return function () {
                if (attributeDisposal) {
                    attributeDisposal();
                    attributeDisposal = undefined;
                }
                for (var attrName in onTeardowns) {
                    onTeardowns[attrName]();
                }
            };
        },
        data: function (el, attrData) {
            if (domData.get.call(el, 'preventDataBindings')) {
                return;
            }
            var viewModel, getViewModel = ObservationRecorder.ignore(function () {
                    return viewModel || (viewModel = canViewModel(el));
                }), teardown, attributeDisposal, removedDisposal;
            var dataBinding = makeDataBinding({
                name: attrData.attributeName,
                value: el.getAttribute(attrData.attributeName),
                nodeList: attrData.nodeList
            }, el, {
                templateType: attrData.templateType,
                scope: attrData.scope,
                getViewModel: getViewModel,
                syncChildWithParent: false
            });
            if (process.env.NODE_ENV !== 'production') {
                if (dataBinding.bindingInfo.child === 'viewModel' && !domData.get(el, 'viewModel')) {
                    dev.warn('This element does not have a viewModel. (Attempting to bind `' + dataBinding.bindingInfo.bindingAttributeName + '="' + dataBinding.bindingInfo.parentName + '"`)');
                }
            }
            dataBinding.canBinding.start();
            var attributeListener = function (ev) {
                var attrName = ev.attributeName, value = el.getAttribute(attrName);
                if (attrName === attrData.attributeName) {
                    if (teardown) {
                        teardown();
                    }
                    if (value !== null) {
                        var dataBinding = makeDataBinding({
                            name: attrName,
                            value: value
                        }, el, {
                            templateType: attrData.templateType,
                            scope: attrData.scope,
                            getViewModel: getViewModel,
                            initializeValues: true,
                            nodeList: attrData.nodeList,
                            syncChildWithParent: false
                        });
                        if (dataBinding) {
                            dataBinding.canBinding.start();
                            teardown = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                        }
                        teardown = dataBinding.onTeardown;
                    }
                }
            };
            var tearItAllDown = function () {
                if (teardown) {
                    teardown();
                    teardown = undefined;
                }
                if (removedDisposal) {
                    removedDisposal();
                    removedDisposal = undefined;
                }
                if (attributeDisposal) {
                    attributeDisposal();
                    attributeDisposal = undefined;
                }
            };
            if (attrData.nodeList) {
                ViewNodeList.register([], tearItAllDown, attrData.nodeList, false);
            }
            teardown = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
            attributeDisposal = domMutate.onNodeAttributeChange(el, attributeListener);
            removedDisposal = domMutate.onNodeRemoval(el, function () {
                if (el.ownerDocument.contains(el) === false) {
                    tearItAllDown();
                }
            });
        },
        event: function (el, data) {
            var attributeName = encoder.decode(data.attributeName), event, bindingContext;
            if (attributeName.indexOf(toMatchStr + ':') !== -1 || attributeName.indexOf(fromMatchStr + ':') !== -1 || attributeName.indexOf(bindMatchStr + ':') !== -1) {
                return this.data(el, data);
            }
            if (startsWith.call(attributeName, onMatchStr)) {
                event = attributeName.substr(onMatchStr.length);
                var viewModel = el[canSymbol.for('can.viewModel')];
                var byParent = data.scope;
                if (startsWith.call(event, elMatchStr)) {
                    event = event.substr(elMatchStr.length);
                    bindingContext = el;
                } else {
                    if (startsWith.call(event, vmMatchStr)) {
                        event = event.substr(vmMatchStr.length);
                        bindingContext = viewModel;
                        byParent = viewModel;
                    } else {
                        bindingContext = viewModel || el;
                    }
                    var byIndex = event.indexOf(byMatchStr);
                    if (byIndex >= 0) {
                        bindingContext = byParent.get(event.substr(byIndex + byMatchStr.length));
                        event = event.substr(0, byIndex);
                    }
                }
            } else {
                throw new Error('can-stache-bindings - unsupported event bindings ' + attributeName);
            }
            var handler = function (ev) {
                var attrVal = el.getAttribute(encoder.encode(attributeName));
                if (!attrVal) {
                    return;
                }
                var viewModel = canViewModel(el);
                var expr = expression.parse(attrVal, {
                    lookupRule: function () {
                        return expression.Lookup;
                    },
                    methodRule: 'call'
                });
                if (!(expr instanceof expression.Call)) {
                    throw new Error('can-stache-bindings: Event bindings must be a call expression. Make sure you have a () in ' + data.attributeName + '=' + JSON.stringify(attrVal));
                }
                var specialValues = {
                    element: el,
                    event: ev,
                    viewModel: viewModel,
                    arguments: arguments
                };
                var localScope = data.scope.add(specialValues, { special: true });
                var updateFn = function () {
                    var value = expr.value(localScope, { doNotWrapInObservation: true });
                    value = canReflect.isValueLike(value) ? canReflect.getValue(value) : value;
                    return typeof value === 'function' ? value(el) : value;
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(updateFn, 'name', { value: attributeName + '="' + attrVal + '"' });
                }
                queues.batch.start();
                var mutateQueueArgs = [];
                mutateQueueArgs = [
                    updateFn,
                    null,
                    null,
                    {}
                ];
                if (process.env.NODE_ENV !== 'production') {
                    mutateQueueArgs = [
                        updateFn,
                        null,
                        null,
                        {
                            reasonLog: [
                                el,
                                ev,
                                attributeName + '=' + attrVal
                            ]
                        }
                    ];
                }
                queues.mutateQueue.enqueue.apply(queues.mutateQueue, mutateQueueArgs);
                queues.batch.stop();
            };
            var attributesDisposal, removalDisposal;
            var attributesHandler = function (ev) {
                var isEventAttribute = ev.attributeName === attributeName;
                var isRemoved = !el.getAttribute(attributeName);
                var isEventAttributeRemoved = isEventAttribute && isRemoved;
                if (isEventAttributeRemoved) {
                    unbindEvent();
                }
            };
            var removalHandler = function () {
                if (!el.ownerDocument.contains(el)) {
                    unbindEvent();
                }
            };
            var unbindEvent = function () {
                canEvent.off.call(bindingContext, event, handler);
                if (attributesDisposal) {
                    attributesDisposal();
                    attributesDisposal = undefined;
                }
                if (removalDisposal) {
                    removalDisposal();
                    removalDisposal = undefined;
                }
            };
            canEvent.on.call(bindingContext, event, handler);
            attributesDisposal = domMutate.onNodeAttributeChange(el, attributesHandler);
            removalDisposal = domMutate.onNodeRemoval(el, removalHandler);
        }
    };
    bindings.set(/[\w\.:]+:to$/, behaviors.data);
    bindings.set(/[\w\.:]+:from$/, behaviors.data);
    bindings.set(/[\w\.:]+:bind$/, behaviors.data);
    bindings.set(/[\w\.:]+:raw$/, behaviors.data);
    bindings.set(/[\w\.:]+:to:on:[\w\.:]+/, behaviors.data);
    bindings.set(/[\w\.:]+:from:on:[\w\.:]+/, behaviors.data);
    bindings.set(/[\w\.:]+:bind:on:[\w\.:]+/, behaviors.data);
    bindings.set(/on:[\w\.:]+/, behaviors.event);
    var getObservableFrom = {
        viewModelOrAttribute: function (el, scope, vmNameOrProp, bindingData, mustBeGettable, stickyCompute, event) {
            var viewModel = el[canSymbol.for('can.viewModel')];
            if (viewModel) {
                return this.viewModel.apply(this, arguments);
            } else {
                return this.attribute.apply(this, arguments);
            }
        },
        scope: function (el, scope, scopeProp, bindingData, mustBeGettable, stickyCompute) {
            if (!scopeProp) {
                return new SimpleObservable();
            } else {
                if (mustBeGettable || scopeProp.indexOf('(') >= 0) {
                    var parentExpression = expression.parse(scopeProp, { baseMethodType: 'Call' });
                    return parentExpression.value(scope);
                } else {
                    var observation = {};
                    canReflect.assignSymbols(observation, {
                        'can.getValue': function getValue() {
                        },
                        'can.valueHasDependencies': function hasValueDependencies() {
                            return false;
                        },
                        'can.setValue': function setValue(newVal) {
                            scope.set(cleanVMName(scopeProp, scope), newVal);
                        },
                        'can.getWhatIChange': function getWhatIChange() {
                            var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                            return {
                                mutate: {
                                    keyDependencies: new Map([[
                                            data.parent,
                                            new Set([data.key])
                                        ]])
                                }
                            };
                        },
                        'can.getName': function getName() {
                            if (process.env.NODE_ENV !== 'production') {
                                var result = 'ObservableFromScope<>';
                                var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                                if (data.parent && data.key) {
                                    result = 'ObservableFromScope<' + canReflect.getName(data.parent) + '.' + data.key + '>';
                                }
                                return result;
                            }
                        }
                    });
                    var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                    if (data.parent && data.key) {
                        canReflectDeps.addMutatedBy(data.parent, data.key, observation);
                    }
                    return observation;
                }
            }
        },
        viewModel: function (el, scope, vmName, bindingData, mustBeGettable, stickyCompute, childEvent) {
            var setName = cleanVMName(vmName, scope);
            var isBoundToContext = vmName === '.' || vmName === 'this';
            var keysToRead = isBoundToContext ? [] : observeReader.reads(vmName);
            function getViewModelProperty() {
                var viewModel = bindingData.getViewModel();
                return observeReader.read(viewModel, keysToRead, {}).value;
            }
            if (process.env.NODE_ENV !== 'production') {
                Object.defineProperty(getViewModelProperty, 'name', { value: 'viewModel.' + vmName });
            }
            var observation = new SettableObservable(getViewModelProperty, function setViewModelProperty(newVal) {
                var viewModel = bindingData.getViewModel();
                if (stickyCompute) {
                    var oldValue = canReflect.getKeyValue(viewModel, setName);
                    if (canReflect.isObservableLike(oldValue)) {
                        canReflect.setValue(oldValue, newVal);
                    } else {
                        canReflect.setKeyValue(viewModel, setName, new SimpleObservable(canReflect.getValue(stickyCompute)));
                    }
                } else {
                    if (isBoundToContext) {
                        canReflect.setValue(viewModel, newVal);
                    } else {
                        canReflect.setKeyValue(viewModel, setName, newVal);
                    }
                }
            });
            if (process.env.NODE_ENV !== 'production') {
                var viewModel = bindingData.getViewModel();
                if (viewModel && setName) {
                    canReflectDeps.addMutatedBy(viewModel, setName, observation);
                }
            }
            return observation;
        },
        attribute: function (el, scope, prop, bindingData, mustBeGettable, stickyCompute, event, bindingInfo) {
            return new AttributeObservable(el, prop, bindingData, event);
        }
    };
    var startsWith = String.prototype.startsWith || function (text) {
        return this.indexOf(text) === 0;
    };
    function getEventName(result) {
        if (result.special.on !== undefined) {
            return result.tokens[result.special.on + 1];
        }
    }
    var bindingRules = {
        to: {
            childToParent: true,
            parentToChild: false,
            syncChildWithParent: false
        },
        from: {
            childToParent: false,
            parentToChild: true,
            syncChildWithParent: false
        },
        bind: {
            childToParent: true,
            parentToChild: true,
            syncChildWithParent: true
        },
        raw: {
            childToParent: false,
            parentToChild: true,
            syncChildWithParent: false
        }
    };
    var bindingNames = [];
    var special = {
        vm: true,
        on: true
    };
    canReflect.each(bindingRules, function (value, key) {
        bindingNames.push(key);
        special[key] = true;
    });
    function tokenize(source) {
        var splitByColon = source.split(':');
        var result = {
            tokens: [],
            special: {}
        };
        splitByColon.forEach(function (token) {
            if (special[token]) {
                result.special[token] = result.tokens.push(token) - 1;
            } else {
                result.tokens.push(token);
            }
        });
        return result;
    }
    var getChildBindingStr = function (tokens, favorViewModel) {
        if (tokens.indexOf('vm') >= 0) {
            return viewModelBindingStr;
        } else if (tokens.indexOf('el') >= 0) {
            return attributeBindingStr;
        } else {
            return favorViewModel ? viewModelBindingStr : viewModelOrAttributeBindingStr;
        }
    };
    var getBindingInfo = function (node, attributeViewModelBindings, templateType, tagName, favorViewModel) {
        var bindingInfo, attributeName = encoder.decode(node.name), attributeValue = node.value || '';
        var result = tokenize(attributeName), dataBindingName, specialIndex;
        bindingNames.forEach(function (name) {
            if (result.special[name] !== undefined && result.special[name] > 0) {
                dataBindingName = name;
                specialIndex = result.special[name];
                return false;
            }
        });
        if (dataBindingName) {
            var childEventName = getEventName(result);
            var initializeValues = childEventName && dataBindingName !== 'bind' ? false : true;
            bindingInfo = assign({
                parent: scopeBindingStr,
                child: getChildBindingStr(result.tokens, favorViewModel),
                childName: result.tokens[specialIndex - 1],
                childEvent: childEventName,
                bindingAttributeName: attributeName,
                parentName: result.special.raw ? '"' + attributeValue + '"' : attributeValue,
                initializeValues: initializeValues
            }, bindingRules[dataBindingName]);
            if (attributeValue.trim().charAt(0) === '~') {
                bindingInfo.stickyParentToChild = true;
            }
            return bindingInfo;
        }
    };
    var makeDataBinding = function (node, el, bindingData) {
        var bindingInfo = getBindingInfo(node, bindingData.attributeViewModelBindings, bindingData.templateType, el.nodeName.toLowerCase(), bindingData.favorViewModel);
        if (!bindingInfo) {
            return;
        }
        var parentObservable = getObservableFrom[bindingInfo.parent](el, bindingData.scope, bindingInfo.parentName, bindingData, bindingInfo.parentToChild, undefined, undefined, bindingInfo), childObservable = getObservableFrom[bindingInfo.child](el, bindingData.scope, bindingInfo.childName, bindingData, bindingInfo.childToParent, bindingInfo.stickyParentToChild && parentObservable, bindingInfo.childEvent, bindingInfo);
        var childToParent = !!bindingInfo.childToParent;
        var parentToChild = !!bindingInfo.parentToChild;
        if (process.env.NODE_ENV !== 'production') {
            if (bindingInfo.stickyParentToChild && childToParent && parentToChild) {
                dev.warn('Two-way binding computes is not supported.');
            }
        }
        var bindingOptions = {
            child: childObservable,
            childToParent: childToParent,
            cycles: 0,
            onInitDoNotUpdateChild: bindingData.alreadyUpdatedChild,
            onInitSetUndefinedParentIfChildIsDefined: true,
            parent: parentObservable,
            parentToChild: parentToChild,
            priority: bindingData.nodeList ? bindingData.nodeList.nesting + 1 : undefined,
            queue: 'domUI',
            sticky: bindingInfo.syncChildWithParent ? 'childSticksToParent' : undefined
        };
        if (process.env.NODE_ENV !== 'production') {
            bindingOptions.updateChildName = 'update ' + bindingInfo.child + '.' + bindingInfo.childName + ' of <' + el.nodeName.toLowerCase() + '>';
            bindingOptions.updateParentName = 'update ' + bindingInfo.parent + '.' + bindingInfo.parentName + ' of <' + el.nodeName.toLowerCase() + '>';
        }
        var canBinding = new Bind(bindingOptions);
        canBinding.startParent();
        return {
            bindingInfo: bindingInfo,
            canBinding: canBinding,
            parent: parentObservable
        };
    };
    var cleanVMName = function (name, scope) {
        if (process.env.NODE_ENV !== 'production') {
            if (name.indexOf('@') >= 0) {
                var filename = scope.peek('scope.filename');
                var lineNumber = scope.peek('scope.lineNumber');
                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'functions are no longer called by default so @ is unnecessary in \'' + name + '\'.');
            }
        }
        return name.replace(/@/g, '');
    };
    var canStacheBindings = {
        behaviors: behaviors,
        getBindingInfo: getBindingInfo,
        bindings: bindings
    };
    canStacheBindings[canSymbol.for('can.callbackMap')] = bindings;
    viewCallbacks.attrs(canStacheBindings);
    module.exports = canStacheBindings;
});
/*can-define@2.5.3#list/list*/
define('can-define@2.5.3#list/list', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    'can-queues',
    'can-event-queue/type/type',
    'can-observation-recorder',
    'can-log',
    'can-log/dev/dev',
    '../define-helpers/define-helpers',
    'can-assign',
    'can-diff/list/list',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-single-reference'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var make = define.make;
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var ObservationRecorder = require('can-observation-recorder');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var defineHelpers = require('../define-helpers/define-helpers');
    var assign = require('can-assign');
    var diff = require('can-diff/list/list');
    var ns = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var singleReference = require('can-single-reference');
    var splice = [].splice;
    var runningNative = false;
    var identity = function (x) {
        return x;
    };
    var localOnPatchesSymbol = 'can.patches';
    var makeFilterCallback = function (props) {
        return function (item) {
            for (var prop in props) {
                if (item[prop] !== props[prop]) {
                    return false;
                }
            }
            return true;
        };
    };
    var onKeyValue = define.eventsProto[canSymbol.for('can.onKeyValue')];
    var offKeyValue = define.eventsProto[canSymbol.for('can.offKeyValue')];
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var definitions = this.prototype._define.definitions;
        var schema = {
            type: 'list',
            keys: {}
        };
        schema = define.updateSchemaKeys(schema, definitions);
        if (schema.keys['#']) {
            schema.values = definitions['#'].Type;
            delete schema.keys['#'];
        }
        return schema;
    }
    var DefineList = Construct.extend('DefineList', {
        setup: function (base) {
            if (DefineList) {
                addTypeEvents(this);
                var prototype = this.prototype;
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                var itemsDefinition = result.definitions['#'] || result.defaultDefinition;
                if (itemsDefinition) {
                    if (itemsDefinition.Type) {
                        this.prototype.__type = make.set.Type('*', itemsDefinition.Type, identity);
                    } else if (itemsDefinition.type) {
                        this.prototype.__type = make.set.type('*', itemsDefinition.type, identity);
                    }
                }
                this[getSchemaSymbol] = getSchema;
            }
        }
    }, {
        setup: function (items) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: {
                        definitions: {
                            length: { type: 'number' },
                            _length: { type: 'number' }
                        }
                    }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, {}, false);
            Object.defineProperty(this, '_length', {
                enumerable: false,
                configurable: true,
                writable: true,
                value: 0
            });
            if (items) {
                this.splice.apply(this, [
                    0,
                    0
                ].concat(canReflect.toArray(items)));
            }
        },
        __type: define.types.observable,
        _triggerChange: function (attr, how, newVal, oldVal) {
            var index = +attr;
            if (!isNaN(index)) {
                var itemsDefinition = this._define.definitions['#'];
                var patches, dispatched;
                if (how === 'add') {
                    if (itemsDefinition && typeof itemsDefinition.added === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.added).call(this, newVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            insert: newVal,
                            index: index,
                            deleteCount: 0
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched.reasonLog = [
                            canReflect.getName(this),
                            'added',
                            newVal,
                            'at',
                            index
                        ];
                    }
                    this.dispatch(dispatched, [
                        newVal,
                        index
                    ]);
                } else if (how === 'remove') {
                    if (itemsDefinition && typeof itemsDefinition.removed === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.removed).call(this, oldVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            index: index,
                            deleteCount: oldVal.length
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        dispatched.reasonLog = [
                            canReflect.getName(this),
                            'remove',
                            oldVal,
                            'at',
                            index
                        ];
                    }
                    this.dispatch(dispatched, [
                        oldVal,
                        index
                    ]);
                } else {
                    this.dispatch(how, [
                        newVal,
                        index
                    ]);
                }
            } else {
                this.dispatch({
                    type: '' + attr,
                    target: this
                }, [
                    newVal,
                    oldVal
                ]);
            }
        },
        get: function (index) {
            if (arguments.length) {
                if (isNaN(index)) {
                    ObservationRecorder.add(this, index);
                } else {
                    ObservationRecorder.add(this, 'length');
                }
                return this[index];
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop !== 'object') {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number') {
                    if (typeof prop === 'number' && prop > this._length - 1) {
                        var newArr = new Array(prop + 1 - this._length);
                        newArr[newArr.length - 1] = value;
                        this.push.apply(this, newArr);
                        return newArr;
                    }
                    this.splice(prop, 1, value);
                } else {
                    var defined = defineHelpers.defineExpando(this, prop, value);
                    if (!defined) {
                        this[prop] = value;
                    }
                }
            } else {
                if (process.env.NODE_ENV !== 'production') {
                    canLogDev.warn('can-define/list/list.prototype.set is deprecated; please use can-define/list/list.prototype.assign or can-define/list/list.prototype.update instead');
                }
                if (canReflect.isListLike(prop)) {
                    if (value) {
                        this.replace(prop);
                    } else {
                        canReflect.assignList(this, prop);
                    }
                } else {
                    canReflect.assignMap(this, prop);
                }
            }
            return this;
        },
        assign: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignList(this, prop);
            } else {
                canReflect.assignMap(this, prop);
            }
            return this;
        },
        update: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateList(this, prop);
            } else {
                canReflect.updateMap(this, prop);
            }
            return this;
        },
        assignDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignDeepList(this, prop);
            } else {
                canReflect.assignDeepMap(this, prop);
            }
            return this;
        },
        updateDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateDeepList(this, prop);
            } else {
                canReflect.updateDeepMap(this, prop);
            }
            return this;
        },
        _items: function () {
            var arr = [];
            this._each(function (item) {
                arr.push(item);
            });
            return arr;
        },
        _each: function (callback) {
            for (var i = 0, len = this._length; i < len; i++) {
                callback(this[i], i);
            }
        },
        splice: function (index, howMany) {
            var args = canReflect.toArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2, oldLength = this._length;
            index = index || 0;
            for (i = 0, len = args.length - 2; i < len; i++) {
                listIndex = i + 2;
                args[listIndex] = this.__type(args[listIndex], listIndex);
                added.push(args[listIndex]);
                if (this[i + index] !== args[listIndex]) {
                    allSame = false;
                }
            }
            if (allSame && this._length <= added.length) {
                return added;
            }
            if (howMany === undefined) {
                howMany = args[1] = this._length - index;
            }
            runningNative = true;
            var removed = splice.apply(this, args);
            runningNative = false;
            queues.batch.start();
            if (howMany > 0) {
                this._triggerChange('' + index, 'remove', undefined, removed);
            }
            if (args.length > 2) {
                this._triggerChange('' + index, 'add', added, removed);
            }
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return removed;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        }
    });
    for (var prop in define.eventsProto) {
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineList.prototype, sym, {
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    var getArgs = function (args) {
        return args[0] && Array.isArray(args[0]) ? args[0] : canReflect.toArray(args);
    };
    canReflect.eachKey({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            var args = [], len = where ? this._length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = this.__type(val, i);
            }
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            if (!this.comparator || args.length) {
                queues.batch.start();
                this._triggerChange('' + len, 'add', args, undefined);
                this.dispatch('length', [
                    this._length,
                    len
                ]);
                queues.batch.stop();
            }
            return res;
        };
    });
    canReflect.eachKey({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            if (!this._length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this._length ? this._length - 1 : 0, oldLength = this._length ? this._length : 0, res;
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            queues.batch.start();
            this._triggerChange('' + len, 'remove', undefined, [res]);
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return res;
        };
    });
    canReflect.eachKey({
        'map': 3,
        'filter': 3,
        'reduce': 4,
        'reduceRight': 4,
        'every': 3,
        'some': 3
    }, function a(fnLength, fnName) {
        DefineList.prototype[fnName] = function () {
            var self = this;
            var args = [].slice.call(arguments, 0);
            var callback = args[0];
            var thisArg = args[fnLength - 1] || self;
            if (typeof callback === 'object') {
                callback = makeFilterCallback(callback);
            }
            args[0] = function () {
                var cbArgs = [].slice.call(arguments, 0);
                cbArgs[fnLength - 3] = self.get(cbArgs[fnLength - 2]);
                return callback.apply(thisArg, cbArgs);
            };
            var ret = Array.prototype[fnName].apply(this, args);
            if (fnName === 'map') {
                return new DefineList(ret);
            } else if (fnName === 'filter') {
                return new self.constructor(ret);
            } else {
                return ret;
            }
        };
    });
    assign(DefineList.prototype, {
        indexOf: function (item, fromIndex) {
            for (var i = fromIndex || 0, len = this.length; i < len; i++) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        lastIndexOf: function (item, fromIndex) {
            fromIndex = typeof fromIndex === 'undefined' ? this.length - 1 : fromIndex;
            for (var i = fromIndex; i >= 0; i--) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        join: function () {
            ObservationRecorder.add(this, 'length');
            return [].join.apply(this, arguments);
        },
        reverse: function () {
            var list = [].reverse.call(this._items());
            return this.replace(list);
        },
        slice: function () {
            ObservationRecorder.add(this, 'length');
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [];
            canReflect.eachIndex(arguments, function (arg) {
                if (canReflect.isListLike(arg)) {
                    var arr = Array.isArray(arg) ? arg : canReflect.toArray(arg);
                    arr.forEach(function (innerArg) {
                        args.push(this.__type(innerArg));
                    }, this);
                } else {
                    args.push(this.__type(arg));
                }
            }, this);
            return new this.constructor(Array.prototype.concat.apply(canReflect.toArray(this), args));
        },
        forEach: function (cb, thisarg) {
            var item;
            for (var i = 0, len = this.length; i < len; i++) {
                item = this.get(i);
                if (cb.call(thisarg || item, item, i, this) === false) {
                    break;
                }
            }
            return this;
        },
        replace: function (newList) {
            var patches = diff(this, newList);
            queues.batch.start();
            for (var i = 0, len = patches.length; i < len; i++) {
                this.splice.apply(this, [
                    patches[i].index,
                    patches[i].deleteCount
                ].concat(patches[i].insert));
            }
            queues.batch.stop();
            return this;
        },
        sort: function (compareFunction) {
            var sorting = Array.prototype.slice.call(this);
            Array.prototype.sort.call(sorting, compareFunction);
            this.splice.apply(this, [
                0,
                sorting.length
            ].concat(sorting));
            return this;
        }
    });
    for (var prop in define.eventsProto) {
        DefineList[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    Object.defineProperty(DefineList.prototype, 'length', {
        get: function () {
            if (!this.__inSetup) {
                ObservationRecorder.add(this, 'length');
            }
            return this._length;
        },
        set: function (newVal) {
            if (runningNative) {
                this._length = newVal;
                return;
            }
            if (newVal == null || isNaN(+newVal) || newVal === this._length) {
                return;
            }
            if (newVal > this._length - 1) {
                var newArr = new Array(newVal - this._length);
                this.push.apply(this, newArr);
            } else {
                this.splice(newVal);
            }
        },
        enumerable: true
    });
    DefineList.prototype.attr = function (prop, value) {
        canLog.warn('DefineMap::attr shouldn\'t be called');
        if (arguments.length === 0) {
            return this.get();
        } else if (prop && typeof prop === 'object') {
            return this.set.apply(this, arguments);
        } else if (arguments.length === 1) {
            return this.get(prop);
        } else {
            return this.set(prop, value);
        }
    };
    DefineList.prototype.item = function (index, value) {
        if (arguments.length === 1) {
            return this.get(index);
        } else {
            return this.set(index, value);
        }
    };
    DefineList.prototype.items = function () {
        canLog.warn('DefineList::get should should be used instead of DefineList::items');
        return this.get();
    };
    var defineListProto = {
        'can.isMoreListLikeThanMapLike': true,
        'can.isMapLike': true,
        'can.isListLike': true,
        'can.isValueLike': false,
        'can.getKeyValue': DefineList.prototype.get,
        'can.setKeyValue': DefineList.prototype.set,
        'can.onKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return onKeyValue.apply(this, arguments);
            } else {
                translationHandler = function () {
                    handler(this[key]);
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(translationHandler, 'name', { value: 'translationHandler(' + key + ')::' + canReflect.getName(this) + '.onKeyValue(\'length\',' + canReflect.getName(handler) + ')' });
                }
                singleReference.set(handler, this, translationHandler, key);
                return onKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.offKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return offKeyValue.apply(this, arguments);
            } else {
                translationHandler = singleReference.getAndDelete(handler, this, key);
                return offKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.deleteKeyValue': function (prop) {
            prop = isNaN(+prop) || prop % 1 ? prop : +prop;
            if (typeof prop === 'number') {
                this.splice(prop, 1);
            } else if (prop === 'length' || prop === '_length') {
                return;
            } else {
                this.set(prop, undefined);
            }
            return this;
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignList(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            this.replace(source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set([this._computed[key].compute]);
            }
            return ret;
        },
        'can.splice': function (index, deleteCount, insert) {
            this.splice.apply(this, [
                index,
                deleteCount
            ].concat(insert));
        },
        'can.onPatches': function (handler, queue) {
            this[canSymbol.for('can.onKeyValue')](localOnPatchesSymbol, handler, queue);
        },
        'can.offPatches': function (handler, queue) {
            this[canSymbol.for('can.offKeyValue')](localOnPatchesSymbol, handler, queue);
        }
    };
    if (process.env.NODE_ENV !== 'production') {
        defineListProto['can.getName'] = function () {
            return canReflect.getName(this.constructor) + '[]';
        };
    }
    canReflect.assignSymbols(DefineList.prototype, defineListProto);
    canReflect.setKeyValue(DefineList.prototype, canSymbol.iterator, function () {
        var index = -1;
        if (typeof this._length !== 'number') {
            this._length = 0;
        }
        return {
            next: function () {
                index++;
                return {
                    value: this[index],
                    done: index >= this._length
                };
            }.bind(this)
        };
    });
    if (process.env.NODE_ENV !== 'production') {
        DefineList.prototype.log = defineHelpers.log;
    }
    define.DefineList = DefineList;
    module.exports = ns.DefineList = DefineList;
});
/*can-component@4.3.0#can-component*/
define('can-component@4.3.0#can-component', [
    'require',
    'exports',
    'module',
    './control/control',
    'can-namespace',
    'can-bind',
    'can-construct',
    'can-stache',
    'can-stache-bindings',
    'can-view-scope',
    'can-view-callbacks',
    'can-view-nodelist',
    'can-reflect',
    'can-stache-key',
    'can-simple-observable/setter/setter',
    'can-simple-observable',
    'can-simple-map',
    'can-define/map/map',
    'can-log',
    'can-log/dev/dev',
    'can-assign',
    'can-view-model',
    'can-define/list/list',
    'can-dom-data-state',
    'can-child-nodes',
    'can-string',
    'can-dom-events',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-symbol',
    'can-globals/document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var ComponentControl = require('./control/control');
        var namespace = require('can-namespace');
        var Bind = require('can-bind');
        var Construct = require('can-construct');
        var stache = require('can-stache');
        var stacheBindings = require('can-stache-bindings');
        var Scope = require('can-view-scope');
        var viewCallbacks = require('can-view-callbacks');
        var nodeLists = require('can-view-nodelist');
        var canReflect = require('can-reflect');
        var observeReader = require('can-stache-key');
        var SettableObservable = require('can-simple-observable/setter/setter');
        var SimpleObservable = require('can-simple-observable');
        var SimpleMap = require('can-simple-map');
        var DefineMap = require('can-define/map/map');
        var canLog = require('can-log');
        var canDev = require('can-log/dev/dev');
        var assign = require('can-assign');
        require('can-view-model');
        require('can-define/list/list');
        var domData = require('can-dom-data-state');
        var getChildNodes = require('can-child-nodes');
        var string = require('can-string');
        var domEvents = require('can-dom-events');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var canSymbol = require('can-symbol');
        var DOCUMENT = require('can-globals/document/document');
        var createdByCanComponentSymbol = canSymbol('can.createdByCanComponent');
        var getValueSymbol = canSymbol.for('can.getValue');
        var setValueSymbol = canSymbol.for('can.setValue');
        var viewInsertSymbol = canSymbol.for('can.viewInsert');
        var viewModelSymbol = canSymbol.for('can.viewModel');
        stache.addBindings(stacheBindings);
        function addContext(el, tagData, insertionElementTagData) {
            var vm;
            domData.set.call(el, 'preventDataBindings', true);
            var teardown = stacheBindings.behaviors.viewModel(el, insertionElementTagData, function (initialData) {
                return vm = new SimpleObservable(initialData);
            }, undefined, true);
            if (!teardown) {
                return tagData;
            } else {
                return assign(assign({}, tagData), {
                    teardown: teardown,
                    scope: tagData.scope.add(vm)
                });
            }
        }
        function makeInsertionTagCallback(tagName, componentTagData, shadowTagData, leakScope, getPrimaryTemplate) {
            var options = shadowTagData.options;
            return function hookupFunction(el, insertionElementTagData) {
                var template = getPrimaryTemplate(el) || insertionElementTagData.subtemplate, renderingLightContent = template !== insertionElementTagData.subtemplate;
                if (template) {
                    delete options.tags[tagName];
                    var tagData;
                    if (renderingLightContent) {
                        if (leakScope.toLightContent) {
                            tagData = addContext(el, {
                                scope: insertionElementTagData.scope.cloneFromRef(),
                                options: insertionElementTagData.options
                            }, insertionElementTagData);
                        } else {
                            tagData = addContext(el, componentTagData, insertionElementTagData);
                        }
                    } else {
                        tagData = addContext(el, insertionElementTagData, insertionElementTagData);
                    }
                    var nodeList = nodeLists.register([el], function () {
                        if (tagData.teardown) {
                            tagData.teardown();
                        }
                    }, insertionElementTagData.parentNodeList || true, insertionElementTagData.directlyNested);
                    nodeList.expression = '<can-slot name=\'' + el.getAttribute('name') + '\'/>';
                    var frag = template(tagData.scope, tagData.options, nodeList);
                    var newNodes = canReflect.toArray(getChildNodes(frag));
                    var oldNodes = nodeLists.update(nodeList, newNodes);
                    nodeLists.replace(oldNodes, frag);
                    options.tags[tagName] = hookupFunction;
                }
            };
        }
        function getSetupFunctionForComponentVM(componentInitVM) {
            return function (el, makeViewModel, initialVMData) {
                var onCompleteBindings = [];
                var onTeardowns = [];
                var viewModel;
                canReflect.eachKey(componentInitVM, function (parent, propName) {
                    var canGetParentValue = !!parent[getValueSymbol];
                    if (canGetParentValue === true || parent[setValueSymbol]) {
                        var keysToRead = observeReader.reads(propName);
                        var child = new SettableObservable(function () {
                            return observeReader.read(viewModel, keysToRead).value;
                        }, function (newValue) {
                            canReflect.setKeyValue(viewModel, propName, newValue);
                        });
                        var canBinding = new Bind({
                            child: child,
                            parent: parent,
                            queue: 'domUI',
                            updateChildName: 'update viewModel.' + propName + ' of <' + el.nodeName.toLowerCase() + '>',
                            updateParentName: 'update ' + canReflect.getName(parent) + ' of <' + el.nodeName.toLowerCase() + '>'
                        });
                        canBinding.startParent();
                        if (canGetParentValue === true) {
                            initialVMData[propName] = canBinding.parentValue;
                        }
                        onCompleteBindings.push(canBinding.start.bind(canBinding));
                        onTeardowns.push(canBinding.stop.bind(canBinding));
                    } else {
                        initialVMData[propName] = parent;
                    }
                });
                viewModel = makeViewModel(initialVMData);
                for (var i = 0, len = onCompleteBindings.length; i < len; i++) {
                    onCompleteBindings[i]();
                }
                return function () {
                    onTeardowns.forEach(function (onTeardown) {
                        onTeardown();
                    });
                };
            };
        }
        var Component = Construct.extend({
            setup: function () {
                Construct.setup.apply(this, arguments);
                if (Component) {
                    var self = this;
                    if (this.prototype.events !== undefined && canReflect.size(this.prototype.events) !== 0) {
                        this.Control = ComponentControl.extend(this.prototype.events);
                    }
                    if (process.env.NODE_ENV !== 'production') {
                        if (this.prototype.viewModel && canReflect.isConstructorLike(this.prototype.viewModel)) {
                            canDev.warn('can-component: Assigning a DefineMap or constructor type to the viewModel property may not be what you intended. Did you mean ViewModel instead? More info: https://canjs.com/doc/can-component.prototype.ViewModel.html');
                        }
                    }
                    var protoViewModel = this.prototype.viewModel || this.prototype.scope;
                    if (protoViewModel && this.prototype.ViewModel) {
                        throw new Error('Cannot provide both a ViewModel and a viewModel property');
                    }
                    var vmName = string.capitalize(string.camelize(this.prototype.tag)) + 'VM';
                    if (this.prototype.ViewModel) {
                        if (typeof this.prototype.ViewModel === 'function') {
                            this.ViewModel = this.prototype.ViewModel;
                        } else {
                            this.ViewModel = DefineMap.extend(vmName, {}, this.prototype.ViewModel);
                        }
                    } else {
                        if (protoViewModel) {
                            if (typeof protoViewModel === 'function') {
                                if (canReflect.isObservableLike(protoViewModel.prototype) && canReflect.isMapLike(protoViewModel.prototype)) {
                                    this.ViewModel = protoViewModel;
                                } else {
                                    this.viewModelHandler = protoViewModel;
                                }
                            } else {
                                if (canReflect.isObservableLike(protoViewModel) && canReflect.isMapLike(protoViewModel)) {
                                    if (process.env.NODE_ENV !== 'production') {
                                        canLog.warn('can-component: ' + this.prototype.tag + ' is sharing a single map across all component instances');
                                    }
                                    this.viewModelInstance = protoViewModel;
                                } else {
                                    canLog.warn('can-component: ' + this.prototype.tag + ' is extending the viewModel into a can-simple-map');
                                    this.ViewModel = SimpleMap.extend(vmName, {}, protoViewModel);
                                }
                            }
                        } else {
                            this.ViewModel = SimpleMap.extend(vmName, {}, {});
                        }
                    }
                    if (this.prototype.template) {
                        if (process.env.NODE_ENV !== 'production') {
                            canLog.warn('can-component.prototype.template: is deprecated and will be removed in a future release. Use can-component.prototype.view');
                        }
                        this.renderer = this.prototype.template;
                    }
                    if (this.prototype.view) {
                        this.renderer = this.prototype.view;
                    }
                    if (typeof this.renderer === 'string') {
                        var viewName = string.capitalize(string.camelize(this.prototype.tag)) + 'View';
                        this.renderer = stache(viewName, this.renderer);
                    }
                    viewCallbacks.tag(this.prototype.tag, function (el, tagData) {
                        if (el[createdByCanComponentSymbol] === undefined) {
                            new self(el, tagData);
                        }
                    });
                }
            }
        }, {
            setup: function (el, componentTagData) {
                this._initialArgs = [
                    el,
                    componentTagData
                ];
                var component = this;
                var options = {
                    helpers: {},
                    tags: {}
                };
                if (componentTagData === undefined) {
                    if (el === undefined) {
                        componentTagData = {};
                    } else {
                        componentTagData = el;
                        el = undefined;
                    }
                }
                if (el === undefined) {
                    el = DOCUMENT().createElement(this.tag);
                    el[createdByCanComponentSymbol] = true;
                }
                this.element = el;
                var componentContent = componentTagData.content;
                if (componentContent !== undefined) {
                    if (typeof componentContent === 'function') {
                        componentTagData.subtemplate = componentContent;
                    } else if (typeof componentContent === 'string') {
                        componentTagData.subtemplate = stache(componentContent);
                    }
                }
                var componentScope = componentTagData.scope;
                if (componentScope !== undefined && componentScope instanceof Scope === false) {
                    componentTagData.scope = new Scope(componentScope);
                }
                var componentTemplates = componentTagData.templates;
                if (componentTemplates !== undefined) {
                    canReflect.eachKey(componentTemplates, function (template, name) {
                        if (typeof template === 'string') {
                            var debugName = name + ' template';
                            componentTemplates[name] = stache(debugName, template);
                        }
                    });
                }
                var teardownFunctions = [];
                var initialViewModelData = {};
                var callTeardownFunctions = function () {
                    for (var i = 0, len = teardownFunctions.length; i < len; i++) {
                        teardownFunctions[i]();
                    }
                };
                var preventDataBindings = domData.get.call(el, 'preventDataBindings');
                var viewModel, frag;
                var teardownBindings;
                if (preventDataBindings) {
                    viewModel = el[viewModelSymbol];
                } else {
                    var setupFn;
                    if (componentTagData.setupBindings) {
                        setupFn = componentTagData.setupBindings;
                    } else if (componentTagData.viewModel) {
                        setupFn = getSetupFunctionForComponentVM(componentTagData.viewModel);
                    } else {
                        setupFn = function (el, callback, data) {
                            return stacheBindings.behaviors.viewModel(el, componentTagData, callback, data);
                        };
                    }
                    teardownBindings = setupFn(el, function (initialViewModelData) {
                        var ViewModel = component.constructor.ViewModel, viewModelHandler = component.constructor.viewModelHandler, viewModelInstance = component.constructor.viewModelInstance;
                        if (viewModelHandler) {
                            var scopeResult = viewModelHandler.call(component, initialViewModelData, componentTagData.scope, el);
                            if (canReflect.isObservableLike(scopeResult) && canReflect.isMapLike(scopeResult)) {
                                viewModelInstance = scopeResult;
                            } else if (canReflect.isObservableLike(scopeResult.prototype) && canReflect.isMapLike(scopeResult.prototype)) {
                                ViewModel = scopeResult;
                            } else {
                                ViewModel = SimpleMap.extend(scopeResult);
                            }
                        }
                        if (ViewModel) {
                            viewModelInstance = new component.constructor.ViewModel(initialViewModelData);
                        }
                        viewModel = viewModelInstance;
                        return viewModelInstance;
                    }, initialViewModelData);
                }
                this.viewModel = viewModel;
                el[viewModelSymbol] = viewModel;
                el.viewModel = viewModel;
                domData.set.call(el, 'preventDataBindings', true);
                if (this.helpers !== undefined) {
                    canReflect.eachKey(this.helpers, function (val, prop) {
                        if (typeof val === 'function') {
                            options.helpers[prop] = val.bind(viewModel);
                        }
                    });
                }
                if (this.constructor.Control) {
                    this._control = new this.constructor.Control(el, {
                        scope: this.viewModel,
                        viewModel: this.viewModel,
                        destroy: callTeardownFunctions
                    });
                } else {
                    var removalDisposal = domMutate.onNodeRemoval(el, function () {
                        if (!el.ownerDocument.contains(el)) {
                            removalDisposal();
                            callTeardownFunctions();
                        }
                    });
                }
                var leakScope = {
                    toLightContent: this.leakScope === true,
                    intoShadowContent: this.leakScope === true
                };
                var hasShadowTemplate = !!this.constructor.renderer;
                var betweenTagsRenderer;
                var betweenTagsTagData;
                if (hasShadowTemplate) {
                    var shadowTagData;
                    if (leakScope.intoShadowContent) {
                        shadowTagData = {
                            scope: componentTagData.scope.add(this.viewModel, { viewModel: true }),
                            options: options
                        };
                    } else {
                        shadowTagData = {
                            scope: new Scope(this.viewModel, null, { viewModel: true }),
                            options: options
                        };
                    }
                    options.tags['can-slot'] = makeInsertionTagCallback('can-slot', componentTagData, shadowTagData, leakScope, function (el) {
                        var templates = componentTagData.templates;
                        if (templates) {
                            return templates[el.getAttribute('name')];
                        }
                    });
                    options.tags.content = makeInsertionTagCallback('content', componentTagData, shadowTagData, leakScope, function () {
                        return componentTagData.subtemplate;
                    });
                    betweenTagsRenderer = this.constructor.renderer;
                    betweenTagsTagData = shadowTagData;
                } else {
                    var lightTemplateTagData = {
                        scope: componentTagData.scope.add(this.viewModel, { viewModel: true }),
                        options: options
                    };
                    betweenTagsTagData = lightTemplateTagData;
                    betweenTagsRenderer = componentTagData.subtemplate || el.ownerDocument.createDocumentFragment.bind(el.ownerDocument);
                }
                var disconnectedCallback, componentInPage;
                var nodeList = nodeLists.register([], function () {
                    component._torndown = true;
                    domEvents.dispatch(el, 'beforeremove', false);
                    if (teardownBindings) {
                        teardownBindings();
                    }
                    if (disconnectedCallback) {
                        disconnectedCallback(el);
                    } else if (typeof viewModel.stopListening === 'function') {
                        viewModel.stopListening();
                    }
                }, componentTagData.parentNodeList || true, false);
                nodeList.expression = '<' + this.tag + '>';
                teardownFunctions.push(function () {
                    nodeLists.unregister(nodeList);
                });
                this.nodeList = nodeList;
                frag = betweenTagsRenderer(betweenTagsTagData.scope, betweenTagsTagData.options, nodeList);
                domMutateNode.appendChild.call(el, frag);
                nodeLists.update(nodeList, getChildNodes(el));
                if (viewModel && viewModel.connectedCallback) {
                    componentInPage = DOCUMENT().body.contains(el);
                    if (componentInPage) {
                        disconnectedCallback = viewModel.connectedCallback(el);
                    } else {
                        var insertionDisposal = domMutate.onNodeInsertion(el, function () {
                            insertionDisposal();
                            disconnectedCallback = viewModel.connectedCallback(el);
                        });
                    }
                }
                component._torndown = false;
            }
        });
        Component.prototype[viewInsertSymbol] = function (viewData) {
            if (this._torndown) {
                this.setup.apply(this, this._initialArgs);
            }
            viewData.nodeList.newDeepChildren.push(this.nodeList);
            return this.element;
        };
        module.exports = namespace.Component = Component;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-import@4.2.0#can-view-import*/
define('can-view-import@4.2.0#can-view-import', [
    'require',
    'exports',
    'module',
    'can-assign',
    'can-dom-data-state',
    'can-symbol',
    'can-globals/document/document',
    'can-child-nodes',
    'can-import-module',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-view-nodelist',
    'can-view-callbacks',
    'can-log/',
    'can-log/dev/dev'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var assign = require('can-assign');
        var canData = require('can-dom-data-state');
        var canSymbol = require('can-symbol');
        var DOCUMENT = require('can-globals/document/document');
        var getChildNodes = require('can-child-nodes');
        var importer = require('can-import-module');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var nodeLists = require('can-view-nodelist');
        var viewCallbacks = require('can-view-callbacks');
        var tag = viewCallbacks.tag;
        var canLog = require('can-log/');
        var dev = require('can-log/dev/dev');
        function setViewModel(element, viewModel) {
            element[canSymbol.for('can.viewModel')] = viewModel;
        }
        function processImport(el, tagData) {
            var moduleName = el.getAttribute('from');
            var templateModule = tagData.scope.get('scope.helpers.module');
            var parentName = templateModule ? templateModule.id : undefined;
            if (!moduleName) {
                return Promise.reject('No module name provided');
            }
            var importPromise = importer(moduleName, parentName);
            importPromise.catch(function (err) {
                canLog.error(err);
            });
            setViewModel(el, importPromise);
            canData.set.call(el, 'scope', importPromise);
            var scope = tagData.scope.add(importPromise, { notContext: true });
            var handOffTag = el.getAttribute('can-tag');
            if (handOffTag) {
                var callback = tag(handOffTag);
                if (!callback || callback === viewCallbacks.defaultCallback) {
                    dev.error(new Error('The tag \'' + handOffTag + '\' has not been properly registered.'));
                } else {
                    canData.set.call(el, 'preventDataBindings', true);
                    callback(el, assign(tagData, { scope: scope }));
                    canData.set.call(el, 'preventDataBindings', false);
                    setViewModel(el, importPromise);
                    canData.set.call(el, 'scope', importPromise);
                }
            } else {
                var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                nodeList.expression = '<' + this.tagName + '>';
                var frag = tagData.subtemplate ? tagData.subtemplate(scope, tagData.options, nodeList) : DOCUMENT().createDocumentFragment();
                var removalDisposal = domMutate.onNodeRemoval(el, function () {
                    if (!el.ownerDocument.contains(el)) {
                        removalDisposal();
                        nodeLists.unregister(nodeList);
                    }
                });
                domMutateNode.appendChild.call(el, frag);
                nodeLists.update(nodeList, getChildNodes(el));
            }
        }
        [
            'can-import',
            'can-dynamic-import'
        ].forEach(function (tagName) {
            tag(tagName, processImport.bind({ tagName: tagName }));
        });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*steal-stache@4.1.2#add-bundles*/
define('steal-stache@4.1.2#add-bundles', [
    'require',
    'exports',
    'module',
    '@loader'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        module.exports = function (dynamicImports, parentName) {
            if (!dynamicImports.length) {
                return Promise.resolve();
            }
            var localLoader = loader.localLoader || loader;
            var bundle = localLoader.bundle;
            if (!bundle) {
                bundle = localLoader.bundle = [];
            }
            var bundleNormalizes = [];
            dynamicImports.forEach(function (moduleName) {
                var bundleNormalize = loader.normalize(moduleName, parentName).then(function (moduleName) {
                    if (!~bundle.indexOf(moduleName)) {
                        bundle.push(moduleName);
                    }
                });
                bundleNormalizes.push(bundleNormalize);
            });
            return Promise.all(bundleNormalizes);
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*steal-config-utils@1.0.0#import-specifiers*/
define('steal-config-utils@1.0.0#import-specifiers', function (require, exports, module) {
    function getFromAST(ast) {
        var out = Object.create(null);
        ast.importDeclarations.forEach(function (imp) {
            out[imp.specifier] = {
                start: {
                    line: imp.loc.line,
                    column: 1
                }
            };
        });
        return out;
    }
    function addImportSpecifiers(load, ast) {
        var map = getFromAST(ast);
        load.metadata.importSpecifiers = map;
    }
    exports.getFromAST = getFromAST;
    exports.addImportSpecifiers = addImportSpecifiers;
});
/*steal-stache@4.1.2#steal-stache*/
define('steal-stache@4.1.2#steal-stache', [
    'require',
    'exports',
    'module',
    'can-stache-ast',
    './add-bundles',
    '@loader',
    'steal-config-utils/import-specifiers'
], function (require, exports, module) {
    'format cjs';
    var parse = require('can-stache-ast').parse;
    var addBundles = require('./add-bundles');
    var loader = require('@loader');
    var addImportSpecifiers = require('steal-config-utils/import-specifiers').addImportSpecifiers;
    function template(imports, intermediate, filename) {
        imports = JSON.stringify(imports);
        intermediate = JSON.stringify(intermediate);
        return 'define(' + imports + ',function(module, stache, mustacheCore){\n' + (filename ? '\tvar renderer = stache(' + JSON.stringify(filename) + ', ' + intermediate + ');\n' : '\tvar renderer = stache(' + intermediate + ');\n') + '\treturn function(scope, options, nodeList){\n' + '\t\tvar moduleOptions = Object.assign({}, options);\n' + '\t\tif(moduleOptions.helpers) {\n' + '\t\t\tmoduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);\n' + '\t\t} else {\n' + '\t\t\tmoduleOptions.module = module;\n' + '\t\t}\n' + '\t\treturn renderer(scope, moduleOptions, nodeList);\n' + '\t};\n' + '});';
    }
    function getFilename(name) {
        var hash = name.indexOf('#');
        var bang = name.indexOf('!');
        return name.slice(hash < bang ? hash + 1 : 0, bang);
    }
    function translate(load) {
        var filename;
        filename = getFilename(load.name);
        var ast = parse(filename, load.source);
        var commonDependencies = Promise.all([
            this.normalize('can-view-import', module.id),
            this.normalize('can-stache-bindings', module.id)
        ]);
        var localLoader = loader.localLoader || loader;
        if (localLoader.slimConfig) {
            localLoader.slimConfig.needsDynamicLoader = true;
            var push = Array.prototype.push;
            var toMap = localLoader.slimConfig.toMap;
            push.apply(toMap, ast.imports);
            push.apply(toMap, ast.dynamicImports);
        }
        addImportSpecifiers(load, ast);
        return Promise.all([
            addBundles(ast.dynamicImports, load.name),
            commonDependencies
        ]).then(function (results) {
            var imports = results[1];
            ast.imports.unshift.apply(ast.imports, imports);
            ast.imports.unshift('can-stache/src/mustache_core');
            ast.imports.unshift('can-stache');
            ast.imports.unshift('module');
            return template(ast.imports, ast.intermediate, filename);
        });
    }
    module.exports = { translate: translate };
});
/*shuttle-canstrap@1.0.60#alerts/alerts.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#alerts/alerts.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('alerts/alerts.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#each(messages)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert alert-',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' alert-dismissible',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'destroy()',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&times;',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'message',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                9
            ]
        },
        {
            'tokenType': 'done',
            'args': [9]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*can-util@3.12.0#js/is-array-like/is-array-like*/
define('can-util@3.12.0#js/is-array-like/is-array-like', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function isArrayLike(obj) {
        var type = typeof obj;
        if (type === 'string') {
            return true;
        } else if (type === 'number') {
            return false;
        }
        var length = obj && type !== 'boolean' && typeof obj !== 'number' && 'length' in obj && obj.length;
        return typeof obj !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    }
    module.exports = namespace.isArrayLike = isArrayLike;
});
/*can-util@3.12.0#js/is-iterable/is-iterable*/
define('can-util@3.12.0#js/is-iterable/is-iterable', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = function (obj) {
        return obj && !!obj[canSymbol.iterator || canSymbol.for('iterator')];
    };
});
/*can-util@3.12.0#js/each/each*/
define('can-util@3.12.0#js/each/each', [
    'require',
    'exports',
    'module',
    '../is-array-like/is-array-like',
    '../is-iterable/is-iterable',
    'can-symbol',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isArrayLike = require('../is-array-like/is-array-like');
    var has = Object.prototype.hasOwnProperty;
    var isIterable = require('../is-iterable/is-iterable');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    function each(elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (isArrayLike(elements)) {
                for (len = elements.length; i < len; i++) {
                    item = elements[i];
                    if (callback.call(context || item, item, i, elements) === false) {
                        break;
                    }
                }
            } else if (isIterable(elements)) {
                var iter = elements[canSymbol.iterator || canSymbol.for('iterator')]();
                var res, value;
                while (!(res = iter.next()).done) {
                    value = res.value;
                    callback.call(context || elements, Array.isArray(value) ? value[1] : value, value[0]);
                }
            } else if (typeof elements === 'object') {
                for (key in elements) {
                    if (has.call(elements, key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                        break;
                    }
                }
            }
        }
        return elements;
    }
    module.exports = namespace.each = each;
});
/*shuttle-canstrap@1.0.60#alerts/alerts*/
define('shuttle-canstrap@1.0.60#alerts/alerts', [
    'exports',
    'can-component',
    'can-define/map/',
    'can-define/list/',
    './alerts.stache!',
    'can-util/js/each/',
    'can-stache/'
], function (exports, _canComponent, _map, _list, _alerts, _each, _canStache) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.alerts = exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _alerts2 = _interopRequireDefault(_alerts);
    var _each2 = _interopRequireDefault(_each);
    var _canStache2 = _interopRequireDefault(_canStache);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _map2.default.extend({
        messages: { Default: _list2.default },
        _key: {
            type: 'number',
            default: 1
        },
        init: function init() {
            this._removeExpiredAlerts();
        },
        show: function show(options) {
            if (!options || !options.message) {
                return;
            }
            if (options.key || options.name) {
                this.remove(options);
            }
            this._push(options);
        },
        clear: function clear() {
            this.messages = new _list2.default();
        },
        remove: function remove(options) {
            if (!options || !options.key && !options.name && !options.type) {
                return;
            }
            this.messages = this.messages.filter(function (item) {
                var keep = true;
                if (options.key) {
                    keep = item.key !== options.key;
                } else {
                    if (options.name) {
                        keep = item.name !== options.name;
                    } else {
                        if (options.type) {
                            keep = (item.type || 'info') !== options.type;
                        }
                    }
                }
                return keep;
            });
        },
        _push: function _push(options, mode) {
            var key = this._key + 1;
            var self = this;
            var expiryDate = new Date();
            if (!options || !options.message) {
                return;
            }
            var type = options.type || 'info';
            expiryDate.setSeconds(expiryDate.getSeconds() + 10);
            var message = {
                message: _canStache2.default.safeString(options.message),
                type: type,
                mode: mode,
                key: key,
                name: options.name,
                expiryDate: expiryDate,
                destroy: function destroy() {
                    self.remove({ key: key });
                }
            };
            this.messages.push(message);
            this._key = key;
        },
        _removeExpiredAlerts: function _removeExpiredAlerts() {
            var self = this;
            var date = new Date();
            (0, _each2.default)(this.messages, function (item) {
                if (item.expiryDate && item.expiryDate < date) {
                    item.destroy();
                }
            });
            setTimeout(function () {
                self._removeExpiredAlerts();
            }, 500);
        }
    });
    var alerts = exports.alerts = new ViewModel();
    exports.default = _canComponent2.default.extend({
        tag: 'cs-alerts',
        view: _alerts2.default,
        viewModel: alerts
    });
});
/*shuttle-canstrap@1.0.60#autocomplete/autocomplete.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#autocomplete/autocomplete.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('autocomplete/autocomplete.stache', [
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:input',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search(scope.element)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:input',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-control dropdown-toggle ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if searchPromise.isResolved',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(searchPromise.value)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '../select(.)',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getText(.)',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'loadingText',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                16
            ]
        },
        {
            'tokenType': 'done',
            'args': [17]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*jquery@3.3.1#dist/jquery*/
(function (global, factory) {
    'use strict';
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    'use strict';
    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    var isFunction = function isFunction(obj) {
        return typeof obj === 'function' && typeof obj.nodeType !== 'number';
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var preservedScriptAttributes = {
        type: true,
        src: true,
        noModule: true
    };
    function DOMEval(code, doc, node) {
        doc = doc || document;
        var i, script = doc.createElement('script');
        script.text = code;
        if (node) {
            for (i in preservedScriptAttributes) {
                if (node[i]) {
                    script[i] = node[i];
                }
            }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) {
            return obj + '';
        }
        return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    }
    var version = '3.3.1', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function () {
            return slice.call(this);
        },
        get: function (num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },
        each: function (callback) {
            return jQuery.each(this, callback);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== 'object' && !isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
            throw new Error(msg);
        },
        noop: function () {
        },
        isPlainObject: function (obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        globalEval: function (code) {
            DOMEval(code);
        },
        each: function (obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function (elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        support: support
    });
    if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && 'length' in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
    }
    var Sizzle = function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                }
                return 0;
            }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                var i = 0, len = list.length;
                for (; i < len; i++) {
                    if (list[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', identifier = '(?:\\\\.|[\\w-]|[^\0-\\xa0])+', attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                'ID': new RegExp('^#(' + identifier + ')'),
                'CLASS': new RegExp('^\\.(' + identifier + ')'),
                'TAG': new RegExp('^(' + identifier + '|[*])'),
                'ATTR': new RegExp('^' + attributes),
                'PSEUDO': new RegExp('^' + pseudos),
                'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
                'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                var high = '0x' + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
                if (asCodePoint) {
                    if (ch === '\0') {
                        return '\uFFFD';
                    }
                    return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' ';
                }
                return '\\' + ch;
            }, unloadHandler = function () {
                setDocument();
            }, disabledAncestor = addCombinator(function (elem) {
                return elem.disabled === true && ('form' in elem || 'label' in elem);
            }, {
                dir: 'parentNode',
                next: 'legend'
            });
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els));
                } : function (target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {
                    }
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !compilerCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                        if (nodeType !== 1) {
                            newContext = context;
                            newSelector = selector;
                        } else if (context.nodeName.toLowerCase() !== 'object') {
                            if (nid = context.getAttribute('id')) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute('id', nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            while (i--) {
                                groups[i] = '#' + nid + ' ' + toSelector(groups[i]);
                            }
                            newSelector = groups.join(',');
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        if (newSelector) {
                            try {
                                push.apply(results, newContext.querySelectorAll(newSelector));
                                return results;
                            } catch (qsaError) {
                            } finally {
                                if (nid === expando) {
                                    context.removeAttribute('id');
                                }
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + ' ') > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + ' '] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var el = document.createElement('fieldset');
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally {
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                el = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split('|'), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
            };
        }
        function createDisabledPseudo(disabled) {
            return function (elem) {
                if ('form' in elem) {
                    if (elem.parentNode && elem.disabled === false) {
                        if ('label' in elem) {
                            if ('label' in elem.parentNode) {
                                return elem.parentNode.disabled === disabled;
                            } else {
                                return elem.disabled === disabled;
                            }
                        }
                        return elem.isDisabled === disabled || elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                } else if ('label' in elem) {
                    return elem.disabled === disabled;
                }
                return false;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== 'undefined' && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== 'HTML' : false;
        };
        setDocument = Sizzle.setDocument = function (node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                    subWindow.addEventListener('unload', unloadHandler, false);
                } else if (subWindow.attachEvent) {
                    subWindow.attachEvent('onunload', unloadHandler);
                }
            }
            support.attributes = assert(function (el) {
                el.className = 'i';
                return !el.getAttribute('className');
            });
            support.getElementsByTagName = assert(function (el) {
                el.appendChild(document.createComment(''));
                return !el.getElementsByTagName('*').length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function (el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute('id') === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [elem] : [];
                    }
                };
            } else {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                        return node && node.value === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            node = elem.getAttributeNode('id');
                            if (node && node.value === id) {
                                return [elem];
                            }
                            elems = context.getElementsByName(id);
                            i = 0;
                            while (elem = elems[i++]) {
                                node = elem.getAttributeNode('id');
                                if (node && node.value === id) {
                                    return [elem];
                                }
                            }
                        }
                        return [];
                    }
                };
            }
            Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== 'undefined') {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function (el) {
                    docElem.appendChild(el).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\r\\\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                    if (el.querySelectorAll('[msallowcapture^=\'\']').length) {
                        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                    }
                    if (!el.querySelectorAll('[selected]').length) {
                        rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                    }
                    if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                        rbuggyQSA.push('~=');
                    }
                    if (!el.querySelectorAll(':checked').length) {
                        rbuggyQSA.push(':checked');
                    }
                    if (!el.querySelectorAll('a#' + expando + '+*').length) {
                        rbuggyQSA.push('.#.+[+~]');
                    }
                });
                assert(function (el) {
                    el.innerHTML = '<a href=\'\' disabled=\'disabled\'></a>' + '<select disabled=\'disabled\'><option/></select>';
                    var input = document.createElement('input');
                    input.setAttribute('type', 'hidden');
                    el.appendChild(input).setAttribute('name', 'D');
                    if (el.querySelectorAll('[name=d]').length) {
                        rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                    }
                    if (el.querySelectorAll(':enabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(':disabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    el.querySelectorAll('*,:x');
                    rbuggyQSA.push(',.*:');
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (el) {
                    support.disconnectedMatch = matches.call(el, '*');
                    matches.call(el, '[s!=\'\']:x');
                    rbuggyMatches.push('!=', pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, '=\'$1\']');
            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function (sel) {
            return (sel + '').replace(rcssescape, fcssescape);
        };
        Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: true
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                'ATTR': function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                    if (match[2] === '~=') {
                        match[3] = ' ' + match[3] + ' ';
                    }
                    return match.slice(0, 4);
                },
                'CHILD': function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === 'nth') {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                        match[5] = +(match[7] + match[8] || match[3] === 'odd');
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                'PSEUDO': function (match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr['CHILD'].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || '';
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                'TAG': function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === '*' ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                'CLASS': function (className) {
                    var pattern = classCache[className + ' '];
                    return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                    });
                },
                'ATTR': function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === '!=';
                        }
                        if (!operator) {
                            return true;
                        }
                        result += '';
                        return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                    };
                },
                'CHILD': function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === 'only' && !start && 'nextSibling';
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [
                                            dirruns,
                                            nodeIndex,
                                            diff
                                        ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [
                                                    dirruns,
                                                    diff
                                                ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                'PSEUDO': function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            '',
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                'not': markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                'has': markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                'contains': markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                'lang': markFunction(function (lang) {
                    if (!ridentifier.test(lang || '')) {
                        Sizzle.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                'target': function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                'root': function (elem) {
                    return elem === docElem;
                },
                'focus': function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                'enabled': createDisabledPseudo(false),
                'disabled': createDisabledPseudo(true),
                'checked': function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                'selected': function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                'empty': function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                'parent': function (elem) {
                    return !Expr.pseudos['empty'](elem);
                },
                'header': function (elem) {
                    return rheader.test(elem.nodeName);
                },
                'input': function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                'button': function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === 'button' || name === 'button';
                },
                'text': function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                },
                'first': createPositionalPseudo(function () {
                    return [0];
                }),
                'last': createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                'even': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'odd': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, ' ')
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
                return false;
            } : function (elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                        dirruns,
                        doneName
                    ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if (skip && skip === elem.nodeName.toLowerCase()) {
                                elem = elem[dir] || elem;
                            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[key] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                    return indexOf(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                        checkContext = null;
                        return ret;
                    }];
            for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                    if (outermost) {
                        outermostContext = context === document || context || outermost;
                    }
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            if (!context && elem.ownerDocument !== document) {
                                setDocument(elem);
                                xml = !documentIsHTML;
                            }
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context || document, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function (selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (el) {
            return el.compareDocumentPosition(document.createElement('fieldset')) & 1;
        });
        if (!assert(function (el) {
                el.innerHTML = '<a href=\'#\'></a>';
                return el.firstChild.getAttribute('href') === '#';
            })) {
            addHandle('type|href|height|width', function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function (el) {
                el.innerHTML = '<input/>';
                el.firstChild.setAttribute('value', '');
                return el.firstChild.getAttribute('value') === '';
            })) {
            addHandle('value', function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function (el) {
                return el.getAttribute('disabled') == null;
            })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    ;
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier !== 'string') {
            return jQuery.grep(elements, function (elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ':not(' + expr + ')';
        }
        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== 'string') {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;
            if (!selector) {
                return this;
            }
            root = root || rootjQuery;
            if (typeof selector === 'string') {
                if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem) {
                            this[0] = elem;
                            this.length = 1;
                        }
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;
            } else if (isFunction(selector)) {
                return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
            }
            return jQuery.makeArray(selector, this);
        };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return siblings(elem.firstChild);
        },
        contents: function (elem) {
            if (nodeName(elem, 'iframe')) {
                return elem.contentDocument;
            }
            if (nodeName(elem, 'template')) {
                elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function () {
                locked = locked || options.once;
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }
                if (!options.memory) {
                    memory = false;
                }
                firing = false;
                if (locked) {
                    if (memory) {
                        list = [];
                    } else {
                        list = '';
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && toType(arg) !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },
                remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },
                empty: function () {
                    if (list) {
                        list = [];
                    }
                    return this;
                },
                disable: function () {
                    locked = queue = [];
                    list = memory = '';
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                        list = memory = '';
                    }
                    return this;
                },
                locked: function () {
                    return !!locked;
                },
                fireWith: function (context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [
                            context,
                            args.slice ? args.slice() : args
                        ];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            if (value && isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [value].slice(noValue));
            }
        } catch (value) {
            reject.apply(undefined, [value]);
        }
    }
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory'),
                        jQuery.Callbacks('memory'),
                        2
                    ],
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        0,
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        1,
                        'rejected'
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    'catch': function (fn) {
                        return promise.then(null, fn);
                    },
                    pipe: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && isFunction(returned.promise)) {
                                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                        var maxDepth = 0;
                        function resolve(depth, deferred, handler, special) {
                            return function () {
                                var that = this, args = arguments, mightThrow = function () {
                                        var returned, then;
                                        if (depth < maxDepth) {
                                            return;
                                        }
                                        returned = handler.apply(that, args);
                                        if (returned === deferred.promise()) {
                                            throw new TypeError('Thenable self-resolution');
                                        }
                                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                                        if (isFunction(then)) {
                                            if (special) {
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                            } else {
                                                maxDepth++;
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                            }
                                        } else {
                                            if (handler !== Identity) {
                                                that = undefined;
                                                args = [returned];
                                            }
                                            (special || deferred.resolveWith)(that, args);
                                        }
                                    }, process = special ? mightThrow : function () {
                                        try {
                                            mightThrow();
                                        } catch (e) {
                                            if (jQuery.Deferred.exceptionHook) {
                                                jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                            }
                                            if (depth + 1 >= maxDepth) {
                                                if (handler !== Thrower) {
                                                    that = undefined;
                                                    args = [e];
                                                }
                                                deferred.rejectWith(that, args);
                                            }
                                        }
                                    };
                                if (depth) {
                                    process();
                                } else {
                                    if (jQuery.Deferred.getStackHook) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout(process);
                                }
                            };
                        }
                        return jQuery.Deferred(function (newDefer) {
                            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
                }
                list.add(tuple[3].fire);
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), master = jQuery.Deferred(), updateFunc = function (i) {
                    return function (value) {
                        resolveContexts[i] = this;
                        resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (!--remaining) {
                            master.resolveWith(resolveContexts, resolveValues);
                        }
                    };
                };
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                if (master.state() === 'pending' || isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }
            return master.promise();
        }
    });
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function (error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn('jQuery.Deferred exception: ' + error.message, error.stack, stack);
        }
    };
    jQuery.readyException = function (error) {
        window.setTimeout(function () {
            throw error;
        });
    };
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function (fn) {
        readyList.then(fn).catch(function (error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
        }
    });
    jQuery.ready.then = readyList.then;
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready();
    }
    if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener('DOMContentLoaded', completed);
        window.addEventListener('load', completed);
    }
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === 'object') {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function (elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        if (chainable) {
            return elems;
        }
        if (bulk) {
            return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
    };
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }
    function camelCase(string) {
        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function (owner) {
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function (owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === 'string') {
                cache[camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function (owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function (owner, key, value) {
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
                return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while (i--) {
                    delete cache[key[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function (owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === 'true') {
            return true;
        }
        if (data === 'false') {
            return false;
        }
        if (data === 'null') {
            return null;
        }
        if (data === +data + '') {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = getData(data);
                } catch (e) {
                }
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf('data-') === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, 'hasDataAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }
            return access(this, function (value) {
                var data;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function () {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    dataPriv.remove(elem, [
                        type + 'queue',
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = dataPriv.get(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
    var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
    ];
    var isHiddenWithinTree = function (elem, el) {
        elem = el || elem;
        return elem.style.display === 'none' || elem.style.display === '' && jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, 'display') === 'none';
    };
    var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function () {
                return tween.cur();
            } : function () {
                return jQuery.css(elem, prop, '');
            }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), initialInUnit = (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
            return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
            display = 'block';
        }
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            display = elem.style.display;
            if (show) {
                if (display === 'none') {
                    values[index] = dataPriv.get(elem, 'display') || null;
                    if (!values[index]) {
                        elem.style.display = '';
                    }
                }
                if (elem.style.display === '' && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== 'none') {
                    values[index] = 'none';
                    dataPriv.set(elem, 'display', display);
                }
            }
        }
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === 'boolean') {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
        ],
        thead: [
            1,
            '<table>',
            '</table>'
        ],
        col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
        ],
        tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
        ],
        td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
        ],
        _default: [
            0,
            '',
            ''
        ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
            ret = context.getElementsByTagName(tag || '*');
        } else if (typeof context.querySelectorAll !== 'undefined') {
            ret = context.querySelectorAll(tag || '*');
        } else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }
        return ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (toType(elem) === 'object') {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement('div'));
                    tag = (rtagName.exec(elem) || [
                        '',
                        ''
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = '';
                }
            }
        }
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (contains) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || '')) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }());
    var documentElement = document.documentElement;
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === 'object') {
            if (typeof selector !== 'string') {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === 'string') {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function (event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, 'handle events');
            }
        },
        dispatch: function (nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === 'click' && event.button >= 1)) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        addProp: function (name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function () {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function () {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function (value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function (originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: { noBubble: true },
            focus: {
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            click: {
                trigger: function () {
                    if (this.type === 'checkbox' && this.click && nodeName(this, 'input')) {
                        this.click();
                        return false;
                    }
                },
                _default: function (event) {
                    return nodeName(event.target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
            var button = event.button;
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }
                if (button & 2) {
                    return 3;
                }
                if (button & 4) {
                    return 2;
                }
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        if (nodeName(elem, 'table') && nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
            return jQuery(elem).children('tbody')[0] || elem;
        }
        return elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || '').slice(0, 5) === 'true/') {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                hasScripts = scripts.length;
                for (; i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, 'script'));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || '').toLowerCase() !== 'module') {
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ''), doc, node);
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, 'script'));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function (html) {
            return html.replace(rxhtmlTag, '<$1></$2>');
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
        },
        cleanData: function (elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function (selector) {
            return remove(this, selector, true);
        },
        remove: function (selector) {
            return remove(this, selector);
        },
        text: function (value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = '';
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var ignored = [];
            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    var rboxStyle = new RegExp(cssExpand.join('|'), 'i');
    (function () {
        function computeStyleTests() {
            if (!div) {
                return;
            }
            container.style.cssText = 'position:absolute;left:-11111px;width:60px;' + 'margin-top:1px;padding:0;border:0';
            div.style.cssText = 'position:relative;display:block;box-sizing:border-box;overflow:scroll;' + 'margin:auto;border:1px;padding:1px;' + 'width:60%;top:1%';
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== '1%';
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = '60%';
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = 'absolute';
            scrollboxSizeVal = div.offsetWidth === 36 || 'absolute';
            documentElement.removeChild(container);
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        jQuery.extend(support, {
            boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function () {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function () {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    }());
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + '' : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
        }, cssPrefixes = [
            'Webkit',
            'Moz',
            'ms'
        ], emptyStyle = document.createElement('div').style;
    function vendorPropName(name) {
        if (name in emptyStyle) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function finalPropName(name) {
        var ret = jQuery.cssProps[name];
        if (!ret) {
            ret = jQuery.cssProps[name] = vendorPropName(name) || name;
        }
        return ret;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === 'width' ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? 'border' : 'content')) {
            return 0;
        }
        for (; i < 4; i += 2) {
            if (box === 'margin') {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
                delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (box !== 'padding') {
                    delta += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                } else {
                    extra += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                if (box === 'content') {
                    delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (box !== 'margin') {
                    delta -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
        }
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), val = curCSS(elem, dimension, styles), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', valueIsBorderBox = isBorderBox;
        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }
            val = 'auto';
        }
        valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]);
        if (val === 'auto' || !parseFloat(val) && jQuery.css(elem, 'display', false, styles) === 'inline') {
            val = elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)];
            valueIsBorderBox = true;
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles, val) + 'px';
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            'animationIterationCount': true,
            'columnCount': true,
            'fillOpacity': true,
            'flexGrow': true,
            'flexShrink': true,
            'fontWeight': true,
            'lineHeight': true,
            'opacity': true,
            'order': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        cssProps: {},
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = 'number';
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === 'number') {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px');
                }
                if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        'height',
        'width'
    ], function (i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, dimension, extra);
                    }) : getWidthOrHeight(elem, dimension, extra);
                }
            },
            set: function (elem, value, extra) {
                var matches, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles);
                if (isBorderBox && support.scrollboxSize() === styles.position) {
                    subtract -= Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, 'border', false, styles) - 0.5);
                }
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
            })) + 'px';
        }
    });
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (prefix !== 'margin') {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: 'swing'
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
        }
    }
    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }
        if (isBox && elem.nodeType === 1) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, 'display');
            }
            display = jQuery.css(elem, 'display');
            if (display === 'none') {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, 'display');
                    showHide([elem]);
                }
            }
            if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
                if (jQuery.css(elem, 'float') === 'none') {
                    if (!propTween) {
                        anim.done(function () {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === 'none' ? '' : display;
                        }
                    }
                    style.display = 'inline-block';
                }
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        propTween = false;
        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ('hidden' in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay });
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    showHide([elem], true);
                }
                anim.done(function () {
                    if (!hidden) {
                        showHide([elem]);
                    }
                    dataPriv.remove(elem, 'fxshow');
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                }
                if (!length) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                }
                deferred.resolveWith(elem, [animation]);
                return false;
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [
                            animation,
                            1,
                            0
                        ]);
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            '*': [function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }]
        },
        tweener: function (props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== 'number') {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || dataPriv.get(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (inProgress) {
            return;
        }
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function () {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
    }());
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === 'undefined') {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + '');
                return value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === 'radio' && nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function (elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    var tabindex = jQuery.find.attr(elem, 'tabindex');
                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }
                    return -1;
                }
            }
        },
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ');
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || '';
    }
    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }
        if (typeof value === 'string') {
            return value.match(rnothtmlwhite) || [];
        }
        return [];
    }
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr('class', '');
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') > -1) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value, isValidValue = type === 'string' || Array.isArray(value);
            if (typeof stateVal === 'boolean' && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function () {
                var className, i, self, classNames;
                if (isValidValue) {
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === 'boolean') {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, '__className__', className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '');
                    }
                }
            });
        },
        hasClass: function (selector) {
            var className, elem, i = 0;
            className = ' ' + selector + ' ';
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    if (typeof ret === 'string') {
                        return ret.replace(rreturn, '');
                    }
                    return ret == null ? '' : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null ? val : stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function (elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
        }
    });
    support.focusin = 'onfocusin' in window;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function (e) {
            e.stopPropagation();
        };
    jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = lastElement = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') > -1) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }
                        elem[type]();
                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function (type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    if (!support.focusin) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = Date.now();
    var rquery = /\?/;
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, 'text/xml');
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
        }
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && toType(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
                var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value);
            };
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&');
    };
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                if (val == null) {
                    return null;
                }
                if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, '\r\n')
                        };
                    });
                }
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === '*') {
                    current = prev;
                } else if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: 'GET',
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': true,
                'text json': JSON.parse,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (completed) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function () {
                        return completed ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        if (completed == null) {
                            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (completed == null) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (completed) {
                                jqXHR.always(map[jqXHR.status]);
                            } else {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement('a');
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, '');
            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);
                if (s.data && (s.processData || typeof s.data === 'string')) {
                    cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, '$1');
                    uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached;
                }
                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
                s.data = s.data.replace(r20, '+');
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (completed) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }
                    done(-1, e);
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (completed) {
                    return;
                }
                completed = true;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === 'HEAD') {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        }
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function (url) {
        return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            cache: true,
            async: false,
            global: false,
            'throws': true
        });
    };
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function (selector) {
            this.parent(selector).not('body').each(function () {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
            0: 200,
            1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                        headers['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                                if (type === 'abort') {
                                    xhr.abort();
                                } else if (type === 'error') {
                                    if (typeof xhr.status !== 'number') {
                                        complete(0, 'error');
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback('error');
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function () {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback('abort');
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery('<script>').prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on('load error', callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === 'error' ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2;
    }();
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
            return [];
        }
        if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument('');
                base = context.createElement('base');
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
            return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        if (isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || 'GET',
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [
                        jqXHR.responseText,
                        status,
                        jqXHR
                    ]);
                });
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var rect, win, elem = this[0];
            if (!elem) {
                return;
            }
            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offset = this.offset();
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.parentNode;
                }
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true);
                    parentOffset.left += jQuery.css(offsetParent, 'borderLeftWidth', true);
                }
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win;
                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([
        'top',
        'left'
    ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
        });
    });
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return access(this, function (elem, type, value) {
                    var doc;
                    if (isWindow(elem)) {
                        return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
    });
    jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;
        if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        if (!isFunction(fn)) {
            return undefined;
        }
        args = slice.call(arguments, 2);
        proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function (hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function (obj) {
        var type = jQuery.type(obj);
        return (type === 'number' || type === 'string') && !isNaN(obj - parseFloat(obj));
    };
    if (typeof define === 'function' && define.amd) {
        define('jquery@3.3.1#dist/jquery', [], function () {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
}));
/*shuttle-can-api@1.0.19#shuttle-can-api*/
define('shuttle-can-api@1.0.19#shuttle-can-api', [
    'exports',
    'jquery',
    'can-define/map/',
    'can-define/list/',
    'shuttle-guard',
    'can-util/js/each/'
], function (exports, _jquery, _map, _list, _shuttleGuard, _each) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.options = exports.Options = undefined;
    var _jquery2 = _interopRequireDefault(_jquery);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    var _each2 = _interopRequireDefault(_each);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _templateObject = _taggedTemplateLiteral(['Endpoint \'{endpoint}\' contains parameter \'{name}\' that is not at least 3 characters in length.'], ['Endpoint \'{endpoint}\' contains parameter \'{name}\' that is not at least 3 characters in length.']);
    function _taggedTemplateLiteral(strings, raw) {
        return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    var Options = exports.Options = _map2.default.extend({
        url: {
            type: 'string',
            default: '',
            get: function get(value) {
                if (!value) {
                    throw new Error('Use `import {options} from \'shuttle-can-api\';` to get the options and then set the api endpoint url `options.url = \'http://server-endpoint\';`.');
                }
                return value + (!value.endsWith('/') ? '/' : '');
            }
        }
    });
    var options = exports.options = new Options({});
    var parameterExpression = /\{.*?\}/g;
    var Api = _map2.default.extend('Api', {
        endpoint: {
            type: 'string',
            default: ''
        },
        cache: {
            type: 'boolean',
            default: false
        },
        working: {
            type: 'boolean',
            default: false
        },
        Map: { type: '*' },
        List: { type: '*' },
        _call: function _call(options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                try {
                    var o = options || {};
                    var parsedEndpoint = _this.parseEndpoint(_this.endpoint, o.parameters);
                    var ajax = {
                        url: parsedEndpoint.url,
                        type: o.method,
                        async: true,
                        beforeSend: o.beforeSend,
                        timeout: o.timeout || 60000
                    };
                    if (o.method.toLowerCase() === 'get') {
                        ajax.cache = _this.cache;
                    }
                    if (!!o.data) {
                        ajax.data = JSON.stringify(o.data || {});
                        ajax.contentType = 'application/json';
                    }
                    _jquery2.default.ajax(ajax).done(function (response) {
                        resolve(typeof response === 'string' ? eval('(' + response + ')') : response);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        reject(new Error(errorThrown));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        parseEndpoint: function parseEndpoint(endpoint, parameters) {
            _shuttleGuard2.default.againstUndefined(endpoint, 'endpoint');
            var p = parameters || {};
            var params = [];
            var match = void 0;
            do {
                match = parameterExpression.exec(endpoint);
                if (match) {
                    var name = match[0];
                    if (name.length < 3) {
                        throw new Error((0, _jquery2.default)(_templateObject));
                    }
                    params.push({
                        name: name.substr(1, name.length - 2),
                        index: match.index
                    });
                }
            } while (match);
            var url;
            if (endpoint.indexOf('http') < 0) {
                if (!this.endpoint) {
                    throw new Error('No \'endpoint\' has been specified.  You either need to use a full url (starting with http/https) or specify the endpoint when instantiating the api: new Api({ endpoint: \'users\' });');
                }
                url = options.url + endpoint;
            } else {
                url = endpoint;
            }
            (0, _each2.default)(params, function (param) {
                url = url.replace('{' + param.name + '}', !!p[param.name] ? p[param.name] : '');
            });
            return {
                url: url,
                parameters: params
            };
        },
        post: function post(data, parameters) {
            var _this2 = this;
            _shuttleGuard2.default.againstUndefined(data, 'data');
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this2;
                    _this2.working = true;
                    _this2._call({
                        data: data,
                        parameters: parameters,
                        method: 'POST'
                    }).then(function (response) {
                        self.working = false;
                        resolve(response);
                    }, function (error) {
                        self.working = false;
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        put: function put(data, parameters) {
            var _this3 = this;
            _shuttleGuard2.default.againstUndefined(data, 'data');
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this3;
                    _this3.working = true;
                    _this3._call({
                        data: data,
                        parameters: parameters,
                        method: 'PUT'
                    }).then(function (response) {
                        self.working = false;
                        resolve(response);
                    }).catch(function (error) {
                        self.working = false;
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        map: function map(parameters) {
            var _this4 = this;
            var self = this;
            this.working = true;
            return new Promise(function (resolve, reject) {
                try {
                    var _self = _this4;
                    _this4.working = true;
                    _this4._call({
                        method: 'GET',
                        parameters: parameters
                    }).then(function (response) {
                        var data;
                        _self.working = false;
                        if (!response) {
                            reject(new Error('No response received.'));
                            return;
                        }
                        data = response.data || response;
                        resolve(!!_self.Map ? new _self.Map(data) : new _map2.default(data));
                    }).catch(function (error) {
                        _self.working = false;
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        list: function list(parameters, options) {
            var _this5 = this;
            var o = options || {};
            return new Promise(function (resolve, reject) {
                try {
                    var self = _this5;
                    var callOptions = !!o.post ? {
                        method: 'POST',
                        data: parameters
                    } : {
                        method: 'GET',
                        parameters: parameters
                    };
                    _this5.working = true;
                    _this5._call(callOptions).then(function (response) {
                        var data;
                        self.working = false;
                        if (!response) {
                            reject(new Error('No response received.'));
                            return;
                        }
                        data = response.data || response;
                        if (!!self.List) {
                            resolve(new self.List(data));
                            return;
                        }
                        var result = new _list2.default();
                        (0, _each2.default)(data, function (item) {
                            result.push(!!self.Map ? new self.Map(item) : new _map2.default(item));
                        });
                        resolve(result);
                    }).catch(function (error) {
                        self.working = false;
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        },
        'delete': function _delete(parameters, data) {
            var _this6 = this;
            _shuttleGuard2.default.againstUndefined(parameters, 'parameters');
            var self = this;
            this.working = true;
            return new Promise(function (resolve, reject) {
                try {
                    var _self2 = _this6;
                    _this6.working = true;
                    _this6._call({
                        method: 'DELETE',
                        parameters: parameters,
                        data: data
                    }).then(function (response) {
                        _self2.working = false;
                        resolve(response);
                    }).catch(function (error) {
                        _self2.working = false;
                        reject(new Error(error));
                    });
                } catch (e) {
                    reject(e);
                }
            });
        }
    });
    exports.default = Api;
});
/*shuttle-canstrap@1.0.60#infrastructure/validation*/
define('shuttle-canstrap@1.0.60#infrastructure/validation', [
    'exports',
    'can-define/map/',
    'can-define/list/'
], function (exports, _map, _list) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ErrorList = exports.ErrorMap = undefined;
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ErrorMap = exports.ErrorMap = _map2.default.extend({
        message: {
            type: 'string',
            default: ''
        },
        related: {
            Type: _list2.default,
            default: []
        }
    });
    var ErrorList = exports.ErrorList = _list2.default.extend({ '#': ErrorMap });
});
/*shuttle-canstrap@1.0.60#infrastructure/component-view-model*/
define('shuttle-canstrap@1.0.60#infrastructure/component-view-model', [
    'exports',
    'can-define/map/',
    './options',
    './security',
    './click',
    './i18n',
    'can-util/js/each/',
    './validation'
], function (exports, _map, _options, _security, _click2, _i18n, _each, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _options2 = _interopRequireDefault(_options);
    var _security2 = _interopRequireDefault(_security);
    var _click3 = _interopRequireDefault(_click2);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _each2 = _interopRequireDefault(_each);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _map2.default.extend({
        placeholder: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        focus: {
            type: 'boolean',
            default: false
        },
        click: { type: 'observable' },
        checked: { type: 'boolean' },
        value: {
            type: '*',
            default: ''
        },
        label: {
            type: 'string',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        errorAttribute: {
            type: 'string',
            default: ''
        },
        errors: { Type: _validation.ErrorList },
        validationMessage: {
            type: 'string',
            default: '',
            get: function get(value) {
                var self = this;
                var message = undefined;
                if (this.errors) {
                    (0, _each2.default)(this.errors, function (error) {
                        if (error.related.indexOf(self.errorAttribute) > -1) {
                            message = error.message;
                            return false;
                        }
                        return true;
                    });
                }
                return message || value;
            }
        },
        working: { type: 'boolean' },
        permission: {
            type: 'string',
            default: ''
        },
        context: { type: '*' },
        elementClass: {
            type: 'string',
            default: ''
        },
        visible: {
            type: 'boolean',
            default: true
        },
        visibilityClass: {
            get: function get() {
                var visible = this.visible;
                return visible != undefined && !visible ? 'invisible' : '';
            }
        },
        iconClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.iconClass || 'fa';
            }
        },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || '';
            }
        },
        iconSpacingClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.iconSpacingClass;
            }
        },
        formGroupClass: { type: 'string' },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        disabled: {
            get: function get(value) {
                var disabled = !!value || !!this.working;
                if (this.permission && !disabled) {
                    disabled = !_security2.default.hasPermission(this.permission);
                }
                return disabled;
            }
        },
        required: {
            type: 'boolean',
            default: false
        },
        hasErrors: function hasErrors() {
            if (!this.errors) {
                return false;
            }
            return !!this.errors();
        },
        _click: function _click(ev) {
            return _click3.default.on(this, ev);
        }
    });
});
/*shuttle-canstrap@1.0.60#autocomplete/autocomplete*/
define('shuttle-canstrap@1.0.60#autocomplete/autocomplete', [
    'exports',
    'can-component/',
    'can-define/map/',
    './autocomplete.stache!',
    'shuttle-can-api',
    'can-util/js/each/',
    '../infrastructure/component-view-model',
    'shuttle-guard',
    '../infrastructure/i18n'
], function (exports, _canComponent, _map, _autocomplete, _shuttleCanApi, _each, _componentViewModel, _shuttleGuard, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _map2 = _interopRequireDefault(_map);
    var _autocomplete2 = _interopRequireDefault(_autocomplete);
    var _shuttleCanApi2 = _interopRequireDefault(_shuttleCanApi);
    var _each2 = _interopRequireDefault(_each);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        _api: {},
        text: {
            type: 'string',
            default: ''
        },
        getText: function getText(map) {
            _shuttleGuard2.default.againstUndefined(map, 'map');
            var text = map[this.textAttribute];
            if (text == undefined) {
                return '[\'undefined\' returned from \'textAttribute\' with name \'' + this.textAttribute + '\']';
            }
            return typeof text === 'function' ? text() : text;
        },
        loadingText: {
            type: 'string',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        map: { Type: _map2.default },
        mappingFunction: {
            type: 'compute',
            default: undefined
        },
        searchMethod: {
            type: 'string',
            default: 'get'
        },
        searchAttribute: {
            type: 'string',
            default: 'search'
        },
        textAttribute: {
            type: 'string',
            default: 'text'
        },
        endpoint: {
            type: 'string',
            set: function set(value) {
                _shuttleGuard2.default.againstUndefined(value, 'value');
                this._api = new _shuttleCanApi2.default({ endpoint: value });
                return value;
            }
        },
        searchValue: {
            type: 'string',
            default: ''
        },
        get searchPromise() {
            var self = this;
            var promise;
            var o = {};
            o[this.searchAttribute] = encodeURIComponent(this.searchValue);
            promise = this.searchMethod.toLowerCase() === 'get' ? this._api.list(o) : this._api.post(o);
            if (!!this.mappingCallback) {
                promise.then(function (response) {
                    var result = new DefineList();
                    (0, _each2.default)(response, function (item) {
                        result.push(self.mappingFunction.call(this, item));
                    });
                    return result;
                });
            }
            return promise;
        },
        search: function search(el) {
            this.searchValue = el.value;
            $(el).dropdown();
        },
        select: function select(map) {
            this.map = map;
            this.text = this.getText(map);
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-autocomplete',
        ViewModel: ViewModel,
        view: _autocomplete2.default
    });
});
/*shuttle-canstrap@1.0.60#button/button.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button/button.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button/button.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(hasActions)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn-group',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'caret',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(actions)',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(isSeparator)',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-divider',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'click()',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [22]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button/button*/
define('shuttle-canstrap@1.0.60#button/button', [
    'exports',
    'can-component',
    'can-define/list/',
    './button.stache!',
    '../infrastructure/component-view-model'
], function (exports, _canComponent, _list, _button, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ActionList = exports.ActionMap = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _list2 = _interopRequireDefault(_list);
    var _button2 = _interopRequireDefault(_button);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ActionMap = exports.ActionMap = _componentViewModel2.default.extend({
        isSeparator: {
            type: 'boolean',
            default: false
        }
    });
    var ActionList = exports.ActionList = _list2.default.extend({ '#': ActionMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        hasActions: {
            get: function get() {
                return this.actions && this.actions.length > 0;
            }
        },
        actions: { Type: ActionList },
        buttonClass: {
            get: function get() {
                return 'btn ' + (this.hasActions ? 'dropdown-toggle' : '') + ' ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button',
        view: _button2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#button-back/button-back.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button-back/button-back.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button-back/button-back.stache', [
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'back()',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button-back/button-back*/
define('shuttle-canstrap@1.0.60#button-back/button-back', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    '../infrastructure/options',
    './button-back.stache!'
], function (exports, _canComponent, _componentViewModel, _options, _buttonBack) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    var _buttonBack2 = _interopRequireDefault(_buttonBack);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        back: function back() {
            window.history.back();
        },
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.back.iconNameClass;
            }
        },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button-back',
        view: _buttonBack2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#button-group/button-group.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button-group/button-group.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button-group/button-group.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn-group',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(buttons)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:bind',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconClass',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconNameClass',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(text)',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconSpacingClass',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'done',
            'args': [8]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button-group/button-group*/
define('shuttle-canstrap@1.0.60#button-group/button-group', [
    'exports',
    'can-define/map/',
    'can-define/list/',
    'can-component',
    './button-group.stache!',
    '../infrastructure/component-view-model'
], function (exports, _map, _list, _canComponent, _buttonGroup, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ButtonList = exports.ButtonMap = undefined;
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _buttonGroup2 = _interopRequireDefault(_buttonGroup);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonMap = exports.ButtonMap = _componentViewModel2.default.extend({
        type: {
            get: function get(type) {
                return type || 'button';
            }
        }
    });
    var ButtonList = exports.ButtonList = _list2.default.extend({ '#': ButtonMap });
    var ViewModel = exports.ViewModel = _map2.default.extend({ buttons: { Type: ButtonList } });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button-group',
        view: _buttonGroup2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#button-refresh/button-refresh.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button-refresh/button-refresh.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button-refresh/button-refresh.stache', [
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button-refresh/button-refresh*/
define('shuttle-canstrap@1.0.60#button-refresh/button-refresh', [
    'exports',
    'can-component',
    './button-refresh.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/options'
], function (exports, _canComponent, _buttonRefresh, _componentViewModel, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _buttonRefresh2 = _interopRequireDefault(_buttonRefresh);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.refresh.iconNameClass;
            }
        },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button-refresh',
        ViewModel: ViewModel,
        view: _buttonRefresh2.default
    });
});
/*shuttle-canstrap@1.0.60#button-remove/button-remove.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button-remove/button-remove.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button-remove/button-remove.stache', [
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconClass',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconNameClass',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(text)',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'iconSpacingClass',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button-remove/button-remove*/
define('shuttle-canstrap@1.0.60#button-remove/button-remove', [
    'exports',
    'can-component',
    './button-remove.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/i18n',
    '../infrastructure/options',
    '../infrastructure/click'
], function (exports, _canComponent, _buttonRemove, _componentViewModel, _i18n, _options, _click2) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _buttonRemove2 = _interopRequireDefault(_buttonRemove);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _options2 = _interopRequireDefault(_options);
    var _click3 = _interopRequireDefault(_click2);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.remove.iconNameClass;
            }
        },
        _click: function _click(ev) {
            var self = this;
            var useDefault = true;
            var itemName = this.itemName;
            var message = !itemName ? _i18n2.default.value(_options2.default.button.remove.i18n.removeItemConfirmation) : _i18n2.default.value(_options2.default.button.remove.i18n.removeItemConfirmationNamed, { itemName: _i18n2.default.value(itemName) });
            ev.stopPropagation();
            if (!!_options2.default.button.remove.confirmation) {
                _options2.default.button.remove.confirmation.call(self, {
                    message: message,
                    primaryClick: function primaryClick() {
                        _click3.default.on(self);
                    }
                });
                useDefault = false;
            }
            if (useDefault && confirm(message)) {
                _click3.default.on(this);
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button-remove',
        ViewModel: ViewModel,
        view: _buttonRemove2.default
    });
});
/*shuttle-canstrap@1.0.60#button-submit/button-submit.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#button-submit/button-submit.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('button-submit/button-submit.stache', [
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled:bind',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(iconNameClass)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'buttonIconClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#button-submit/button-submit*/
define('shuttle-canstrap@1.0.60#button-submit/button-submit', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    '../infrastructure/options',
    './button-submit.stache!'
], function (exports, _canComponent, _componentViewModel, _options, _buttonSubmit) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _options2 = _interopRequireDefault(_options);
    var _buttonSubmit2 = _interopRequireDefault(_buttonSubmit);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        iconNameClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.button.submit.iconNameClass;
            }
        },
        buttonClass: {
            get: function get() {
                return 'btn ' + this.elementClass + ' ' + this.visibilityClass;
            }
        },
        buttonIconClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-button-submit',
        view: _buttonSubmit2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#checkbox/checkbox.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#checkbox/checkbox.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('checkbox/checkbox.stache', [
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkboxIconClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#checkbox/checkbox*/
define('shuttle-canstrap@1.0.60#checkbox/checkbox', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './checkbox.stache!'
], function (exports, _canComponent, _componentViewModel, _checkbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        checkedIconClass: {
            type: 'string',
            default: 'fa-check-square-o'
        },
        uncheckedIconClass: {
            type: 'string',
            default: 'fa-square-o'
        },
        checked: {
            type: 'boolean',
            default: false
        },
        checkboxIconClass: {
            get: function get() {
                return this.iconClass + ' ' + (!!this.checked ? this.checkedIconClass : this.uncheckedIconClass);
            }
        },
        click: function click() {
            this.checked = !this.checked;
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-checkbox',
        ViewModel: ViewModel,
        view: _checkbox2.default
    });
});
/*shuttle-canstrap@1.0.60#collapse/collapse.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#collapse/collapse.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('collapse/collapse.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-controls',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-controls',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h5',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'mb-0',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h5',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapseIconClass',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h5',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(collapsed)',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hide',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'show',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'collapseId',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-header',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(accordionId)',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-parent',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'accordionId',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-parent',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-body',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#infrastructure/id-generator*/
define('shuttle-canstrap@1.0.60#infrastructure/id-generator', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _id = 1;
    var generator = function generator() {
        return _id++;
    };
    exports.default = generator;
});
/*shuttle-canstrap@1.0.60#collapse/collapse*/
define('shuttle-canstrap@1.0.60#collapse/collapse', [
    'exports',
    'can-component',
    './collapse.stache!',
    '../infrastructure/component-view-model',
    '../infrastructure/id-generator',
    'jquery'
], function (exports, _canComponent, _collapse, _componentViewModel, _idGenerator, _jquery) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _collapse2 = _interopRequireDefault(_collapse);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.collapseId = 'collapse-' + (0, _idGenerator2.default)().toString();
        },
        collapseId: { type: 'string' },
        accordionId: { type: 'string' },
        hasAccordionId: {
            type: 'boolean',
            get: function get() {
                return !!this.accordionId;
            }
        },
        expandedIconClass: {
            type: 'string',
            default: 'fa-chevron-right'
        },
        collapsedIconClass: {
            type: 'string',
            default: 'fa-chevron-down'
        },
        collapsed: {
            type: 'boolean',
            default: function _default() {
                return !!this.accordionId;
            }
        },
        collapseIconClass: {
            get: function get() {
                return 'float-right ' + this.iconClass + ' ' + (!!this.collapsed ? this.collapsedIconClass : this.expandedIconClass);
            }
        },
        connectedCallback: function connectedCallback() {
            var self = this;
            var el = (0, _jquery2.default)('#' + this.collapseId);
            el.on('hidden.bs.collapse', function () {
                self.collapsed = true;
            });
            el.on('shown.bs.collapse', function () {
                self.collapsed = false;
            });
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-collapse',
        view: _collapse2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#fetching/fetching.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#fetching/fetching.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('fetching/fetching.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel-title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'card-body',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n      ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-bar progress-bar-striped progress-bar-animated',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progressbar',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuenow',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '100',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuenow',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuemin',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '0',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuemin',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-valuemax',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '100',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-valuemax',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'width: 100%;',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n      ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n  ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [11]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#fetching/fetching*/
define('shuttle-canstrap@1.0.60#fetching/fetching', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './fetching.stache!',
    '../infrastructure/i18n'
], function (exports, _canComponent, _componentViewModel, _fetching, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _fetching2 = _interopRequireDefault(_fetching);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-fetching',
        view: _fetching2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#form/form.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form/form.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form/form.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'onsubmit',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'return false;',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'onsubmit',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(title)',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-heading',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-title',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-body',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'content',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                12
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form/form*/
define('shuttle-canstrap@1.0.60#form/form', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './form.stache',
    '../infrastructure/i18n',
    '../infrastructure/options'
], function (exports, _canComponent, _componentViewModel, _form, _i18n, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _form2 = _interopRequireDefault(_form);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        title: {
            type: 'string',
            default: '',
            get: function get(title) {
                return _i18n2.default.value(title);
            }
        },
        elementClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.form.elementClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form',
        view: _form2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#form-autocomplete/form-autocomplete.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-autocomplete/form-autocomplete.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-autocomplete/form-autocomplete.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-autocomplete',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'this:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '.',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'this:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-autocomplete',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-autocomplete/form-autocomplete*/
define('shuttle-canstrap@1.0.60#form-autocomplete/form-autocomplete', [
    'exports',
    'can-component/',
    '../autocomplete/',
    './form-autocomplete.stache!'
], function (exports, _canComponent, _autocomplete, _formAutocomplete) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _formAutocomplete2 = _interopRequireDefault(_formAutocomplete);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-autocomplete',
        ViewModel: _autocomplete.ViewModel,
        view: _formAutocomplete2.default
    });
});
/*shuttle-canstrap@1.0.60#form-checkbox/form-checkbox.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-checkbox/form-checkbox.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-checkbox/form-checkbox.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-checkbox',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'checked:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checked',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'checked:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-checkbox',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'click:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'click',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'click:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-checkbox/form-checkbox*/
define('shuttle-canstrap@1.0.60#form-checkbox/form-checkbox', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './form-checkbox.stache!'
], function (exports, _canComponent, _componentViewModel, _formCheckbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formCheckbox2 = _interopRequireDefault(_formCheckbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        click: function click() {
            this.checked = !this.checked;
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-checkbox',
        ViewModel: ViewModel,
        view: _formCheckbox2.default
    });
});
/*shuttle-canstrap@1.0.60#form-group/form-group.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-group/form-group.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-group/form-group.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-form-group ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'visibilityClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-validation',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'message:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'message:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-validation',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-group/form-group*/
define('shuttle-canstrap@1.0.60#form-group/form-group', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './form-group.stache!',
    '../infrastructure/options'
], function (exports, _canComponent, _componentViewModel, _formGroup, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formGroup2 = _interopRequireDefault(_formGroup);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        elementClass: {
            type: 'string',
            get: function get(value) {
                return value || _options2.default.formGroup.elementClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-group',
        ViewModel: ViewModel,
        view: _formGroup2.default
    });
});
/*shuttle-canstrap@1.0.60#form-input/form-input.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-input/form-input.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-input/form-input.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-input/form-input*/
define('shuttle-canstrap@1.0.60#form-input/form-input', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './form-input.stache!'
], function (exports, _canComponent, _componentViewModel, _formInput) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _formInput2 = _interopRequireDefault(_formInput);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        type: {
            get: function get(type) {
                return type || 'text';
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-input',
        ViewModel: ViewModel,
        view: _formInput2.default
    });
});
/*shuttle-canstrap@1.0.60#input-datetime/input-datetime.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#input-datetime/input-datetime.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('input-datetime/input-datetime.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'position-relative ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'containerClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'inputClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'datetimepicker',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-target',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*moment@2.22.2#moment*/
define('moment@2.22.2#moment', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '//! moment.js\n\n;(function (global, factory) {\n    typeof exports === \'object\' && typeof module !== \'undefined\' ? module.exports = factory() :\n    typeof define === \'function\' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { \'use strict\';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === \'[object Array]\';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn\'t for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === \'[object Object]\';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === \'number\' || Object.prototype.toString.call(input) === \'[object Number]\';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === \'[object Date]\';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, \'toString\')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, \'valueOf\')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  \'undefined\') && console.warn) {\n            console.warn(\'Deprecation warning: \' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = \'\';\n                    if (typeof arguments[i] === \'object\') {\n                        arg += \'\\n[\' + i + \'] \';\n                        for (var key in arguments[0]) {\n                            arg += key + \': \' + arguments[0][key] + \', \';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + \'\\nArguments: \' + Array.prototype.slice.call(args).join(\'\') + \'\\n\' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === \'[object Function]\';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this[\'_\' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove "ordinalParse" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                \'|\' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don\'t modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : \'[Today at] LT\',\n        nextDay : \'[Tomorrow at] LT\',\n        nextWeek : \'dddd [at] LT\',\n        lastDay : \'[Yesterday at] LT\',\n        lastWeek : \'[Last] dddd [at] LT\',\n        sameElse : \'L\'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar[\'sameElse\'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : \'h:mm:ss A\',\n        LT   : \'h:mm A\',\n        L    : \'MM/DD/YYYY\',\n        LL   : \'MMMM D, YYYY\',\n        LLL  : \'MMMM D, YYYY h:mm A\',\n        LLLL : \'dddd, MMMM D, YYYY h:mm A\'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = \'Invalid date\';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = \'%d\';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace(\'%d\', number);\n    }\n\n    var defaultRelativeTime = {\n        future : \'in %s\',\n        past   : \'%s ago\',\n        s  : \'a few seconds\',\n        ss : \'%d seconds\',\n        m  : \'a minute\',\n        mm : \'%d minutes\',\n        h  : \'an hour\',\n        hh : \'%d hours\',\n        d  : \'a day\',\n        dd : \'%d days\',\n        M  : \'a month\',\n        MM : \'%d months\',\n        y  : \'a year\',\n        yy : \'%d years\'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? \'future\' : \'past\'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + \'s\'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === \'string\' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = \'\' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? \'+\' : \'\') : \'-\') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    \'M\'\n    // padded:   [\'MM\', 2]\n    // ordinal:  \'Mo\'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === \'string\') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, \'\');\n        }\n        return input.replace(/\\\\/g, \'\');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \'\', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}[\'a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace(\'\\\\\', \'\').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \'\\\\$&\');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === \'string\') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken(\'Y\', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? \'\' + y : \'+\' + y;\n    });\n\n    addFormatToken(0, [\'YY\', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, [\'YYYY\',   4],       0, \'year\');\n    addFormatToken(0, [\'YYYYY\',  5],       0, \'year\');\n    addFormatToken(0, [\'YYYYYY\', 6, true], 0, \'year\');\n\n    // ALIASES\n\n    addUnitAlias(\'year\', \'y\');\n\n    // PRIORITIES\n\n    addUnitPriority(\'year\', 1);\n\n    // PARSING\n\n    addRegexToken(\'Y\',      matchSigned);\n    addRegexToken(\'YY\',     match1to2, match2);\n    addRegexToken(\'YYYY\',   match1to4, match4);\n    addRegexToken(\'YYYYY\',  match1to6, match6);\n    addRegexToken(\'YYYYYY\', match1to6, match6);\n\n    addParseToken([\'YYYYY\', \'YYYYYY\'], YEAR);\n    addParseToken(\'YYYY\', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken(\'YY\', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken(\'Y\', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet(\'FullYear\', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d[\'get\' + (mom._isUTC ? \'UTC\' : \'\') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === \'FullYear\' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d[\'set\' + (mom._isUTC ? \'UTC\' : \'\') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d[\'set\' + (mom._isUTC ? \'UTC\' : \'\') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === \'object\') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'M\', [\'MM\', 2], \'Mo\', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken(\'MMM\', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken(\'MMMM\', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias(\'month\', \'M\');\n\n    // PRIORITY\n\n    addUnitPriority(\'month\', 8);\n\n    // PARSING\n\n    addRegexToken(\'M\',    match1to2);\n    addRegexToken(\'MM\',   match1to2, match2);\n    addRegexToken(\'MMM\',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken(\'MMMM\', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken([\'M\', \'MM\'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken([\'MMM\', \'MMMM\'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn\'t find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = \'January_February_March_April_May_June_July_August_September_October_November_December\'.split(\'_\');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months[\'standalone\'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? \'format\' : \'standalone\'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = \'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\'.split(\'_\');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort[\'standalone\'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? \'format\' : \'standalone\'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, \'\').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, \'\').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === \'MMM\') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === \'MMM\') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don\'t have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\'^\' + this.months(mom, \'\').replace(\'.\', \'\') + \'$\', \'i\');\n                this._shortMonthsParse[i] = new RegExp(\'^\' + this.monthsShort(mom, \'\').replace(\'.\', \'\') + \'$\', \'i\');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = \'^\' + this.months(mom, \'\') + \'|^\' + this.monthsShort(mom, \'\');\n                this._monthsParse[i] = new RegExp(regex.replace(\'.\', \'\'), \'i\');\n            }\n            // test the regex\n            if (strict && format === \'MMMM\' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === \'MMM\' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === \'string\') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d[\'set\' + (mom._isUTC ? \'UTC\' : \'\') + \'Month\'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, \'Month\');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, \'_monthsRegex\')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \'_monthsShortRegex\')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, \'_monthsRegex\')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \'_monthsRegex\')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don\'t have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, \'\'));\n            longPieces.push(this.months(mom, \'\'));\n            mixedPieces.push(this.months(mom, \'\'));\n            mixedPieces.push(this.monthsShort(mom, \'\'));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp(\'^(\' + mixedPieces.join(\'|\') + \')\', \'i\');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\'^(\' + longPieces.join(\'|\') + \')\', \'i\');\n        this._monthsShortStrictRegex = new RegExp(\'^(\' + shortPieces.join(\'|\') + \')\', \'i\');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can\'t just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'w\', [\'ww\', 2], \'wo\', \'week\');\n    addFormatToken(\'W\', [\'WW\', 2], \'Wo\', \'isoWeek\');\n\n    // ALIASES\n\n    addUnitAlias(\'week\', \'w\');\n    addUnitAlias(\'isoWeek\', \'W\');\n\n    // PRIORITIES\n\n    addUnitPriority(\'week\', 5);\n    addUnitPriority(\'isoWeek\', 5);\n\n    // PARSING\n\n    addRegexToken(\'w\',  match1to2);\n    addRegexToken(\'ww\', match1to2, match2);\n    addRegexToken(\'W\',  match1to2);\n    addRegexToken(\'WW\', match1to2, match2);\n\n    addWeekParseToken([\'w\', \'ww\', \'W\', \'WW\'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, \'d\');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, \'d\');\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'d\', 0, \'do\', \'day\');\n\n    addFormatToken(\'dd\', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken(\'ddd\', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken(\'dddd\', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken(\'e\', 0, 0, \'weekday\');\n    addFormatToken(\'E\', 0, 0, \'isoWeekday\');\n\n    // ALIASES\n\n    addUnitAlias(\'day\', \'d\');\n    addUnitAlias(\'weekday\', \'e\');\n    addUnitAlias(\'isoWeekday\', \'E\');\n\n    // PRIORITY\n    addUnitPriority(\'day\', 11);\n    addUnitPriority(\'weekday\', 11);\n    addUnitPriority(\'isoWeekday\', 11);\n\n    // PARSING\n\n    addRegexToken(\'d\',    match1to2);\n    addRegexToken(\'e\',    match1to2);\n    addRegexToken(\'E\',    match1to2);\n    addRegexToken(\'dd\',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken(\'ddd\',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken(\'dddd\',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken([\'dd\', \'ddd\', \'dddd\'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn\'t get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken([\'d\', \'e\', \'E\'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== \'string\') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === \'number\') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === \'string\') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = \'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\'.split(\'_\');\n    function localeWeekdays (m, format) {\n        if (!m) {\n            return isArray(this._weekdays) ? this._weekdays :\n                this._weekdays[\'standalone\'];\n        }\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? \'format\' : \'standalone\'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = \'Sun_Mon_Tue_Wed_Thu_Fri_Sat\'.split(\'_\');\n    function localeWeekdaysShort (m) {\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = \'Su_Mo_Tu_We_Th_Fr_Sa\'.split(\'_\');\n    function localeWeekdaysMin (m) {\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, \'\').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, \'\').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, \'\').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === \'dddd\') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === \'ddd\') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === \'dddd\') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === \'ddd\') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don\'t have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\'^\' + this.weekdays(mom, \'\').replace(\'.\', \'\\\\.?\') + \'$\', \'i\');\n                this._shortWeekdaysParse[i] = new RegExp(\'^\' + this.weekdaysShort(mom, \'\').replace(\'.\', \'\\\\.?\') + \'$\', \'i\');\n                this._minWeekdaysParse[i] = new RegExp(\'^\' + this.weekdaysMin(mom, \'\').replace(\'.\', \'\\\\.?\') + \'$\', \'i\');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = \'^\' + this.weekdays(mom, \'\') + \'|^\' + this.weekdaysShort(mom, \'\') + \'|^\' + this.weekdaysMin(mom, \'\');\n                this._weekdaysParse[i] = new RegExp(regex.replace(\'.\', \'\'), \'i\');\n            }\n            // test the regex\n            if (strict && format === \'dddd\' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === \'ddd\' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === \'dd\' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, \'d\');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, \'d\');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \'_weekdaysRegex\')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \'_weekdaysRegex\')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \'_weekdaysRegex\')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \'_weekdaysShortRegex\')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, \'_weekdaysRegex\')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, \'_weekdaysMinRegex\')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don\'t have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, \'\');\n            shortp = this.weekdaysShort(mom, \'\');\n            longp = this.weekdays(mom, \'\');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp(\'^(\' + mixedPieces.join(\'|\') + \')\', \'i\');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\'^(\' + longPieces.join(\'|\') + \')\', \'i\');\n        this._weekdaysShortStrictRegex = new RegExp(\'^(\' + shortPieces.join(\'|\') + \')\', \'i\');\n        this._weekdaysMinStrictRegex = new RegExp(\'^(\' + minPieces.join(\'|\') + \')\', \'i\');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken(\'H\', [\'HH\', 2], 0, \'hour\');\n    addFormatToken(\'h\', [\'hh\', 2], 0, hFormat);\n    addFormatToken(\'k\', [\'kk\', 2], 0, kFormat);\n\n    addFormatToken(\'hmm\', 0, 0, function () {\n        return \'\' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken(\'hmmss\', 0, 0, function () {\n        return \'\' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken(\'Hmm\', 0, 0, function () {\n        return \'\' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken(\'Hmmss\', 0, 0, function () {\n        return \'\' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem(\'a\', true);\n    meridiem(\'A\', false);\n\n    // ALIASES\n\n    addUnitAlias(\'hour\', \'h\');\n\n    // PRIORITY\n    addUnitPriority(\'hour\', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken(\'a\',  matchMeridiem);\n    addRegexToken(\'A\',  matchMeridiem);\n    addRegexToken(\'H\',  match1to2);\n    addRegexToken(\'h\',  match1to2);\n    addRegexToken(\'k\',  match1to2);\n    addRegexToken(\'HH\', match1to2, match2);\n    addRegexToken(\'hh\', match1to2, match2);\n    addRegexToken(\'kk\', match1to2, match2);\n\n    addRegexToken(\'hmm\', match3to4);\n    addRegexToken(\'hmmss\', match5to6);\n    addRegexToken(\'Hmm\', match3to4);\n    addRegexToken(\'Hmmss\', match5to6);\n\n    addParseToken([\'H\', \'HH\'], HOUR);\n    addParseToken([\'k\', \'kk\'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken([\'a\', \'A\'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken([\'h\', \'hh\'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\'hmm\', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\'hmmss\', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken(\'Hmm\', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken(\'Hmmss\', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + \'\').toLowerCase().charAt(0) === \'p\');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? \'pm\' : \'PM\';\n        } else {\n            return isLower ? \'am\' : \'AM\';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet(\'Hours\', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace(\'_\', \'-\') : key;\n    }\n\n    // pick the locale from the array\n    // try [\'en-au\', \'en-gb\'] as \'en-au\', \'en-gb\', \'en\', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it\'s a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split(\'-\');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split(\'-\') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join(\'-\'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== \'undefined\') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire(\'./locale/\' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  \'undefined\') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\'Locale \' + key +  \' not found. Did you forget to load it?\');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\'defineLocaleOverride\',\n                        \'use moment.updateLocale(localeName, config) to change \' +\n                        \'an existing locale. moment.defineLocale(localeName, \' +\n                        \'config) should only be used for creating a new locale \' +\n                        \'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.\');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won\'t end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don\'t default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== \'undefined\' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        [\'YYYYYY-MM-DD\', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        [\'YYYY-MM-DD\', /\\d{4}-\\d\\d-\\d\\d/],\n        [\'GGGG-[W]WW-E\', /\\d{4}-W\\d\\d-\\d/],\n        [\'GGGG-[W]WW\', /\\d{4}-W\\d\\d/, false],\n        [\'YYYY-DDD\', /\\d{4}-\\d{3}/],\n        [\'YYYY-MM\', /\\d{4}-\\d\\d/, false],\n        [\'YYYYYYMMDD\', /[+-]\\d{10}/],\n        [\'YYYYMMDD\', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        [\'GGGG[W]WWE\', /\\d{4}W\\d{3}/],\n        [\'GGGG[W]WW\', /\\d{4}W\\d{2}/, false],\n        [\'YYYYDDD\', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        [\'HH:mm:ss.SSSS\', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        [\'HH:mm:ss,SSSS\', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        [\'HH:mm:ss\', /\\d\\d:\\d\\d:\\d\\d/],\n        [\'HH:mm\', /\\d\\d:\\d\\d/],\n        [\'HHmmss.SSSS\', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        [\'HHmmss,SSSS\', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        [\'HHmmss\', /\\d\\d\\d\\d\\d\\d/],\n        [\'HHmm\', /\\d\\d\\d\\d/],\n        [\'HH\', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be \'T\' or space\n                        timeFormat = (match[2] || \' \') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = \'Z\';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || \'\') + (tzFormat || \'\');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, \' \').replace(/(\\s\\s+)/g, \' \').replace(/^\\s\\s*/, \'\').replace(/\\s\\s*$/, \'\');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        \'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), \' +\n        \'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are \' +\n        \'discouraged and will be removed in an upcoming major release. Please refer to \' +\n        \'http://momentjs.com/guides/#/warnings/js-date/ for more info.\',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? \' UTC\' : \'\'));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = \'\' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log(\'token\', token, \'parsedInput\', parsedInput,\n            //         \'regex\', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don\'t parse if it\'s not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, \'d\');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === \'\')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === \'string\') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === \'string\') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        \'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/\',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        \'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/\',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy(\'isBefore\', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy(\'isAfter\', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = [\'year\', \'quarter\', \'month\', \'week\', \'day\', \'hour\', \'minute\', \'second\', \'millisecond\'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = \'+\';\n            if (offset < 0) {\n                offset = -offset;\n                sign = \'-\';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset(\'Z\', \':\');\n    offset(\'ZZ\', \'\');\n\n    // PARSING\n\n    addRegexToken(\'Z\',  matchShortOffset);\n    addRegexToken(\'ZZ\', matchShortOffset);\n    addParseToken([\'Z\', \'ZZ\'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // \'+10:00\' > [\'10\',  \'00\']\n    // \'-1530\'  > [\'-15\', \'30\']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || \'\').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + \'\').match(chunkOffset) || [\'-\', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === \'+\' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn\'t exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === \'string\') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, \'m\');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, \'m\'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== \'string\') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), \'m\');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === \'string\') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === \'-\') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === \'-\') ? -1 : (match[1] === \'+\') ? 1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === \'object\' && (\'from\' in duration || \'to\' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, \'_locale\')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We\'d normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(\',\', \'.\'));\n        // apply sign while we\'re at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, \'M\').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, \'M\'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove \'name\' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, \'moment().\' + name  + \'(period, number) is deprecated. Please use moment().\' + name + \'(number, period). \' +\n                \'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.\');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === \'string\' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, \'Month\') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, \'Date\', get(mom, \'Date\') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, \'add\');\n    var subtract = createAdder(-1, \'subtract\');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, \'days\', true);\n        return diff < -6 ? \'sameElse\' :\n                diff < -1 ? \'lastWeek\' :\n                diff < 0 ? \'lastDay\' :\n                diff < 1 ? \'sameDay\' :\n                diff < 2 ? \'nextDay\' :\n                diff < 7 ? \'nextWeek\' : \'sameElse\';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we\'re local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf(\'day\'),\n            format = hooks.calendarFormat(this, sod) || \'sameElse\';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : \'millisecond\');\n        if (units === \'millisecond\') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : \'millisecond\');\n        if (units === \'millisecond\') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || \'()\';\n        return (inclusivity[0] === \'(\' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === \')\' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || \'millisecond\');\n        if (units === \'millisecond\') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case \'year\': output = monthDiff(this, that) / 12; break;\n            case \'month\': output = monthDiff(this, that); break;\n            case \'quarter\': output = monthDiff(this, that) / 3; break;\n            case \'second\': output = (this - that) / 1e3; break; // 1000\n            case \'minute\': output = (this - that) / 6e4; break; // 1000 * 60\n            case \'hour\': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case \'day\': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case \'week\': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, \'months\'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, \'months\');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, \'months\');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = \'YYYY-MM-DDTHH:mm:ssZ\';\n    hooks.defaultFormatUtc = \'YYYY-MM-DDTHH:mm:ss[Z]\';\n\n    function toString () {\n        return this.clone().locale(\'en\').format(\'ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? \'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]\' : \'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ\');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace(\'Z\', formatMoment(m, \'Z\'));\n            }\n        }\n        return formatMoment(m, utc ? \'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\' : \'YYYY-MM-DD[T]HH:mm:ss.SSSZ\');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return \'moment.invalid(/* \' + this._i + \' */)\';\n        }\n        var func = \'moment\';\n        var zone = \'\';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? \'moment.utc\' : \'moment.parseZone\';\n            zone = \'Z\';\n        }\n        var prefix = \'[\' + func + \'("]\';\n        var year = (0 <= this.year() && this.year() <= 9999) ? \'YYYY\' : \'YYYYYY\';\n        var datetime = \'-MM-DD[T]HH:mm:ss.SSS\';\n        var suffix = zone + \'[")]\';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        \'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.\',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case \'year\':\n                this.month(0);\n                /* falls through */\n            case \'quarter\':\n            case \'month\':\n                this.date(1);\n                /* falls through */\n            case \'week\':\n            case \'isoWeek\':\n            case \'day\':\n            case \'date\':\n                this.hours(0);\n                /* falls through */\n            case \'hour\':\n                this.minutes(0);\n                /* falls through */\n            case \'minute\':\n                this.seconds(0);\n                /* falls through */\n            case \'second\':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === \'week\') {\n            this.weekday(0);\n        }\n        if (units === \'isoWeek\') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === \'quarter\') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === \'millisecond\') {\n            return this;\n        }\n\n        // \'date\' is an alias for \'day\', so it should be considered as such.\n        if (units === \'date\') {\n            units = \'day\';\n        }\n\n        return this.startOf(units).add(1, (units === \'isoWeek\' ? \'week\' : units)).subtract(1, \'ms\');\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, [\'gg\', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, [\'GG\', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken(\'gggg\',     \'weekYear\');\n    addWeekYearFormatToken(\'ggggg\',    \'weekYear\');\n    addWeekYearFormatToken(\'GGGG\',  \'isoWeekYear\');\n    addWeekYearFormatToken(\'GGGGG\', \'isoWeekYear\');\n\n    // ALIASES\n\n    addUnitAlias(\'weekYear\', \'gg\');\n    addUnitAlias(\'isoWeekYear\', \'GG\');\n\n    // PRIORITY\n\n    addUnitPriority(\'weekYear\', 1);\n    addUnitPriority(\'isoWeekYear\', 1);\n\n\n    // PARSING\n\n    addRegexToken(\'G\',      matchSigned);\n    addRegexToken(\'g\',      matchSigned);\n    addRegexToken(\'GG\',     match1to2, match2);\n    addRegexToken(\'gg\',     match1to2, match2);\n    addRegexToken(\'GGGG\',   match1to4, match4);\n    addRegexToken(\'gggg\',   match1to4, match4);\n    addRegexToken(\'GGGGG\',  match1to6, match6);\n    addRegexToken(\'ggggg\',  match1to6, match6);\n\n    addWeekParseToken([\'gggg\', \'ggggg\', \'GGGG\', \'GGGGG\'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken([\'gg\', \'GG\'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'Q\', 0, \'Qo\', \'quarter\');\n\n    // ALIASES\n\n    addUnitAlias(\'quarter\', \'Q\');\n\n    // PRIORITY\n\n    addUnitPriority(\'quarter\', 7);\n\n    // PARSING\n\n    addRegexToken(\'Q\', match1);\n    addParseToken(\'Q\', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'D\', [\'DD\', 2], \'Do\', \'date\');\n\n    // ALIASES\n\n    addUnitAlias(\'date\', \'D\');\n\n    // PRIORITY\n    addUnitPriority(\'date\', 9);\n\n    // PARSING\n\n    addRegexToken(\'D\',  match1to2);\n    addRegexToken(\'DD\', match1to2, match2);\n    addRegexToken(\'Do\', function (isStrict, locale) {\n        // TODO: Remove "ordinalParse" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken([\'D\', \'DD\'], DATE);\n    addParseToken(\'Do\', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet(\'Date\', true);\n\n    // FORMATTING\n\n    addFormatToken(\'DDD\', [\'DDDD\', 3], \'DDDo\', \'dayOfYear\');\n\n    // ALIASES\n\n    addUnitAlias(\'dayOfYear\', \'DDD\');\n\n    // PRIORITY\n    addUnitPriority(\'dayOfYear\', 4);\n\n    // PARSING\n\n    addRegexToken(\'DDD\',  match1to3);\n    addRegexToken(\'DDDD\', match3);\n    addParseToken([\'DDD\', \'DDDD\'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf(\'day\') - this.clone().startOf(\'year\')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), \'d\');\n    }\n\n    // FORMATTING\n\n    addFormatToken(\'m\', [\'mm\', 2], 0, \'minute\');\n\n    // ALIASES\n\n    addUnitAlias(\'minute\', \'m\');\n\n    // PRIORITY\n\n    addUnitPriority(\'minute\', 14);\n\n    // PARSING\n\n    addRegexToken(\'m\',  match1to2);\n    addRegexToken(\'mm\', match1to2, match2);\n    addParseToken([\'m\', \'mm\'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet(\'Minutes\', false);\n\n    // FORMATTING\n\n    addFormatToken(\'s\', [\'ss\', 2], 0, \'second\');\n\n    // ALIASES\n\n    addUnitAlias(\'second\', \'s\');\n\n    // PRIORITY\n\n    addUnitPriority(\'second\', 15);\n\n    // PARSING\n\n    addRegexToken(\'s\',  match1to2);\n    addRegexToken(\'ss\', match1to2, match2);\n    addParseToken([\'s\', \'ss\'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet(\'Seconds\', false);\n\n    // FORMATTING\n\n    addFormatToken(\'S\', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, [\'SS\', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, [\'SSS\', 3], 0, \'millisecond\');\n    addFormatToken(0, [\'SSSS\', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, [\'SSSSS\', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, [\'SSSSSS\', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, [\'SSSSSSS\', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, [\'SSSSSSSS\', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, [\'SSSSSSSSS\', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias(\'millisecond\', \'ms\');\n\n    // PRIORITY\n\n    addUnitPriority(\'millisecond\', 16);\n\n    // PARSING\n\n    addRegexToken(\'S\',    match1to3, match1);\n    addRegexToken(\'SS\',   match1to3, match2);\n    addRegexToken(\'SSS\',  match1to3, match3);\n\n    var token;\n    for (token = \'SSSS\'; token.length <= 9; token += \'S\') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt((\'0.\' + input) * 1000);\n    }\n\n    for (token = \'S\'; token.length <= 9; token += \'S\') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet(\'Milliseconds\', false);\n\n    // FORMATTING\n\n    addFormatToken(\'z\',  0, 0, \'zoneAbbr\');\n    addFormatToken(\'zz\', 0, 0, \'zoneName\');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? \'UTC\' : \'\';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? \'Coordinated Universal Time\' : \'\';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate(\'dates accessor is deprecated. Use date instead.\', getSetDayOfMonth);\n    proto.months = deprecate(\'months accessor is deprecated. Use month instead\', getSetMonth);\n    proto.years  = deprecate(\'years accessor is deprecated. Use year instead\', getSetYear);\n    proto.zone   = deprecate(\'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/\', getSetZone);\n    proto.isDSTShifted = deprecate(\'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information\', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || \'\';\n\n        if (index != null) {\n            return get$1(format, index, field, \'month\');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, \'month\');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === \'boolean\') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || \'\';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || \'\';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, \'day\');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, \'day\');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, \'months\');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, \'monthsShort\');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \'weekdays\');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \'weekdaysShort\');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, \'weekdaysMin\');\n    }\n\n    getSetGlobalLocale(\'en\', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? \'th\' :\n                (b === 1) ? \'st\' :\n                (b === 2) ? \'nd\' :\n                (b === 3) ? \'rd\' : \'th\';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\'moment.lang is deprecated. Use moment.locale instead.\', getSetGlobalLocale);\n    hooks.langData = deprecate(\'moment.langData is deprecated. Use moment.localeData instead.\', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, \'s\') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, \'s\') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === \'month\' || units === \'year\') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === \'month\' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case \'week\'   : return days / 7     + milliseconds / 6048e5;\n                case \'day\'    : return days         + milliseconds / 864e5;\n                case \'hour\'   : return days * 24    + milliseconds / 36e5;\n                case \'minute\' : return days * 1440  + milliseconds / 6e4;\n                case \'second\' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case \'millisecond\': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error(\'Unknown unit \' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as(\'ms\')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs(\'ms\');\n    var asSeconds      = makeAs(\'s\');\n    var asMinutes      = makeAs(\'m\');\n    var asHours        = makeAs(\'h\');\n    var asDays         = makeAs(\'d\');\n    var asWeeks        = makeAs(\'w\');\n    var asMonths       = makeAs(\'M\');\n    var asYears        = makeAs(\'y\');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + \'s\']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter(\'milliseconds\');\n    var seconds      = makeGetter(\'seconds\');\n    var minutes      = makeGetter(\'minutes\');\n    var hours        = makeGetter(\'hours\');\n    var days         = makeGetter(\'days\');\n    var months       = makeGetter(\'months\');\n    var years        = makeGetter(\'years\');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as(\'s\'));\n        var minutes  = round(duration.as(\'m\'));\n        var hours    = round(duration.as(\'h\'));\n        var days     = round(duration.as(\'d\'));\n        var months   = round(duration.as(\'M\'));\n        var years    = round(duration.as(\'y\'));\n\n        var a = seconds <= thresholds.ss && [\'s\', seconds]  ||\n                seconds < thresholds.s   && [\'ss\', seconds] ||\n                minutes <= 1             && [\'m\']           ||\n                minutes < thresholds.m   && [\'mm\', minutes] ||\n                hours   <= 1             && [\'h\']           ||\n                hours   < thresholds.h   && [\'hh\', hours]   ||\n                days    <= 1             && [\'d\']           ||\n                days    < thresholds.d   && [\'dd\', days]    ||\n                months  <= 1             && [\'M\']           ||\n                months  < thresholds.M   && [\'MM\', months]  ||\n                years   <= 1             && [\'y\']           || [\'yy\', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === \'function\') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === \'s\') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, \'\') : \'\';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#\'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return \'P0D\';\n        }\n\n        var totalSign = total < 0 ? \'-\' : \'\';\n        var ymSign = sign(this._months) !== sign(total) ? \'-\' : \'\';\n        var daysSign = sign(this._days) !== sign(total) ? \'-\' : \'\';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? \'-\' : \'\';\n\n        return totalSign + \'P\' +\n            (Y ? ymSign + Y + \'Y\' : \'\') +\n            (M ? ymSign + M + \'M\' : \'\') +\n            (D ? daysSign + D + \'D\' : \'\') +\n            ((h || m || s) ? \'T\' : \'\') +\n            (h ? hmsSign + h + \'H\' : \'\') +\n            (m ? hmsSign + m + \'M\' : \'\') +\n            (s ? hmsSign + s + \'S\' : \'\');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate(\'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)\', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken(\'X\', 0, 0, \'unix\');\n    addFormatToken(\'x\', 0, 0, \'valueOf\');\n\n    // PARSING\n\n    addRegexToken(\'x\', matchSigned);\n    addRegexToken(\'X\', matchTimestamp);\n    addParseToken(\'X\', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken(\'x\', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = \'2.22.2\';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: \'YYYY-MM-DDTHH:mm\',             // <input type="datetime-local" />\n        DATETIME_LOCAL_SECONDS: \'YYYY-MM-DDTHH:mm:ss\',  // <input type="datetime-local" step="1" />\n        DATETIME_LOCAL_MS: \'YYYY-MM-DDTHH:mm:ss.SSS\',   // <input type="datetime-local" step="0.001" />\n        DATE: \'YYYY-MM-DD\',                             // <input type="date" />\n        TIME: \'HH:mm\',                                  // <input type="time" />\n        TIME_SECONDS: \'HH:mm:ss\',                       // <input type="time" step="1" />\n        TIME_MS: \'HH:mm:ss.SSS\',                        // <input type="time" step="0.001" />\n        WEEK: \'YYYY-[W]WW\',                             // <input type="week" />\n        MONTH: \'YYYY-MM\'                                // <input type="month" />\n    };\n\n    return hooks;\n\n})));\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*shuttle-canstrap@1.0.60#input-datetime/input-datetime*/
define('shuttle-canstrap@1.0.60#input-datetime/input-datetime', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './input-datetime.stache!',
    '../infrastructure/id-generator',
    '../infrastructure/options',
    'moment'
], function (exports, _canComponent, _componentViewModel, _inputDatetime, _idGenerator, _options, _moment) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _inputDatetime2 = _interopRequireDefault(_inputDatetime);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _options2 = _interopRequireDefault(_options);
    var _moment2 = _interopRequireDefault(_moment);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.id = 'input-' + (0, _idGenerator2.default)().toString();
        },
        id: { type: 'string' },
        showFormat: {
            type: 'boolean',
            get: function get(value) {
                return value || _options2.default.datetime.showFormat;
            }
        },
        placeholder: {
            type: 'string',
            get: function get(value) {
                var format = this.showFormat ? this.format : '';
                return !!value ? value + ' (' + format + ')' : format;
            }
        },
        settingText: {
            type: 'boolean',
            default: false
        },
        text: {
            type: 'string',
            set: function set(value) {
                this.settingText = true;
                var m = (0, _moment2.default)(value, this.format);
                if (!this.settingValue) {
                    this.value = m.isValid() ? m.toDate() : undefined;
                }
                this.settingText = false;
                return value;
            }
        },
        settingValue: {
            type: 'boolean',
            default: false
        },
        value: {
            type: 'date',
            set: function set(value) {
                this.settingValue = true;
                if (!this.settingText) {
                    this.text = !!value ? (0, _moment2.default)(value).format(this.format) : '';
                }
                this.settingValue = false;
                return value;
            }
        },
        type: {
            type: 'string',
            default: 'datetime',
            set: function set(value) {
                return value === 'datetime' || value === 'date' || value === 'time' ? value : 'datetime';
            }
        },
        format: {
            type: 'string',
            get: function get(value) {
                if (!!value) {
                    return value;
                }
                switch (this.type) {
                case 'date': {
                        return _options2.default.datetime.dateFormat;
                    }
                case 'datetime': {
                        return _options2.default.datetime.format;
                    }
                case 'time': {
                        return _options2.default.datetime.timeFormat;
                    }
                default: {
                        return false;
                    }
                }
            }
        },
        datetimeClass: {
            type: 'string',
            get: function get(value) {
                return !!value ? value : _options2.default.datetime.datetimeClass;
            }
        },
        containerClass: { type: 'string' },
        inputClass: {
            type: 'string',
            get: function get() {
                return 'form-control ' + this.datetimeClass + ' ' + this.elementClass;
            }
        },
        minDate: {
            type: 'date',
            set: function set(value) {
                if (!!this.value && value > this.value) {
                    value = this.value;
                }
                if (!!this.maxDate && value > this.maxDate) {
                    value = this.maxDate;
                }
                if (!!value) {
                    value = (0, _moment2.default)(value);
                }
                this._setDateTimeOption('minDate', value || false);
                return value;
            }
        },
        maxDate: {
            type: 'date',
            set: function set(value) {
                if (!!this.value && value < this.value) {
                    value = this.value;
                }
                if (!!this.minDate && value < this.minDate) {
                    value = this.minDate;
                }
                this._setDateTimeOption('maxDate', value || false);
                return value;
            }
        },
        _setDateTimeOption: function _setDateTimeOption(name, value) {
            return;
            var el = $('#' + this.id);
            if (!el.length) {
                return;
            }
            el.datetimepicker(name, value);
        },
        connectedCallback: function connectedCallback() {
            return;
            var self = this;
            var el = $('#' + this.id);
            try {
                el.datetimepicker({ format: this.format });
                el.on('change.datetimepicker', function (e) {
                    self.value = e.date.toDate();
                });
            } catch (e) {
                if (!!console.warn) {
                    console.warn('The \'cs-input\' component makes use of https://tempusdominus.github.io/bootstrap-4/Installing/');
                    console.warn('$ npm install tempusdominus-bootstrap-4');
                }
                throw new Error('Could not call \'$.datetimepicker\'.');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-input-datetime',
        view: _inputDatetime2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#form-input-datetime/form-input-datetime.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-input-datetime/form-input-datetime.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-input-datetime/form-input-datetime.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-input-datetime',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'min:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'minDate',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'min:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'max:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'maxDate',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'max:u:date:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-input-datetime',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-input-datetime/form-input-datetime*/
define('shuttle-canstrap@1.0.60#form-input-datetime/form-input-datetime', [
    'exports',
    'can-component',
    '../input-datetime/input-datetime',
    './form-input-datetime.stache!'
], function (exports, _canComponent, _inputDatetime, _formInputDatetime) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _formInputDatetime2 = _interopRequireDefault(_formInputDatetime);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-input-datetime',
        ViewModel: _inputDatetime.ViewModel,
        view: _formInputDatetime2.default
    });
});
/*shuttle-canstrap@1.0.60#select/select.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#select/select.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('select/select.stache', [
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'selectClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(options)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'option',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\t',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#select/select*/
define('shuttle-canstrap@1.0.60#select/select', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    'can-define/list/',
    './select.stache!'
], function (exports, _canComponent, _componentViewModel, _list, _select) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.OptionList = exports.OptionMap = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _list2 = _interopRequireDefault(_list);
    var _select2 = _interopRequireDefault(_select);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var OptionMap = exports.OptionMap = _componentViewModel2.default.extend({
        value: {
            type: 'string',
            default: ''
        },
        label: {
            type: 'string',
            default: ''
        }
    });
    var OptionList = exports.OptionList = _list2.default.extend({ '#': OptionMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        options: { Type: OptionList },
        value: {
            type: 'string',
            default: ''
        },
        selectClass: {
            get: function get() {
                return 'form-control ' + this.elementClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-select',
        ViewModel: ViewModel,
        view: _select2.default
    });
});
/*shuttle-canstrap@1.0.60#form-select/form-select.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-select/form-select.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-select/form-select.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-select',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focus:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'options:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'options',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'options:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-select',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-select/form-select*/
define('shuttle-canstrap@1.0.60#form-select/form-select', [
    'exports',
    'can-component',
    '../select/',
    './form-select.stache!'
], function (exports, _canComponent, _select, _formSelect) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _formSelect2 = _interopRequireDefault(_formSelect);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-select',
        ViewModel: _select.ViewModel,
        view: _formSelect2.default
    });
});
/*shuttle-canstrap@1.0.60#textarea/textarea.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#textarea/textarea.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('textarea/textarea.stache', [
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'textareaClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rows:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'rows',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rows:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'cols:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'columns',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'cols:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#textarea/textarea*/
define('shuttle-canstrap@1.0.60#textarea/textarea', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './textarea.stache!'
], function (exports, _canComponent, _componentViewModel, _textarea) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _textarea2 = _interopRequireDefault(_textarea);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        rows: {
            type: 'number',
            default: 3
        },
        columns: {
            type: 'number',
            default: 80
        },
        value: {
            type: 'string',
            default: ''
        },
        textareaClass: {
            get: function get() {
                return 'form-control ' + this.elementClass + ' ' + this.visibilityClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-textarea',
        ViewModel: ViewModel,
        view: _textarea2.default
    });
});
/*shuttle-canstrap@1.0.60#form-textarea/form-textarea.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#form-textarea/form-textarea.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('form-textarea/form-textarea.stache', [
        {
            'tokenType': 'start',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'validationMessage',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'validation:u:message:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'formGroupClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'element:u:class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visible',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'visible:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-form-group',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'label:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-label',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-control ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'elementClass',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rows:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'rows',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rows:from',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'cols:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'columns',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'cols:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'cs-form-group',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#form-textarea/form-textarea*/
define('shuttle-canstrap@1.0.60#form-textarea/form-textarea', [
    'exports',
    'can-component',
    '../textarea/',
    './form-textarea.stache!'
], function (exports, _canComponent, _textarea, _formTextarea) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _formTextarea2 = _interopRequireDefault(_formTextarea);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _canComponent2.default.extend({
        tag: 'cs-form-textarea',
        ViewModel: _textarea.ViewModel,
        view: _formTextarea2.default
    });
});
/*shuttle-canstrap@1.0.60#input/input.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#input/input.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('input/input.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'position-relative',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value:bind',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'inputClass',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'placeholder',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'focus',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'focused:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#input/input*/
define('shuttle-canstrap@1.0.60#input/input', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './input.stache!'
], function (exports, _canComponent, _componentViewModel, _input) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _input2 = _interopRequireDefault(_input);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        type: {
            type: 'string',
            default: 'input'
        },
        inputClass: {
            type: 'string',
            get: function get() {
                return 'form-control ' + this.elementClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-input',
        view: _input2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#label/label.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#label/label.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('label/label.stache', [
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'elementClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_click(scope.event)',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(required)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'labelClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#label/label*/
define('shuttle-canstrap@1.0.60#label/label', [
    'exports',
    'can-component',
    './label.stache!',
    '../infrastructure/component-view-model'
], function (exports, _canComponent, _label, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _label2 = _interopRequireDefault(_label);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        requiredClass: {
            type: 'string',
            default: 'fa-asterisk'
        },
        labelClass: {
            get: function get() {
                return this.iconClass + ' ' + this.requiredClass;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-label',
        view: _label2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#modal/modal.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#modal/modal.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('modal/modal.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalId',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'tabindex',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '-1',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'tabindex',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalTitleId',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-dialog',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'document',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-header',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h5',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-title text:from-textType',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modalTitleId',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h5',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h5',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'close',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-label',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Close',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-label',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-times-circle-o',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dismissButtonClass',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-body',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasMessage)',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'message',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'content',
                true,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'content',
                true,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal-footer',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn btn-secondary',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-dismiss',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modal',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-dismiss',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'dismissText',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasPrimary)',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'btn btn-primary',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_primaryClick()',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'primaryText',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\r\n',
                26
            ]
        },
        {
            'tokenType': 'done',
            'args': [28]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#modal/modal*/
define('shuttle-canstrap@1.0.60#modal/modal', [
    'exports',
    'jquery',
    'can-component',
    '../infrastructure/component-view-model',
    './modal.stache!',
    '../infrastructure/i18n'
], function (exports, _jquery, _canComponent, _componentViewModel, _modal, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _jquery2 = _interopRequireDefault(_jquery);
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _modal2 = _interopRequireDefault(_modal);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        primaryClick: { type: 'observable' },
        modalType: {
            type: 'string',
            default: 'fade'
        },
        modalClass: {
            get: function get() {
                return 'modal ' + this.modalType;
            }
        },
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        hasPrimary: {
            type: 'boolean',
            get: function get() {
                return !!this.primaryText;
            }
        },
        primaryText: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        dismissText: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        dismissButtonClass: {
            get: function get() {
                return this.iconClass + ' ' + this.iconNameClass + (!!this.text ? ' ' + this.iconSpacingClass : '');
            }
        },
        textType: {
            type: 'string',
            default: 'primary'
        },
        message: {
            type: 'string',
            default: ''
        },
        hasMessage: {
            type: 'boolean',
            get: function get() {
                return !!this.message;
            }
        },
        modalTitleId: {
            get: function get() {
                return this.modalId + '-title';
            }
        },
        _primaryClick: function _primaryClick() {
            var modalElement = (0, _jquery2.default)('#' + this.modalId);
            if (modalElement) {
                modalElement.modal('hide');
            }
            if (!!this.primaryClick) {
                this.primaryClick(arguments);
            } else {
                throw new Error('No primary click function has been assigned.');
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-modal',
        view: _modal2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#nav-dropdown/nav-dropdown.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#nav-dropdown/nav-dropdown.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('nav-dropdown/nav-dropdown.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(href)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-item',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-link',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-item dropdown',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'nav-link dropdown-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navbarDropdown',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-haspopup',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-haspopup',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-menu',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-labelledby',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navbarDropdown',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-labelledby',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(list)',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-item',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [17]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#nav-dropdown/nav-dropdown*/
define('shuttle-canstrap@1.0.60#nav-dropdown/nav-dropdown', [
    'exports',
    'can-define/map/',
    'can-define/list/',
    'can-component',
    './nav-dropdown.stache',
    '../infrastructure/i18n'
], function (exports, _map, _list, _canComponent, _navDropdown, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DropdownList = exports.DropdownMap = undefined;
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _navDropdown2 = _interopRequireDefault(_navDropdown);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DropdownMap = exports.DropdownMap = _map2.default.extend({
        href: {
            type: 'string',
            default: ''
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        }
    });
    var DropdownList = exports.DropdownList = _list2.default.extend({ '#': DropdownMap });
    var ViewModel = _map2.default.extend({
        href: {
            type: 'string',
            default: '',
            set: function set(value) {
                if (!!this.list && !!this.list.length) {
                    throw new Error('Cannot set \'href\' when a \'list\' has been set.');
                }
                return value;
            }
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        list: {
            Default: DropdownList,
            set: function set(value) {
                if (!!value.length && !!this.href) {
                    throw new Error('Cannot set \'list\' when a \'href\' has been set.');
                }
                return value;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-nav-dropdown',
        view: _navDropdown2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#page-title/page-title.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#page-title/page-title.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('page-title/page-title.stache', [
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#page-title/page-title*/
define('shuttle-canstrap@1.0.60#page-title/page-title', [
    'exports',
    'can-component',
    'can-define/map/',
    './page-title.stache!',
    '../infrastructure/i18n'
], function (exports, _canComponent, _map, _pageTitle, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _map2 = _interopRequireDefault(_map);
    var _pageTitle2 = _interopRequireDefault(_pageTitle);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _map2.default.extend({
        localize: {
            type: 'boolean',
            default: true
        },
        title: {
            type: 'string',
            default: '',
            get: function get(value) {
                return this.localize ? _i18n2.default.value(value) : value;
            }
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-page-title',
        view: _pageTitle2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#sidebar/sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#sidebar/sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('sidebar/sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'cs-sidebar list-group border-0 text-left',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(list)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-sidebar-item',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'text:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'text:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'list:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'list:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'parent:u:id:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '../id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'parent:u:id:from',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-sidebar-item',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#sidebar/sidebar*/
define('shuttle-canstrap@1.0.60#sidebar/sidebar', [
    'exports',
    'can-define/list/',
    'can-component',
    './sidebar.stache',
    '../infrastructure/i18n',
    '../infrastructure/id-generator',
    '../infrastructure/component-view-model'
], function (exports, _list, _canComponent, _sidebar, _i18n, _idGenerator, _componentViewModel) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ItemList = exports.ItemMap = undefined;
    var _list2 = _interopRequireDefault(_list);
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _sidebar2 = _interopRequireDefault(_sidebar);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _idGenerator2 = _interopRequireDefault(_idGenerator);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ItemMap = exports.ItemMap = _componentViewModel2.default.extend({
        init: function init() {
            this.id = 'sidebar-item-' + (0, _idGenerator2.default)().toString();
        },
        id: {
            type: 'string',
            default: ''
        },
        parentId: {
            type: 'string',
            get: function get(value) {
                return '#' + value;
            }
        },
        href: {
            type: 'string',
            default: ''
        },
        text: {
            type: 'string',
            default: '',
            get: function get(value) {
                return _i18n2.default.value(value);
            }
        },
        list: {
            Type: ItemList,
            default: [],
            set: function set(value) {
                if (!!value.length && !!this.href) {
                    throw new Error('Cannot set \'list\' when a \'href\' has been set.');
                }
                return value;
            }
        },
        expandedIconClass: {
            type: 'string',
            default: 'fa-chevron-right'
        },
        collapsedIconClass: {
            type: 'string',
            default: 'fa-chevron-down'
        },
        collapsed: {
            type: 'boolean',
            default: true
        },
        collapseIconClass: {
            get: function get() {
                return 'float-right ' + this.iconClass + ' ' + (!!this.collapsed ? this.collapsedIconClass : this.expandedIconClass);
            }
        },
        connectedCallback: function connectedCallback() {
            var self = this;
            var el = $('#' + this.id);
            el.on('hidden.bs.collapse', function () {
                self.collapsed = true;
            });
            el.on('shown.bs.collapse', function () {
                self.collapsed = false;
            });
        }
    });
    var ItemList = exports.ItemList = _list2.default.extend({ '#': ItemMap });
    var ViewModel = _componentViewModel2.default.extend({
        init: function init() {
            this.id = this.id || 'sidebar-' + (0, _idGenerator2.default)().toString();
        },
        id: { type: 'string' },
        list: { Type: ItemList },
        connectedCallback: function connectedCallback() {
            if (!this.togglerId) {
                return;
            }
            var toggler = $('#' + this.togglerId);
            var sidebar = $('#' + this.id);
            if (!toggler.length || !sidebar.length) {
                return;
            }
            $(window).resize(function () {
                if (!toggler.is(':visible') && !sidebar.is(':visible')) {
                    toggler.click();
                }
            });
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-sidebar',
        view: _sidebar2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#sidebar/sidebar-item.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#sidebar/sidebar-item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('sidebar/sidebar-item.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(href)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list-group-item',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '#',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list-group-item d-inline-block collapsed',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-toggle',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-toggle',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'false',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-expanded',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'text',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapseIconClass',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class:from',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'aria-hidden',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'collapse',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id:from',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id:from',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-parent:from',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'parentId',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-parent:from',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(list)',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'cs-sidebar-item',
                true,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'href',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'text:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'text:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'list:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'list',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'list:from',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'parent:u:id:from',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'parent:u:id:from',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'cs-sidebar-item',
                true,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#sidebar/sidebar-item*/
define('shuttle-canstrap@1.0.60#sidebar/sidebar-item', [
    'exports',
    'can-component',
    './sidebar',
    './sidebar-item.stache'
], function (exports, _canComponent, _sidebar, _sidebarItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _sidebarItem2 = _interopRequireDefault(_sidebarItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _canComponent2.default.extend({
        tag: 'cs-sidebar-item',
        view: _sidebarItem2.default,
        ViewModel: _sidebar.ItemMap
    });
});
/*shuttle-canstrap@1.0.60#table/table.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#table/table.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('table/table.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'containerClass',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(shouldShowEmptyMessage)',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert alert-info',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'alert',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'emptyMessage',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'table ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'tableClass',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'thead',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'thead',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(columns)',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'th',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'columnClass',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'headerClass',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'th',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'columnTitle',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'th',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'thead',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tbody',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tbody',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(rows)',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row ',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getRowClass (.)',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'on:click',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'scope.vm._rowClick(.)',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'on:click',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(../columns)',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-title',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'columnTitle',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-title',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'columnClass',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'dataClass',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasStache)',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                                ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getView(../., .',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                                ',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.vm.getColumnValue(../., .)',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                            ',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                        ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                    ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n                ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n            ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tbody',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n        ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'done',
            'args': [32]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#table/table*/
define('shuttle-canstrap@1.0.60#table/table', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    'can-define/list/',
    'can-stache/',
    './table.stache!',
    '../infrastructure/i18n',
    '../infrastructure/click',
    '../infrastructure/options'
], function (exports, _canComponent, _componentViewModel, _list, _canStache, _table, _i18n, _click, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = exports.ColumnList = exports.ColumnMap = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _list2 = _interopRequireDefault(_list);
    var _canStache2 = _interopRequireDefault(_canStache);
    var _table2 = _interopRequireDefault(_table);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _click2 = _interopRequireDefault(_click);
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ColumnMap = exports.ColumnMap = _componentViewModel2.default.extend({
        viewModel: { type: '*' },
        columnTitle: {
            type: 'string',
            default: '(column)',
            get: function get(value) {
                if (!!this.columnStache) {
                    return (0, _canStache2.default)(this.columnStache)(this.viewModel);
                } else {
                    return _i18n2.default.value(value || '');
                }
            }
        },
        columnStache: {
            type: 'string',
            default: ''
        },
        columnClass: {
            type: 'string',
            default: ''
        },
        headerClass: {
            type: 'string',
            default: ''
        },
        dataClass: {
            type: 'string',
            default: ''
        },
        hasStache: {
            get: function get() {
                return !!this.stache;
            }
        },
        stache: { type: 'any' }
    });
    var ColumnList = exports.ColumnList = _list2.default.extend({ '#': ColumnMap });
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        rowClick: { type: '*' },
        emptyMessage: {
            get: function get() {
                return _i18n2.default.value(this.emptyMessage || 'table-empty-message');
            }
        },
        tableClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.table.tableClass;
            }
        },
        containerClass: {
            type: 'string',
            default: '',
            get: function get(value) {
                return value || _options2.default.table.containerClass || '';
            }
        },
        columns: {
            Type: ColumnList,
            default: []
        },
        rows: { Type: _list2.default },
        shouldShowEmptyMessage: {
            get: function get() {
                return !!this.rows && this.rows.length === 0 && !!this.emptyMessage;
            }
        },
        _rowClick: function _rowClick(row) {
            if (!!row.click) {
                _click2.default.on(row);
            } else if (!!this.rowClick && typeof this.rowClick === 'function') {
                this.rowClick(row);
            }
        },
        getColumnValue: function getColumnValue(row, column) {
            if (!column.attributeName) {
                throw new Error('The column requires an \'attributeName\'');
            }
            var value = row[column.attributeName];
            return typeof value === 'function' ? value(column.attributeName) : value;
        },
        getView: function getView(row, column) {
            var stacheTemplate = column.stache;
            if (!stacheTemplate) {
                throw new Error('Specify a \'stache\' for the column.');
            }
            return (0, _canStache2.default)(stacheTemplate)(row);
        },
        getRowClass: function getRowClass(row) {
            return row['rowClass'];
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-table',
        view: _table2.default,
        ViewModel: ViewModel
    });
});
/*shuttle-canstrap@1.0.60#validation/validation.stache!steal-stache@4.1.2#steal-stache*/
define('shuttle-canstrap@1.0.60#validation/validation.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.2.0#can-view-import',
    'can-stache-bindings@4.3.1#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('validation/validation.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(message)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text-warning',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'message',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\r\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*shuttle-canstrap@1.0.60#validation/validation*/
define('shuttle-canstrap@1.0.60#validation/validation', [
    'exports',
    'can-component',
    '../infrastructure/component-view-model',
    './validation.stache!'
], function (exports, _canComponent, _componentViewModel, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ViewModel = undefined;
    var _canComponent2 = _interopRequireDefault(_canComponent);
    var _componentViewModel2 = _interopRequireDefault(_componentViewModel);
    var _validation2 = _interopRequireDefault(_validation);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ViewModel = exports.ViewModel = _componentViewModel2.default.extend({
        message: {
            type: 'string',
            default: ''
        }
    });
    exports.default = _canComponent2.default.extend({
        tag: 'cs-validation',
        ViewModel: ViewModel,
        view: _validation2.default
    });
});
/*shuttle-canstrap@1.0.60#shuttle-canstrap*/
define('shuttle-canstrap@1.0.60#shuttle-canstrap', [
    'exports',
    './infrastructure/options.js',
    './canstrap.css',
    './infrastructure/security.js',
    './infrastructure/click.js',
    './infrastructure/i18n.js',
    './alerts/alerts.js',
    './autocomplete/autocomplete.js',
    './button/button.js',
    './button-back/button-back.js',
    './button-group/button-group.js',
    './button-refresh/button-refresh.js',
    './button-remove/button-remove.js',
    './button-submit/button-submit.js',
    './checkbox/checkbox.js',
    './collapse/collapse.js',
    './fetching/fetching.js',
    './form/form.js',
    './form-autocomplete/form-autocomplete.js',
    './form-checkbox/form-checkbox.js',
    './form-group/form-group.js',
    './form-input/form-input.js',
    './form-input-datetime/form-input-datetime.js',
    './form-select/form-select.js',
    './form-textarea/form-textarea.js',
    './input/input.js',
    './input-datetime/input-datetime.js',
    './label/label.js',
    './modal/modal.js',
    './nav-dropdown/nav-dropdown.js',
    './page-title/page-title.js',
    './select/select.js',
    './sidebar/sidebar.js',
    './sidebar/sidebar-item.js',
    './table/table.js',
    './textarea/textarea.js',
    './validation/validation.js'
], function (exports, _options) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _options2 = _interopRequireDefault(_options);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _options2.default;
});
/*popper.js@1.14.3#dist/umd/popper*/
define('popper.js@1.14.3#dist/umd/popper', [
    'module',
    '@loader',
    'require',
    'jquery'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: ['jquery']
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.14.3\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n(function (global, factory) {\n\ttypeof exports === \'object\' && typeof module !== \'undefined\' ? module.exports = factory() :\n\ttypeof define === \'function\' && define.amd ? define(factory) :\n\t(global.Popper = factory());\n}(this, (function () { \'use strict\';\n\nvar isBrowser = typeof window !== \'undefined\' && typeof document !== \'undefined\';\n\nvar longerTimeoutBrowsers = [\'Edge\', \'Trident\', \'Firefox\'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that\'s asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === \'[object Function]\';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var css = getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === \'HTML\') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case \'HTML\':\n    case \'BODY\':\n      return element.ownerDocument.body;\n    case \'#document\':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent;\n  // Skip hidden elements which don\'t have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === \'BODY\' || nodeName === \'HTML\') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if ([\'TD\', \'TABLE\'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, \'position\') === \'static\') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === \'BODY\') {\n    return false;\n  }\n  return nodeName === \'HTML\' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn\'t defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as "start" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'top\';\n\n  var upperSide = side === \'top\' ? \'scrollTop\' : \'scrollLeft\';\n  var nodeName = element.nodeName;\n\n  if (nodeName === \'BODY\' || nodeName === \'HTML\') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, \'top\');\n  var scrollLeft = getScroll(element, \'left\');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === \'x\' ? \'Left\' : \'Top\';\n  var sideB = sideA === \'Left\' ? \'Right\' : \'Bottom\';\n\n  return parseFloat(styles[\'border\' + sideA + \'Width\'], 10) + parseFloat(styles[\'border\' + sideB + \'Width\'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body[\'offset\' + axis], body[\'scroll\' + axis], html[\'client\' + axis], html[\'offset\' + axis], html[\'scroll\' + axis], isIE(10) ? html[\'offset\' + axis] + computedStyle[\'margin\' + (axis === \'Height\' ? \'Top\' : \'Left\')] + computedStyle[\'margin\' + (axis === \'Height\' ? \'Bottom\' : \'Right\')] : 0);\n}\n\nfunction getWindowSizes() {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize(\'Height\', body, html, computedStyle),\n    width: getSize(\'Width\', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ("value" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don\'t ask, the element isn\'t\n  // considered in DOM in some circumstances...\n  // This isn\'t reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, \'top\');\n      var scrollLeft = getScroll(element, \'left\');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === \'HTML\' ? getWindowSizes() : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it\'s not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, \'x\');\n    vertScrollbar -= getBordersSize(styles, \'y\');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === \'HTML\';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && parent.nodeName === \'HTML\') {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it\'s being used as parent\n  // we do this only on HTML because it\'s the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== \'BODY\') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, \'left\') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to "isFixed?"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === \'BODY\' || nodeName === \'HTML\') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, \'position\') === \'fixed\') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn\'t defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, \'transform\') === \'none\') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === \'viewport\') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === \'scrollParent\') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === \'BODY\') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === \'window\') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === \'HTML\' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf(\'auto\') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split(\'-\')[1];\n\n  return computedPlacement + (variation ? \'-\' + variation : \'\');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var styles = getComputedStyle(element);\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: \'right\', right: \'left\', bottom: \'top\', top: \'bottom\' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split(\'-\')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = [\'right\', \'left\'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? \'top\' : \'left\';\n  var secondarySide = isHoriz ? \'left\' : \'top\';\n  var measurement = isHoriz ? \'height\' : \'width\';\n  var secondaryMeasurement = !isHoriz ? \'height\' : \'width\';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn\'t supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, \'name\', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier[\'function\']) {\n      // eslint-disable-line dot-notation\n      console.warn(\'`modifier.function` is deprecated, use `modifier.fn`!\');\n    }\n    var fn = modifier[\'function\'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn\'t\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don\'t perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? \'fixed\' : \'absolute\';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, \'ms\', \'Webkit\', \'Moz\', \'O\'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? \'\' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== \'undefined\') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, \'applyStyle\')) {\n    this.popper.removeAttribute(\'x-placement\');\n    this.popper.style.position = \'\';\n    this.popper.style.top = \'\';\n    this.popper.style.left = \'\';\n    this.popper.style.right = \'\';\n    this.popper.style.bottom = \'\';\n    this.popper.style.willChange = \'\';\n    this.popper.style[getSupportedPropertyName(\'transform\')] = \'\';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn\'t support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === \'BODY\';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener(\'resize\', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, \'scroll\', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener(\'resize\', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener(\'scroll\', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won\'t recalculate popper position\n * when they are triggered. It also won\'t trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== \'\' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = \'\';\n    // add unit if the value is numeric and is one of the following\n    if ([\'width\', \'height\', \'top\', \'right\', \'bottom\', \'left\'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = \'px\';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute(\'x-placement\', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can\'t guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? \'fixed\' : \'absolute\' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === \'applyStyle\';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!\');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  // Avoid blurry text by using full pixel integers.\n  // For pixel-perfect positioning, top/bottom prefers rounded\n  // values, while left/right prefers floored values.\n  var offsets = {\n    left: Math.floor(popper.left),\n    top: Math.round(popper.top),\n    bottom: Math.round(popper.bottom),\n    right: Math.floor(popper.right)\n  };\n\n  var sideA = x === \'bottom\' ? \'top\' : \'bottom\';\n  var sideB = y === \'right\' ? \'left\' : \'right\';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName(\'transform\');\n\n  // now, let\'s make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it\'s been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === \'bottom\') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === \'right\') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = \'translate3d(\' + left + \'px, \' + top + \'px, 0)\';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = \'transform\';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === \'bottom\' ? -1 : 1;\n    var invertLeft = sideB === \'right\' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + \', \' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    \'x-placement\': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = \'`\' + requestingName + \'`\';\n    var requested = \'`\' + requestedName + \'`\';\n    console.warn(requested + \' modifier is required by \' + _requesting + \' modifier in order to work, be sure to include it before \' + _requesting + \'!\');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, \'arrow\', \'keepTogether\')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it\'s a CSS selector\n  if (typeof arrowElement === \'string\') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don\'t run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn\'t a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\'WARNING: `arrow.element` must be child of its popper element!\');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split(\'-\')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = [\'left\', \'right\'].indexOf(placement) !== -1;\n\n  var len = isVertical ? \'height\' : \'width\';\n  var sideCapitalized = isVertical ? \'Top\' : \'Left\';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? \'left\' : \'top\';\n  var opSide = isVertical ? \'bottom\' : \'right\';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don\'t have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css[\'margin\' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css[\'border\' + sideCapitalized + \'Width\'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, \'\'), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === \'end\') {\n    return \'start\';\n  } else if (variation === \'start\') {\n    return \'end\';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = [\'auto-start\', \'auto\', \'auto-end\', \'top-start\', \'top\', \'top-end\', \'right-start\', \'right\', \'right-end\', \'bottom-end\', \'bottom\', \'bottom-start\', \'left-end\', \'left\', \'left-start\'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: \'flip\',\n  CLOCKWISE: \'clockwise\',\n  COUNTERCLOCKWISE: \'counterclockwise\'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can\'t use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, \'inner\')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there\'s not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split(\'-\')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split(\'-\')[1] || \'\';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split(\'-\')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === \'left\' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === \'right\' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === \'top\' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === \'bottom\' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === \'left\' && overflowsLeft || placement === \'right\' && overflowsRight || placement === \'top\' && overflowsTop || placement === \'bottom\' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = [\'top\', \'bottom\'].indexOf(placement) !== -1;\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === \'start\' && overflowsLeft || isVertical && variation === \'end\' && overflowsRight || !isVertical && variation === \'start\' && overflowsTop || !isVertical && variation === \'end\' && overflowsBottom);\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? \'-\' + variation : \'\');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, \'flip\');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split(\'-\')[0];\n  var floor = Math.floor;\n  var isVertical = [\'top\', \'bottom\'].indexOf(placement) !== -1;\n  var side = isVertical ? \'right\' : \'bottom\';\n  var opSide = isVertical ? \'left\' : \'top\';\n  var measurement = isVertical ? \'width\' : \'height\';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it\'s not a number it\'s an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf(\'%\') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case \'%p\':\n        element = popperOffsets;\n        break;\n      case \'%\':\n      case \'%r\':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === \'vh\' || unit === \'vw\') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === \'vh\') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it\'s px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = [\'right\', \'left\'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(\',\') === -1) {\n    console.warn(\'Offsets separated by white space(s) are deprecated, use a comma (,) instead.\');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? \'height\' : \'width\';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren\'t considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === \'\' && [\'+\', \'-\'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === \'-\' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split(\'-\')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === \'left\') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === \'right\') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === \'top\') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === \'bottom\') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper\'s position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName(\'transform\');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = \'\';\n  popperStyles.left = \'\';\n  popperStyles[transformProp] = \'\';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === \'right\' ? \'left\' : \'top\';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === \'right\' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = [\'left\', \'top\'].indexOf(placement) !== -1 ? \'primary\' : \'secondary\';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split(\'-\')[0];\n  var shiftvariation = placement.split(\'-\')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = [\'bottom\', \'top\'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? \'left\' : \'top\';\n    var measurement = isVertical ? \'width\' : \'height\';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, \'hide\', \'preventOverflow\')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === \'preventOverflow\';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn\'t changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes[\'x-out-of-boundaries\'] = \'\';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn\'t changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes[\'x-out-of-boundaries\'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split(\'-\')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = [\'left\', \'right\'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = [\'top\', \'left\'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? \'left\' : \'top\'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? \'width\' : \'height\'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don\'t want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren\'t supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * \'10%\'\n   * \'10, 10\'\n   * \'10%, 10\'\n   * \'10 + 10%\'\n   * \'10 - 5vh + 3%\'\n   * \'-10px + 5vh, 5px - 6%\'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has "escaped the boundaries" \u2014 or just "escaped".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain "trapped" in the boundaries, or\n   * - if it should ignore the boundary and "escape with its reference"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=[\'left\',\'right\',\'top\',\'bottom\']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: [\'left\', \'right\', \'top\', \'bottom\'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement=\'scrollParent\'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: \'scrollParent\'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element=\'[x-arrow]\' - Selector or node used as arrow */\n    element: \'[x-arrow]\'\n  },\n\n  /**\n   * Modifier used to flip the popper\'s placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior=\'flip\'\n     * The behavior used to change the popper\'s placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: \'flip\',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement=\'viewport\'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: \'viewport\'\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x=\'bottom\']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: \'bottom\',\n    /**\n     * @prop {string} [x=\'left\']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: \'right\'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper\'s placement\n   * @prop {Popper.placements} placement=\'bottom\'\n   */\n  placement: \'bottom\',\n\n  /**\n   * Set this to true if you want popper to position it self in \'fixed\' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers\' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don\'t add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can\'t use class properties because they don\'t get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: \'update\',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: \'destroy\',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: \'enableEventListeners\',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: \'disableEventListeners\',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedule an update, it will run on the next UI update available\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can\'t\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don\'t have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn\'t supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== \'undefined\' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\nreturn Popper;\n\n})));\n//# sourceMappingURL=popper.js.map\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*bootstrap@4.1.2#dist/js/bootstrap*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) : typeof define === 'function' && define.amd ? define('bootstrap@4.1.2#dist/js/bootstrap', [
        'exports',
        'jquery',
        'popper.js'
    ], factory) : factory(global.bootstrap = {}, global.jQuery, global.Popper);
}(this, function (exports, $, Popper) {
    'use strict';
    $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
    Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;
    function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
                ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                }));
            }
            ownKeys.forEach(function (key) {
                _defineProperty(target, key, source[key]);
            });
        }
        return target;
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    var Util = function ($$$1) {
        var TRANSITION_END = 'transitionend';
        var MAX_UID = 1000000;
        var MILLISECONDS_MULTIPLIER = 1000;
        function toType(obj) {
            return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
        }
        function getSpecialTransitionEndEvent() {
            return {
                bindType: TRANSITION_END,
                delegateType: TRANSITION_END,
                handle: function handle(event) {
                    if ($$$1(event.target).is(this)) {
                        return event.handleObj.handler.apply(this, arguments);
                    }
                    return undefined;
                }
            };
        }
        function transitionEndEmulator(duration) {
            var _this = this;
            var called = false;
            $$$1(this).one(Util.TRANSITION_END, function () {
                called = true;
            });
            setTimeout(function () {
                if (!called) {
                    Util.triggerTransitionEnd(_this);
                }
            }, duration);
            return this;
        }
        function setTransitionEndSupport() {
            $$$1.fn.emulateTransitionEnd = transitionEndEmulator;
            $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
        }
        var Util = {
            TRANSITION_END: 'bsTransitionEnd',
            getUID: function getUID(prefix) {
                do {
                    prefix += ~~(Math.random() * MAX_UID);
                } while (document.getElementById(prefix));
                return prefix;
            },
            getSelectorFromElement: function getSelectorFromElement(element) {
                var selector = element.getAttribute('data-target');
                if (!selector || selector === '#') {
                    selector = element.getAttribute('href') || '';
                }
                try {
                    return document.querySelector(selector) ? selector : null;
                } catch (err) {
                    return null;
                }
            },
            getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
                if (!element) {
                    return 0;
                }
                var transitionDuration = $$$1(element).css('transition-duration');
                var floatTransitionDuration = parseFloat(transitionDuration);
                if (!floatTransitionDuration) {
                    return 0;
                }
                transitionDuration = transitionDuration.split(',')[0];
                return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;
            },
            reflow: function reflow(element) {
                return element.offsetHeight;
            },
            triggerTransitionEnd: function triggerTransitionEnd(element) {
                $$$1(element).trigger(TRANSITION_END);
            },
            supportsTransitionEnd: function supportsTransitionEnd() {
                return Boolean(TRANSITION_END);
            },
            isElement: function isElement(obj) {
                return (obj[0] || obj).nodeType;
            },
            typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
                for (var property in configTypes) {
                    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
                        var expectedTypes = configTypes[property];
                        var value = config[property];
                        var valueType = value && Util.isElement(value) ? 'element' : toType(value);
                        if (!new RegExp(expectedTypes).test(valueType)) {
                            throw new Error(componentName.toUpperCase() + ': ' + ('Option "' + property + '" provided type "' + valueType + '" ') + ('but expected type "' + expectedTypes + '".'));
                        }
                    }
                }
            }
        };
        setTransitionEndSupport();
        return Util;
    }($);
    var Alert = function ($$$1) {
        var NAME = 'alert';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.alert';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Selector = { DISMISS: '[data-dismiss="alert"]' };
        var Event = {
            CLOSE: 'close' + EVENT_KEY,
            CLOSED: 'closed' + EVENT_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            ALERT: 'alert',
            FADE: 'fade',
            SHOW: 'show'
        };
        var Alert = function () {
            function Alert(element) {
                this._element = element;
            }
            var _proto = Alert.prototype;
            _proto.close = function close(element) {
                var rootElement = this._element;
                if (element) {
                    rootElement = this._getRootElement(element);
                }
                var customEvent = this._triggerCloseEvent(rootElement);
                if (customEvent.isDefaultPrevented()) {
                    return;
                }
                this._removeElement(rootElement);
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._getRootElement = function _getRootElement(element) {
                var selector = Util.getSelectorFromElement(element);
                var parent = false;
                if (selector) {
                    parent = document.querySelector(selector);
                }
                if (!parent) {
                    parent = $$$1(element).closest('.' + ClassName.ALERT)[0];
                }
                return parent;
            };
            _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
                var closeEvent = $$$1.Event(Event.CLOSE);
                $$$1(element).trigger(closeEvent);
                return closeEvent;
            };
            _proto._removeElement = function _removeElement(element) {
                var _this = this;
                $$$1(element).removeClass(ClassName.SHOW);
                if (!$$$1(element).hasClass(ClassName.FADE)) {
                    this._destroyElement(element);
                    return;
                }
                var transitionDuration = Util.getTransitionDurationFromElement(element);
                $$$1(element).one(Util.TRANSITION_END, function (event) {
                    return _this._destroyElement(element, event);
                }).emulateTransitionEnd(transitionDuration);
            };
            _proto._destroyElement = function _destroyElement(element) {
                $$$1(element).detach().trigger(Event.CLOSED).remove();
            };
            Alert._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var $element = $$$1(this);
                    var data = $element.data(DATA_KEY);
                    if (!data) {
                        data = new Alert(this);
                        $element.data(DATA_KEY, data);
                    }
                    if (config === 'close') {
                        data[config](this);
                    }
                });
            };
            Alert._handleDismiss = function _handleDismiss(alertInstance) {
                return function (event) {
                    if (event) {
                        event.preventDefault();
                    }
                    alertInstance.close(this);
                };
            };
            _createClass(Alert, null, [{
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                }]);
            return Alert;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
        $$$1.fn[NAME] = Alert._jQueryInterface;
        $$$1.fn[NAME].Constructor = Alert;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Alert._jQueryInterface;
        };
        return Alert;
    }($);
    var Button = function ($$$1) {
        var NAME = 'button';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.button';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ClassName = {
            ACTIVE: 'active',
            BUTTON: 'btn',
            FOCUS: 'focus'
        };
        var Selector = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: 'input',
            ACTIVE: '.active',
            BUTTON: '.btn'
        };
        var Event = {
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,
            FOCUS_BLUR_DATA_API: 'focus' + EVENT_KEY + DATA_API_KEY + ' ' + ('blur' + EVENT_KEY + DATA_API_KEY)
        };
        var Button = function () {
            function Button(element) {
                this._element = element;
            }
            var _proto = Button.prototype;
            _proto.toggle = function toggle() {
                var triggerChangeEvent = true;
                var addAriaPressed = true;
                var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];
                if (rootElement) {
                    var input = this._element.querySelector(Selector.INPUT);
                    if (input) {
                        if (input.type === 'radio') {
                            if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {
                                triggerChangeEvent = false;
                            } else {
                                var activeElement = rootElement.querySelector(Selector.ACTIVE);
                                if (activeElement) {
                                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                                }
                            }
                        }
                        if (triggerChangeEvent) {
                            if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
                                return;
                            }
                            input.checked = !this._element.classList.contains(ClassName.ACTIVE);
                            $$$1(input).trigger('change');
                        }
                        input.focus();
                        addAriaPressed = false;
                    }
                }
                if (addAriaPressed) {
                    this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));
                }
                if (triggerChangeEvent) {
                    $$$1(this._element).toggleClass(ClassName.ACTIVE);
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            Button._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    if (!data) {
                        data = new Button(this);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (config === 'toggle') {
                        data[config]();
                    }
                });
            };
            _createClass(Button, null, [{
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                }]);
            return Button;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
            event.preventDefault();
            var button = event.target;
            if (!$$$1(button).hasClass(ClassName.BUTTON)) {
                button = $$$1(button).closest(Selector.BUTTON);
            }
            Button._jQueryInterface.call($$$1(button), 'toggle');
        }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
            var button = $$$1(event.target).closest(Selector.BUTTON)[0];
            $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
        });
        $$$1.fn[NAME] = Button._jQueryInterface;
        $$$1.fn[NAME].Constructor = Button;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Button._jQueryInterface;
        };
        return Button;
    }($);
    var Carousel = function ($$$1) {
        var NAME = 'carousel';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.carousel';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ARROW_LEFT_KEYCODE = 37;
        var ARROW_RIGHT_KEYCODE = 39;
        var TOUCHEVENT_COMPAT_WAIT = 500;
        var Default = {
            interval: 5000,
            keyboard: true,
            slide: false,
            pause: 'hover',
            wrap: true
        };
        var DefaultType = {
            interval: '(number|boolean)',
            keyboard: 'boolean',
            slide: '(boolean|string)',
            pause: '(string|boolean)',
            wrap: 'boolean'
        };
        var Direction = {
            NEXT: 'next',
            PREV: 'prev',
            LEFT: 'left',
            RIGHT: 'right'
        };
        var Event = {
            SLIDE: 'slide' + EVENT_KEY,
            SLID: 'slid' + EVENT_KEY,
            KEYDOWN: 'keydown' + EVENT_KEY,
            MOUSEENTER: 'mouseenter' + EVENT_KEY,
            MOUSELEAVE: 'mouseleave' + EVENT_KEY,
            TOUCHEND: 'touchend' + EVENT_KEY,
            LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            CAROUSEL: 'carousel',
            ACTIVE: 'active',
            SLIDE: 'slide',
            RIGHT: 'carousel-item-right',
            LEFT: 'carousel-item-left',
            NEXT: 'carousel-item-next',
            PREV: 'carousel-item-prev',
            ITEM: 'carousel-item'
        };
        var Selector = {
            ACTIVE: '.active',
            ACTIVE_ITEM: '.active.carousel-item',
            ITEM: '.carousel-item',
            NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
            INDICATORS: '.carousel-indicators',
            DATA_SLIDE: '[data-slide], [data-slide-to]',
            DATA_RIDE: '[data-ride="carousel"]'
        };
        var Carousel = function () {
            function Carousel(element, config) {
                this._items = null;
                this._interval = null;
                this._activeElement = null;
                this._isPaused = false;
                this._isSliding = false;
                this.touchTimeout = null;
                this._config = this._getConfig(config);
                this._element = $$$1(element)[0];
                this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);
                this._addEventListeners();
            }
            var _proto = Carousel.prototype;
            _proto.next = function next() {
                if (!this._isSliding) {
                    this._slide(Direction.NEXT);
                }
            };
            _proto.nextWhenVisible = function nextWhenVisible() {
                if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {
                    this.next();
                }
            };
            _proto.prev = function prev() {
                if (!this._isSliding) {
                    this._slide(Direction.PREV);
                }
            };
            _proto.pause = function pause(event) {
                if (!event) {
                    this._isPaused = true;
                }
                if (this._element.querySelector(Selector.NEXT_PREV)) {
                    Util.triggerTransitionEnd(this._element);
                    this.cycle(true);
                }
                clearInterval(this._interval);
                this._interval = null;
            };
            _proto.cycle = function cycle(event) {
                if (!event) {
                    this._isPaused = false;
                }
                if (this._interval) {
                    clearInterval(this._interval);
                    this._interval = null;
                }
                if (this._config.interval && !this._isPaused) {
                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                }
            };
            _proto.to = function to(index) {
                var _this = this;
                this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);
                var activeIndex = this._getItemIndex(this._activeElement);
                if (index > this._items.length - 1 || index < 0) {
                    return;
                }
                if (this._isSliding) {
                    $$$1(this._element).one(Event.SLID, function () {
                        return _this.to(index);
                    });
                    return;
                }
                if (activeIndex === index) {
                    this.pause();
                    this.cycle();
                    return;
                }
                var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;
                this._slide(direction, this._items[index]);
            };
            _proto.dispose = function dispose() {
                $$$1(this._element).off(EVENT_KEY);
                $$$1.removeData(this._element, DATA_KEY);
                this._items = null;
                this._config = null;
                this._element = null;
                this._interval = null;
                this._isPaused = null;
                this._isSliding = null;
                this._activeElement = null;
                this._indicatorsElement = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this2 = this;
                if (this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN, function (event) {
                        return _this2._keydown(event);
                    });
                }
                if (this._config.pause === 'hover') {
                    $$$1(this._element).on(Event.MOUSEENTER, function (event) {
                        return _this2.pause(event);
                    }).on(Event.MOUSELEAVE, function (event) {
                        return _this2.cycle(event);
                    });
                    if ('ontouchstart' in document.documentElement) {
                        $$$1(this._element).on(Event.TOUCHEND, function () {
                            _this2.pause();
                            if (_this2.touchTimeout) {
                                clearTimeout(_this2.touchTimeout);
                            }
                            _this2.touchTimeout = setTimeout(function (event) {
                                return _this2.cycle(event);
                            }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
                        });
                    }
                }
            };
            _proto._keydown = function _keydown(event) {
                if (/input|textarea/i.test(event.target.tagName)) {
                    return;
                }
                switch (event.which) {
                case ARROW_LEFT_KEYCODE:
                    event.preventDefault();
                    this.prev();
                    break;
                case ARROW_RIGHT_KEYCODE:
                    event.preventDefault();
                    this.next();
                    break;
                default:
                }
            };
            _proto._getItemIndex = function _getItemIndex(element) {
                this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM)) : [];
                return this._items.indexOf(element);
            };
            _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
                var isNextDirection = direction === Direction.NEXT;
                var isPrevDirection = direction === Direction.PREV;
                var activeIndex = this._getItemIndex(activeElement);
                var lastItemIndex = this._items.length - 1;
                var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;
                if (isGoingToWrap && !this._config.wrap) {
                    return activeElement;
                }
                var delta = direction === Direction.PREV ? -1 : 1;
                var itemIndex = (activeIndex + delta) % this._items.length;
                return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
            };
            _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
                var targetIndex = this._getItemIndex(relatedTarget);
                var fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));
                var slideEvent = $$$1.Event(Event.SLIDE, {
                    relatedTarget: relatedTarget,
                    direction: eventDirectionName,
                    from: fromIndex,
                    to: targetIndex
                });
                $$$1(this._element).trigger(slideEvent);
                return slideEvent;
            };
            _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
                if (this._indicatorsElement) {
                    var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));
                    $$$1(indicators).removeClass(ClassName.ACTIVE);
                    var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];
                    if (nextIndicator) {
                        $$$1(nextIndicator).addClass(ClassName.ACTIVE);
                    }
                }
            };
            _proto._slide = function _slide(direction, element) {
                var _this3 = this;
                var activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);
                var activeElementIndex = this._getItemIndex(activeElement);
                var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);
                var nextElementIndex = this._getItemIndex(nextElement);
                var isCycling = Boolean(this._interval);
                var directionalClassName;
                var orderClassName;
                var eventDirectionName;
                if (direction === Direction.NEXT) {
                    directionalClassName = ClassName.LEFT;
                    orderClassName = ClassName.NEXT;
                    eventDirectionName = Direction.LEFT;
                } else {
                    directionalClassName = ClassName.RIGHT;
                    orderClassName = ClassName.PREV;
                    eventDirectionName = Direction.RIGHT;
                }
                if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
                    this._isSliding = false;
                    return;
                }
                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);
                if (slideEvent.isDefaultPrevented()) {
                    return;
                }
                if (!activeElement || !nextElement) {
                    return;
                }
                this._isSliding = true;
                if (isCycling) {
                    this.pause();
                }
                this._setActiveIndicatorElement(nextElement);
                var slidEvent = $$$1.Event(Event.SLID, {
                    relatedTarget: nextElement,
                    direction: eventDirectionName,
                    from: activeElementIndex,
                    to: nextElementIndex
                });
                if ($$$1(this._element).hasClass(ClassName.SLIDE)) {
                    $$$1(nextElement).addClass(orderClassName);
                    Util.reflow(nextElement);
                    $$$1(activeElement).addClass(directionalClassName);
                    $$$1(nextElement).addClass(directionalClassName);
                    var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
                    $$$1(activeElement).one(Util.TRANSITION_END, function () {
                        $$$1(nextElement).removeClass(directionalClassName + ' ' + orderClassName).addClass(ClassName.ACTIVE);
                        $$$1(activeElement).removeClass(ClassName.ACTIVE + ' ' + orderClassName + ' ' + directionalClassName);
                        _this3._isSliding = false;
                        setTimeout(function () {
                            return $$$1(_this3._element).trigger(slidEvent);
                        }, 0);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    $$$1(activeElement).removeClass(ClassName.ACTIVE);
                    $$$1(nextElement).addClass(ClassName.ACTIVE);
                    this._isSliding = false;
                    $$$1(this._element).trigger(slidEvent);
                }
                if (isCycling) {
                    this.cycle();
                }
            };
            Carousel._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data());
                    if (typeof config === 'object') {
                        _config = _objectSpread({}, _config, config);
                    }
                    var action = typeof config === 'string' ? config : _config.slide;
                    if (!data) {
                        data = new Carousel(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'number') {
                        data.to(config);
                    } else if (typeof action === 'string') {
                        if (typeof data[action] === 'undefined') {
                            throw new TypeError('No method named "' + action + '"');
                        }
                        data[action]();
                    } else if (_config.interval) {
                        data.pause();
                        data.cycle();
                    }
                });
            };
            Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
                var selector = Util.getSelectorFromElement(this);
                if (!selector) {
                    return;
                }
                var target = $$$1(selector)[0];
                if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
                    return;
                }
                var config = _objectSpread({}, $$$1(target).data(), $$$1(this).data());
                var slideIndex = this.getAttribute('data-slide-to');
                if (slideIndex) {
                    config.interval = false;
                }
                Carousel._jQueryInterface.call($$$1(target), config);
                if (slideIndex) {
                    $$$1(target).data(DATA_KEY).to(slideIndex);
                }
                event.preventDefault();
            };
            _createClass(Carousel, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                }
            ]);
            return Carousel;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
        $$$1(window).on(Event.LOAD_DATA_API, function () {
            var carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));
            for (var i = 0, len = carousels.length; i < len; i++) {
                var $carousel = $$$1(carousels[i]);
                Carousel._jQueryInterface.call($carousel, $carousel.data());
            }
        });
        $$$1.fn[NAME] = Carousel._jQueryInterface;
        $$$1.fn[NAME].Constructor = Carousel;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Carousel._jQueryInterface;
        };
        return Carousel;
    }($);
    var Collapse = function ($$$1) {
        var NAME = 'collapse';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.collapse';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            toggle: true,
            parent: ''
        };
        var DefaultType = {
            toggle: 'boolean',
            parent: '(string|element)'
        };
        var Event = {
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SHOW: 'show',
            COLLAPSE: 'collapse',
            COLLAPSING: 'collapsing',
            COLLAPSED: 'collapsed'
        };
        var Dimension = {
            WIDTH: 'width',
            HEIGHT: 'height'
        };
        var Selector = {
            ACTIVES: '.show, .collapsing',
            DATA_TOGGLE: '[data-toggle="collapse"]'
        };
        var Collapse = function () {
            function Collapse(element, config) {
                this._isTransitioning = false;
                this._element = element;
                this._config = this._getConfig(config);
                this._triggerArray = $$$1.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#' + element.id + '"],' + ('[data-toggle="collapse"][data-target="#' + element.id + '"]')));
                var toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));
                for (var i = 0, len = toggleList.length; i < len; i++) {
                    var elem = toggleList[i];
                    var selector = Util.getSelectorFromElement(elem);
                    var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
                        return foundElem === element;
                    });
                    if (selector !== null && filterElement.length > 0) {
                        this._selector = selector;
                        this._triggerArray.push(elem);
                    }
                }
                this._parent = this._config.parent ? this._getParent() : null;
                if (!this._config.parent) {
                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                }
                if (this._config.toggle) {
                    this.toggle();
                }
            }
            var _proto = Collapse.prototype;
            _proto.toggle = function toggle() {
                if ($$$1(this._element).hasClass(ClassName.SHOW)) {
                    this.hide();
                } else {
                    this.show();
                }
            };
            _proto.show = function show() {
                var _this = this;
                if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var actives;
                var activesData;
                if (this._parent) {
                    actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(function (elem) {
                        return elem.getAttribute('data-parent') === _this._config.parent;
                    });
                    if (actives.length === 0) {
                        actives = null;
                    }
                }
                if (actives) {
                    activesData = $$$1(actives).not(this._selector).data(DATA_KEY);
                    if (activesData && activesData._isTransitioning) {
                        return;
                    }
                }
                var startEvent = $$$1.Event(Event.SHOW);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                if (actives) {
                    Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');
                    if (!activesData) {
                        $$$1(actives).data(DATA_KEY, null);
                    }
                }
                var dimension = this._getDimension();
                $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
                this._element.style[dimension] = 0;
                if (this._triggerArray.length) {
                    $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
                    _this._element.style[dimension] = '';
                    _this.setTransitioning(false);
                    $$$1(_this._element).trigger(Event.SHOWN);
                };
                var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
                var scrollSize = 'scroll' + capitalizedDimension;
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                this._element.style[dimension] = this._element[scrollSize] + 'px';
            };
            _proto.hide = function hide() {
                var _this2 = this;
                if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
                    return;
                }
                var startEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(startEvent);
                if (startEvent.isDefaultPrevented()) {
                    return;
                }
                var dimension = this._getDimension();
                this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + 'px';
                Util.reflow(this._element);
                $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);
                var triggerArrayLength = this._triggerArray.length;
                if (triggerArrayLength > 0) {
                    for (var i = 0; i < triggerArrayLength; i++) {
                        var trigger = this._triggerArray[i];
                        var selector = Util.getSelectorFromElement(trigger);
                        if (selector !== null) {
                            var $elem = $$$1([].slice.call(document.querySelectorAll(selector)));
                            if (!$elem.hasClass(ClassName.SHOW)) {
                                $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
                            }
                        }
                    }
                }
                this.setTransitioning(true);
                var complete = function complete() {
                    _this2.setTransitioning(false);
                    $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
                };
                this._element.style[dimension] = '';
                var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
            };
            _proto.setTransitioning = function setTransitioning(isTransitioning) {
                this._isTransitioning = isTransitioning;
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._config = null;
                this._parent = null;
                this._element = null;
                this._triggerArray = null;
                this._isTransitioning = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                config.toggle = Boolean(config.toggle);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getDimension = function _getDimension() {
                var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
                return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
            };
            _proto._getParent = function _getParent() {
                var _this3 = this;
                var parent = null;
                if (Util.isElement(this._config.parent)) {
                    parent = this._config.parent;
                    if (typeof this._config.parent.jquery !== 'undefined') {
                        parent = this._config.parent[0];
                    }
                } else {
                    parent = document.querySelector(this._config.parent);
                }
                var selector = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                var children = [].slice.call(parent.querySelectorAll(selector));
                $$$1(children).each(function (i, element) {
                    _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
                });
                return parent;
            };
            _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
                if (element) {
                    var isOpen = $$$1(element).hasClass(ClassName.SHOW);
                    if (triggerArray.length) {
                        $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
                    }
                }
            };
            Collapse._getTargetFromElement = function _getTargetFromElement(element) {
                var selector = Util.getSelectorFromElement(element);
                return selector ? document.querySelector(selector) : null;
            };
            Collapse._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $this.data(), typeof config === 'object' && config ? config : {});
                    if (!data && _config.toggle && /show|hide/.test(config)) {
                        _config.toggle = false;
                    }
                    if (!data) {
                        data = new Collapse(this, _config);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Collapse, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                }
            ]);
            return Collapse;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
            if (event.currentTarget.tagName === 'A') {
                event.preventDefault();
            }
            var $trigger = $$$1(this);
            var selector = Util.getSelectorFromElement(this);
            var selectors = [].slice.call(document.querySelectorAll(selector));
            $$$1(selectors).each(function () {
                var $target = $$$1(this);
                var data = $target.data(DATA_KEY);
                var config = data ? 'toggle' : $trigger.data();
                Collapse._jQueryInterface.call($target, config);
            });
        });
        $$$1.fn[NAME] = Collapse._jQueryInterface;
        $$$1.fn[NAME].Constructor = Collapse;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Collapse._jQueryInterface;
        };
        return Collapse;
    }($);
    var Dropdown = function ($$$1) {
        var NAME = 'dropdown';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.dropdown';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var SPACE_KEYCODE = 32;
        var TAB_KEYCODE = 9;
        var ARROW_UP_KEYCODE = 38;
        var ARROW_DOWN_KEYCODE = 40;
        var RIGHT_MOUSE_BUTTON_WHICH = 3;
        var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + '|' + ARROW_DOWN_KEYCODE + '|' + ESCAPE_KEYCODE);
        var Event = {
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            CLICK: 'click' + EVENT_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,
            KEYDOWN_DATA_API: 'keydown' + EVENT_KEY + DATA_API_KEY,
            KEYUP_DATA_API: 'keyup' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DISABLED: 'disabled',
            SHOW: 'show',
            DROPUP: 'dropup',
            DROPRIGHT: 'dropright',
            DROPLEFT: 'dropleft',
            MENURIGHT: 'dropdown-menu-right',
            MENULEFT: 'dropdown-menu-left',
            POSITION_STATIC: 'position-static'
        };
        var Selector = {
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: '.dropdown form',
            MENU: '.dropdown-menu',
            NAVBAR_NAV: '.navbar-nav',
            VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
        };
        var AttachmentMap = {
            TOP: 'top-start',
            TOPEND: 'top-end',
            BOTTOM: 'bottom-start',
            BOTTOMEND: 'bottom-end',
            RIGHT: 'right-start',
            RIGHTEND: 'right-end',
            LEFT: 'left-start',
            LEFTEND: 'left-end'
        };
        var Default = {
            offset: 0,
            flip: true,
            boundary: 'scrollParent',
            reference: 'toggle',
            display: 'dynamic'
        };
        var DefaultType = {
            offset: '(number|string|function)',
            flip: 'boolean',
            boundary: '(string|element)',
            reference: '(string|element)',
            display: 'string'
        };
        var Dropdown = function () {
            function Dropdown(element, config) {
                this._element = element;
                this._popper = null;
                this._config = this._getConfig(config);
                this._menu = this._getMenuElement();
                this._inNavbar = this._detectNavbar();
                this._addEventListeners();
            }
            var _proto = Dropdown.prototype;
            _proto.toggle = function toggle() {
                if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this._element);
                var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);
                Dropdown._clearMenus();
                if (isActive) {
                    return;
                }
                var relatedTarget = { relatedTarget: this._element };
                var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
                $$$1(parent).trigger(showEvent);
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                if (!this._inNavbar) {
                    if (typeof Popper === 'undefined') {
                        throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)');
                    }
                    var referenceElement = this._element;
                    if (this._config.reference === 'parent') {
                        referenceElement = parent;
                    } else if (Util.isElement(this._config.reference)) {
                        referenceElement = this._config.reference;
                        if (typeof this._config.reference.jquery !== 'undefined') {
                            referenceElement = this._config.reference[0];
                        }
                    }
                    if (this._config.boundary !== 'scrollParent') {
                        $$$1(parent).addClass(ClassName.POSITION_STATIC);
                    }
                    this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
                }
                if ('ontouchstart' in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
                    $$$1(document.body).children().on('mouseover', null, $$$1.noop);
                }
                this._element.focus();
                this._element.setAttribute('aria-expanded', true);
                $$$1(this._menu).toggleClass(ClassName.SHOW);
                $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._element).off(EVENT_KEY);
                this._element = null;
                this._menu = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                    this._popper = null;
                }
            };
            _proto.update = function update() {
                this._inNavbar = this._detectNavbar();
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto._addEventListeners = function _addEventListeners() {
                var _this = this;
                $$$1(this._element).on(Event.CLICK, function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    _this.toggle();
                });
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this._element).data(), config);
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getMenuElement = function _getMenuElement() {
                if (!this._menu) {
                    var parent = Dropdown._getParentFromElement(this._element);
                    if (parent) {
                        this._menu = parent.querySelector(Selector.MENU);
                    }
                }
                return this._menu;
            };
            _proto._getPlacement = function _getPlacement() {
                var $parentDropdown = $$$1(this._element.parentNode);
                var placement = AttachmentMap.BOTTOM;
                if ($parentDropdown.hasClass(ClassName.DROPUP)) {
                    placement = AttachmentMap.TOP;
                    if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                        placement = AttachmentMap.TOPEND;
                    }
                } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
                    placement = AttachmentMap.RIGHT;
                } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
                    placement = AttachmentMap.LEFT;
                } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
                    placement = AttachmentMap.BOTTOMEND;
                }
                return placement;
            };
            _proto._detectNavbar = function _detectNavbar() {
                return $$$1(this._element).closest('.navbar').length > 0;
            };
            _proto._getPopperConfig = function _getPopperConfig() {
                var _this2 = this;
                var offsetConf = {};
                if (typeof this._config.offset === 'function') {
                    offsetConf.fn = function (data) {
                        data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets) || {});
                        return data;
                    };
                } else {
                    offsetConf.offset = this._config.offset;
                }
                var popperConfig = {
                    placement: this._getPlacement(),
                    modifiers: {
                        offset: offsetConf,
                        flip: { enabled: this._config.flip },
                        preventOverflow: { boundariesElement: this._config.boundary }
                    }
                };
                if (this._config.display === 'static') {
                    popperConfig.modifiers.applyStyle = { enabled: false };
                }
                return popperConfig;
            };
            Dropdown._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === 'object' ? config : null;
                    if (!data) {
                        data = new Dropdown(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            Dropdown._clearMenus = function _clearMenus(event) {
                if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
                    return;
                }
                var toggles = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));
                for (var i = 0, len = toggles.length; i < len; i++) {
                    var parent = Dropdown._getParentFromElement(toggles[i]);
                    var context = $$$1(toggles[i]).data(DATA_KEY);
                    var relatedTarget = { relatedTarget: toggles[i] };
                    if (event && event.type === 'click') {
                        relatedTarget.clickEvent = event;
                    }
                    if (!context) {
                        continue;
                    }
                    var dropdownMenu = context._menu;
                    if (!$$$1(parent).hasClass(ClassName.SHOW)) {
                        continue;
                    }
                    if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
                        continue;
                    }
                    var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
                    $$$1(parent).trigger(hideEvent);
                    if (hideEvent.isDefaultPrevented()) {
                        continue;
                    }
                    if ('ontouchstart' in document.documentElement) {
                        $$$1(document.body).children().off('mouseover', null, $$$1.noop);
                    }
                    toggles[i].setAttribute('aria-expanded', 'false');
                    $$$1(dropdownMenu).removeClass(ClassName.SHOW);
                    $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
                }
            };
            Dropdown._getParentFromElement = function _getParentFromElement(element) {
                var parent;
                var selector = Util.getSelectorFromElement(element);
                if (selector) {
                    parent = document.querySelector(selector);
                }
                return parent || element.parentNode;
            };
            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
                if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
                if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var parent = Dropdown._getParentFromElement(this);
                var isActive = $$$1(parent).hasClass(ClassName.SHOW);
                if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
                    if (event.which === ESCAPE_KEYCODE) {
                        var toggle = parent.querySelector(Selector.DATA_TOGGLE);
                        $$$1(toggle).trigger('focus');
                    }
                    $$$1(this).trigger('click');
                    return;
                }
                var items = [].slice.call(parent.querySelectorAll(Selector.VISIBLE_ITEMS));
                if (items.length === 0) {
                    return;
                }
                var index = items.indexOf(event.target);
                if (event.which === ARROW_UP_KEYCODE && index > 0) {
                    index--;
                }
                if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
                    index++;
                }
                if (index < 0) {
                    index = 0;
                }
                items[index].focus();
            };
            _createClass(Dropdown, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                },
                {
                    key: 'DefaultType',
                    get: function get() {
                        return DefaultType;
                    }
                }
            ]);
            return Dropdown;
        }();
        $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + ' ' + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
            event.preventDefault();
            event.stopPropagation();
            Dropdown._jQueryInterface.call($$$1(this), 'toggle');
        }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
            e.stopPropagation();
        });
        $$$1.fn[NAME] = Dropdown._jQueryInterface;
        $$$1.fn[NAME].Constructor = Dropdown;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Dropdown._jQueryInterface;
        };
        return Dropdown;
    }($, Popper);
    var Modal = function ($$$1) {
        var NAME = 'modal';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.modal';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var ESCAPE_KEYCODE = 27;
        var Default = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var DefaultType = {
            backdrop: '(boolean|string)',
            keyboard: 'boolean',
            focus: 'boolean',
            show: 'boolean'
        };
        var Event = {
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            FOCUSIN: 'focusin' + EVENT_KEY,
            RESIZE: 'resize' + EVENT_KEY,
            CLICK_DISMISS: 'click.dismiss' + EVENT_KEY,
            KEYDOWN_DISMISS: 'keydown.dismiss' + EVENT_KEY,
            MOUSEUP_DISMISS: 'mouseup.dismiss' + EVENT_KEY,
            MOUSEDOWN_DISMISS: 'mousedown.dismiss' + EVENT_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
            BACKDROP: 'modal-backdrop',
            OPEN: 'modal-open',
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            DIALOG: '.modal-dialog',
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
            STICKY_CONTENT: '.sticky-top'
        };
        var Modal = function () {
            function Modal(element, config) {
                this._config = this._getConfig(config);
                this._element = element;
                this._dialog = element.querySelector(Selector.DIALOG);
                this._backdrop = null;
                this._isShown = false;
                this._isBodyOverflowing = false;
                this._ignoreBackdropClick = false;
                this._scrollbarWidth = 0;
            }
            var _proto = Modal.prototype;
            _proto.toggle = function toggle(relatedTarget) {
                return this._isShown ? this.hide() : this.show(relatedTarget);
            };
            _proto.show = function show(relatedTarget) {
                var _this = this;
                if (this._isTransitioning || this._isShown) {
                    return;
                }
                if ($$$1(this._element).hasClass(ClassName.FADE)) {
                    this._isTransitioning = true;
                }
                var showEvent = $$$1.Event(Event.SHOW, { relatedTarget: relatedTarget });
                $$$1(this._element).trigger(showEvent);
                if (this._isShown || showEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = true;
                this._checkScrollbar();
                this._setScrollbar();
                this._adjustDialog();
                $$$1(document.body).addClass(ClassName.OPEN);
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
                    return _this.hide(event);
                });
                $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
                    $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
                        if ($$$1(event.target).is(_this._element)) {
                            _this._ignoreBackdropClick = true;
                        }
                    });
                });
                this._showBackdrop(function () {
                    return _this._showElement(relatedTarget);
                });
            };
            _proto.hide = function hide(event) {
                var _this2 = this;
                if (event) {
                    event.preventDefault();
                }
                if (this._isTransitioning || !this._isShown) {
                    return;
                }
                var hideEvent = $$$1.Event(Event.HIDE);
                $$$1(this._element).trigger(hideEvent);
                if (!this._isShown || hideEvent.isDefaultPrevented()) {
                    return;
                }
                this._isShown = false;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (transition) {
                    this._isTransitioning = true;
                }
                this._setEscapeEvent();
                this._setResizeEvent();
                $$$1(document).off(Event.FOCUSIN);
                $$$1(this._element).removeClass(ClassName.SHOW);
                $$$1(this._element).off(Event.CLICK_DISMISS);
                $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._element).one(Util.TRANSITION_END, function (event) {
                        return _this2._hideModal(event);
                    }).emulateTransitionEnd(transitionDuration);
                } else {
                    this._hideModal();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
                this._config = null;
                this._element = null;
                this._dialog = null;
                this._backdrop = null;
                this._isShown = null;
                this._isBodyOverflowing = null;
                this._ignoreBackdropClick = null;
                this._scrollbarWidth = null;
            };
            _proto.handleUpdate = function handleUpdate() {
                this._adjustDialog();
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, config);
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._showElement = function _showElement(relatedTarget) {
                var _this3 = this;
                var transition = $$$1(this._element).hasClass(ClassName.FADE);
                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                    document.body.appendChild(this._element);
                }
                this._element.style.display = 'block';
                this._element.removeAttribute('aria-hidden');
                this._element.scrollTop = 0;
                if (transition) {
                    Util.reflow(this._element);
                }
                $$$1(this._element).addClass(ClassName.SHOW);
                if (this._config.focus) {
                    this._enforceFocus();
                }
                var shownEvent = $$$1.Event(Event.SHOWN, { relatedTarget: relatedTarget });
                var transitionComplete = function transitionComplete() {
                    if (_this3._config.focus) {
                        _this3._element.focus();
                    }
                    _this3._isTransitioning = false;
                    $$$1(_this3._element).trigger(shownEvent);
                };
                if (transition) {
                    var transitionDuration = Util.getTransitionDurationFromElement(this._element);
                    $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
                } else {
                    transitionComplete();
                }
            };
            _proto._enforceFocus = function _enforceFocus() {
                var _this4 = this;
                $$$1(document).off(Event.FOCUSIN).on(Event.FOCUSIN, function (event) {
                    if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
                        _this4._element.focus();
                    }
                });
            };
            _proto._setEscapeEvent = function _setEscapeEvent() {
                var _this5 = this;
                if (this._isShown && this._config.keyboard) {
                    $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
                        if (event.which === ESCAPE_KEYCODE) {
                            event.preventDefault();
                            _this5.hide();
                        }
                    });
                } else if (!this._isShown) {
                    $$$1(this._element).off(Event.KEYDOWN_DISMISS);
                }
            };
            _proto._setResizeEvent = function _setResizeEvent() {
                var _this6 = this;
                if (this._isShown) {
                    $$$1(window).on(Event.RESIZE, function (event) {
                        return _this6.handleUpdate(event);
                    });
                } else {
                    $$$1(window).off(Event.RESIZE);
                }
            };
            _proto._hideModal = function _hideModal() {
                var _this7 = this;
                this._element.style.display = 'none';
                this._element.setAttribute('aria-hidden', true);
                this._isTransitioning = false;
                this._showBackdrop(function () {
                    $$$1(document.body).removeClass(ClassName.OPEN);
                    _this7._resetAdjustments();
                    _this7._resetScrollbar();
                    $$$1(_this7._element).trigger(Event.HIDDEN);
                });
            };
            _proto._removeBackdrop = function _removeBackdrop() {
                if (this._backdrop) {
                    $$$1(this._backdrop).remove();
                    this._backdrop = null;
                }
            };
            _proto._showBackdrop = function _showBackdrop(callback) {
                var _this8 = this;
                var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';
                if (this._isShown && this._config.backdrop) {
                    this._backdrop = document.createElement('div');
                    this._backdrop.className = ClassName.BACKDROP;
                    if (animate) {
                        this._backdrop.classList.add(animate);
                    }
                    $$$1(this._backdrop).appendTo(document.body);
                    $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {
                        if (_this8._ignoreBackdropClick) {
                            _this8._ignoreBackdropClick = false;
                            return;
                        }
                        if (event.target !== event.currentTarget) {
                            return;
                        }
                        if (_this8._config.backdrop === 'static') {
                            _this8._element.focus();
                        } else {
                            _this8.hide();
                        }
                    });
                    if (animate) {
                        Util.reflow(this._backdrop);
                    }
                    $$$1(this._backdrop).addClass(ClassName.SHOW);
                    if (!callback) {
                        return;
                    }
                    if (!animate) {
                        callback();
                        return;
                    }
                    var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                    $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
                } else if (!this._isShown && this._backdrop) {
                    $$$1(this._backdrop).removeClass(ClassName.SHOW);
                    var callbackRemove = function callbackRemove() {
                        _this8._removeBackdrop();
                        if (callback) {
                            callback();
                        }
                    };
                    if ($$$1(this._element).hasClass(ClassName.FADE)) {
                        var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
                        $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
                    } else {
                        callbackRemove();
                    }
                } else if (callback) {
                    callback();
                }
            };
            _proto._adjustDialog = function _adjustDialog() {
                var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
                if (!this._isBodyOverflowing && isModalOverflowing) {
                    this._element.style.paddingLeft = this._scrollbarWidth + 'px';
                }
                if (this._isBodyOverflowing && !isModalOverflowing) {
                    this._element.style.paddingRight = this._scrollbarWidth + 'px';
                }
            };
            _proto._resetAdjustments = function _resetAdjustments() {
                this._element.style.paddingLeft = '';
                this._element.style.paddingRight = '';
            };
            _proto._checkScrollbar = function _checkScrollbar() {
                var rect = document.body.getBoundingClientRect();
                this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
                this._scrollbarWidth = this._getScrollbarWidth();
            };
            _proto._setScrollbar = function _setScrollbar() {
                var _this9 = this;
                if (this._isBodyOverflowing) {
                    var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
                    var stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT));
                    $$$1(fixedContent).each(function (index, element) {
                        var actualPadding = element.style.paddingRight;
                        var calculatedPadding = $$$1(element).css('padding-right');
                        $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + 'px');
                    });
                    $$$1(stickyContent).each(function (index, element) {
                        var actualMargin = element.style.marginRight;
                        var calculatedMargin = $$$1(element).css('margin-right');
                        $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + 'px');
                    });
                    var actualPadding = document.body.style.paddingRight;
                    var calculatedPadding = $$$1(document.body).css('padding-right');
                    $$$1(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + 'px');
                }
            };
            _proto._resetScrollbar = function _resetScrollbar() {
                var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
                $$$1(fixedContent).each(function (index, element) {
                    var padding = $$$1(element).data('padding-right');
                    $$$1(element).removeData('padding-right');
                    element.style.paddingRight = padding ? padding : '';
                });
                var elements = [].slice.call(document.querySelectorAll('' + Selector.STICKY_CONTENT));
                $$$1(elements).each(function (index, element) {
                    var margin = $$$1(element).data('margin-right');
                    if (typeof margin !== 'undefined') {
                        $$$1(element).css('margin-right', margin).removeData('margin-right');
                    }
                });
                var padding = $$$1(document.body).data('padding-right');
                $$$1(document.body).removeData('padding-right');
                document.body.style.paddingRight = padding ? padding : '';
            };
            _proto._getScrollbarWidth = function _getScrollbarWidth() {
                var scrollDiv = document.createElement('div');
                scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
                document.body.appendChild(scrollDiv);
                var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv);
                return scrollbarWidth;
            };
            Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = _objectSpread({}, Default, $$$1(this).data(), typeof config === 'object' && config ? config : {});
                    if (!data) {
                        data = new Modal(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config](relatedTarget);
                    } else if (_config.show) {
                        data.show(relatedTarget);
                    }
                });
            };
            _createClass(Modal, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                }
            ]);
            return Modal;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
            var _this10 = this;
            var target;
            var selector = Util.getSelectorFromElement(this);
            if (selector) {
                target = document.querySelector(selector);
            }
            var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _objectSpread({}, $$$1(target).data(), $$$1(this).data());
            if (this.tagName === 'A' || this.tagName === 'AREA') {
                event.preventDefault();
            }
            var $target = $$$1(target).one(Event.SHOW, function (showEvent) {
                if (showEvent.isDefaultPrevented()) {
                    return;
                }
                $target.one(Event.HIDDEN, function () {
                    if ($$$1(_this10).is(':visible')) {
                        _this10.focus();
                    }
                });
            });
            Modal._jQueryInterface.call($$$1(target), config, this);
        });
        $$$1.fn[NAME] = Modal._jQueryInterface;
        $$$1.fn[NAME].Constructor = Modal;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Modal._jQueryInterface;
        };
        return Modal;
    }($);
    var Tooltip = function ($$$1) {
        var NAME = 'tooltip';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.tooltip';
        var EVENT_KEY = '.' + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = 'bs-tooltip';
        var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g');
        var DefaultType = {
            animation: 'boolean',
            template: 'string',
            title: '(string|element|function)',
            trigger: 'string',
            delay: '(number|object)',
            html: 'boolean',
            selector: '(string|boolean)',
            placement: '(string|function)',
            offset: '(number|string)',
            container: '(string|element|boolean)',
            fallbackPlacement: '(string|array)',
            boundary: '(string|element)'
        };
        var AttachmentMap = {
            AUTO: 'auto',
            TOP: 'top',
            RIGHT: 'right',
            BOTTOM: 'bottom',
            LEFT: 'left'
        };
        var Default = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
            trigger: 'hover focus',
            title: '',
            delay: 0,
            html: false,
            selector: false,
            placement: 'top',
            offset: 0,
            container: false,
            fallbackPlacement: 'flip',
            boundary: 'scrollParent'
        };
        var HoverState = {
            SHOW: 'show',
            OUT: 'out'
        };
        var Event = {
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            INSERTED: 'inserted' + EVENT_KEY,
            CLICK: 'click' + EVENT_KEY,
            FOCUSIN: 'focusin' + EVENT_KEY,
            FOCUSOUT: 'focusout' + EVENT_KEY,
            MOUSEENTER: 'mouseenter' + EVENT_KEY,
            MOUSELEAVE: 'mouseleave' + EVENT_KEY
        };
        var ClassName = {
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            TOOLTIP: '.tooltip',
            TOOLTIP_INNER: '.tooltip-inner',
            ARROW: '.arrow'
        };
        var Trigger = {
            HOVER: 'hover',
            FOCUS: 'focus',
            CLICK: 'click',
            MANUAL: 'manual'
        };
        var Tooltip = function () {
            function Tooltip(element, config) {
                if (typeof Popper === 'undefined') {
                    throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');
                }
                this._isEnabled = true;
                this._timeout = 0;
                this._hoverState = '';
                this._activeTrigger = {};
                this._popper = null;
                this.element = element;
                this.config = this._getConfig(config);
                this.tip = null;
                this._setListeners();
            }
            var _proto = Tooltip.prototype;
            _proto.enable = function enable() {
                this._isEnabled = true;
            };
            _proto.disable = function disable() {
                this._isEnabled = false;
            };
            _proto.toggleEnabled = function toggleEnabled() {
                this._isEnabled = !this._isEnabled;
            };
            _proto.toggle = function toggle(event) {
                if (!this._isEnabled) {
                    return;
                }
                if (event) {
                    var dataKey = this.constructor.DATA_KEY;
                    var context = $$$1(event.currentTarget).data(dataKey);
                    if (!context) {
                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                        $$$1(event.currentTarget).data(dataKey, context);
                    }
                    context._activeTrigger.click = !context._activeTrigger.click;
                    if (context._isWithActiveTrigger()) {
                        context._enter(null, context);
                    } else {
                        context._leave(null, context);
                    }
                } else {
                    if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
                        this._leave(null, this);
                        return;
                    }
                    this._enter(null, this);
                }
            };
            _proto.dispose = function dispose() {
                clearTimeout(this._timeout);
                $$$1.removeData(this.element, this.constructor.DATA_KEY);
                $$$1(this.element).off(this.constructor.EVENT_KEY);
                $$$1(this.element).closest('.modal').off('hide.bs.modal');
                if (this.tip) {
                    $$$1(this.tip).remove();
                }
                this._isEnabled = null;
                this._timeout = null;
                this._hoverState = null;
                this._activeTrigger = null;
                if (this._popper !== null) {
                    this._popper.destroy();
                }
                this._popper = null;
                this.element = null;
                this.config = null;
                this.tip = null;
            };
            _proto.show = function show() {
                var _this = this;
                if ($$$1(this.element).css('display') === 'none') {
                    throw new Error('Please use show on visible elements');
                }
                var showEvent = $$$1.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    $$$1(this.element).trigger(showEvent);
                    var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);
                    if (showEvent.isDefaultPrevented() || !isInTheDom) {
                        return;
                    }
                    var tip = this.getTipElement();
                    var tipId = Util.getUID(this.constructor.NAME);
                    tip.setAttribute('id', tipId);
                    this.element.setAttribute('aria-describedby', tipId);
                    this.setContent();
                    if (this.config.animation) {
                        $$$1(tip).addClass(ClassName.FADE);
                    }
                    var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;
                    var attachment = this._getAttachment(placement);
                    this.addAttachmentClass(attachment);
                    var container = this.config.container === false ? document.body : $$$1(document).find(this.config.container);
                    $$$1(tip).data(this.constructor.DATA_KEY, this);
                    if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
                        $$$1(tip).appendTo(container);
                    }
                    $$$1(this.element).trigger(this.constructor.Event.INSERTED);
                    this._popper = new Popper(this.element, tip, {
                        placement: attachment,
                        modifiers: {
                            offset: { offset: this.config.offset },
                            flip: { behavior: this.config.fallbackPlacement },
                            arrow: { element: Selector.ARROW },
                            preventOverflow: { boundariesElement: this.config.boundary }
                        },
                        onCreate: function onCreate(data) {
                            if (data.originalPlacement !== data.placement) {
                                _this._handlePopperPlacementChange(data);
                            }
                        },
                        onUpdate: function onUpdate(data) {
                            _this._handlePopperPlacementChange(data);
                        }
                    });
                    $$$1(tip).addClass(ClassName.SHOW);
                    if ('ontouchstart' in document.documentElement) {
                        $$$1(document.body).children().on('mouseover', null, $$$1.noop);
                    }
                    var complete = function complete() {
                        if (_this.config.animation) {
                            _this._fixTransition();
                        }
                        var prevHoverState = _this._hoverState;
                        _this._hoverState = null;
                        $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);
                        if (prevHoverState === HoverState.OUT) {
                            _this._leave(null, _this);
                        }
                    };
                    if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                        var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
                        $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                    } else {
                        complete();
                    }
                }
            };
            _proto.hide = function hide(callback) {
                var _this2 = this;
                var tip = this.getTipElement();
                var hideEvent = $$$1.Event(this.constructor.Event.HIDE);
                var complete = function complete() {
                    if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
                        tip.parentNode.removeChild(tip);
                    }
                    _this2._cleanTipClass();
                    _this2.element.removeAttribute('aria-describedby');
                    $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);
                    if (_this2._popper !== null) {
                        _this2._popper.destroy();
                    }
                    if (callback) {
                        callback();
                    }
                };
                $$$1(this.element).trigger(hideEvent);
                if (hideEvent.isDefaultPrevented()) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.SHOW);
                if ('ontouchstart' in document.documentElement) {
                    $$$1(document.body).children().off('mouseover', null, $$$1.noop);
                }
                this._activeTrigger[Trigger.CLICK] = false;
                this._activeTrigger[Trigger.FOCUS] = false;
                this._activeTrigger[Trigger.HOVER] = false;
                if ($$$1(this.tip).hasClass(ClassName.FADE)) {
                    var transitionDuration = Util.getTransitionDurationFromElement(tip);
                    $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
                this._hoverState = '';
            };
            _proto.update = function update() {
                if (this._popper !== null) {
                    this._popper.scheduleUpdate();
                }
            };
            _proto.isWithContent = function isWithContent() {
                return Boolean(this.getTitle());
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var tip = this.getTipElement();
                this.setElementContent($$$1(tip.querySelectorAll(Selector.TOOLTIP_INNER)), this.getTitle());
                $$$1(tip).removeClass(ClassName.FADE + ' ' + ClassName.SHOW);
            };
            _proto.setElementContent = function setElementContent($element, content) {
                var html = this.config.html;
                if (typeof content === 'object' && (content.nodeType || content.jquery)) {
                    if (html) {
                        if (!$$$1(content).parent().is($element)) {
                            $element.empty().append(content);
                        }
                    } else {
                        $element.text($$$1(content).text());
                    }
                } else {
                    $element[html ? 'html' : 'text'](content);
                }
            };
            _proto.getTitle = function getTitle() {
                var title = this.element.getAttribute('data-original-title');
                if (!title) {
                    title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
                }
                return title;
            };
            _proto._getAttachment = function _getAttachment(placement) {
                return AttachmentMap[placement.toUpperCase()];
            };
            _proto._setListeners = function _setListeners() {
                var _this3 = this;
                var triggers = this.config.trigger.split(' ');
                triggers.forEach(function (trigger) {
                    if (trigger === 'click') {
                        $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {
                            return _this3.toggle(event);
                        });
                    } else if (trigger !== Trigger.MANUAL) {
                        var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
                        var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
                        $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {
                            return _this3._enter(event);
                        }).on(eventOut, _this3.config.selector, function (event) {
                            return _this3._leave(event);
                        });
                    }
                    $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {
                        return _this3.hide();
                    });
                });
                if (this.config.selector) {
                    this.config = _objectSpread({}, this.config, {
                        trigger: 'manual',
                        selector: ''
                    });
                } else {
                    this._fixTitle();
                }
            };
            _proto._fixTitle = function _fixTitle() {
                var titleType = typeof this.element.getAttribute('data-original-title');
                if (this.element.getAttribute('title') || titleType !== 'string') {
                    this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
                    this.element.setAttribute('title', '');
                }
            };
            _proto._enter = function _enter(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
                }
                if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
                    context._hoverState = HoverState.SHOW;
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.SHOW;
                if (!context.config.delay || !context.config.delay.show) {
                    context.show();
                    return;
                }
                context._timeout = setTimeout(function () {
                    if (context._hoverState === HoverState.SHOW) {
                        context.show();
                    }
                }, context.config.delay.show);
            };
            _proto._leave = function _leave(event, context) {
                var dataKey = this.constructor.DATA_KEY;
                context = context || $$$1(event.currentTarget).data(dataKey);
                if (!context) {
                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());
                    $$$1(event.currentTarget).data(dataKey, context);
                }
                if (event) {
                    context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
                }
                if (context._isWithActiveTrigger()) {
                    return;
                }
                clearTimeout(context._timeout);
                context._hoverState = HoverState.OUT;
                if (!context.config.delay || !context.config.delay.hide) {
                    context.hide();
                    return;
                }
                context._timeout = setTimeout(function () {
                    if (context._hoverState === HoverState.OUT) {
                        context.hide();
                    }
                }, context.config.delay.hide);
            };
            _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
                for (var trigger in this._activeTrigger) {
                    if (this._activeTrigger[trigger]) {
                        return true;
                    }
                }
                return false;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, this.constructor.Default, $$$1(this.element).data(), typeof config === 'object' && config ? config : {});
                if (typeof config.delay === 'number') {
                    config.delay = {
                        show: config.delay,
                        hide: config.delay
                    };
                }
                if (typeof config.title === 'number') {
                    config.title = config.title.toString();
                }
                if (typeof config.content === 'number') {
                    config.content = config.content.toString();
                }
                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
                return config;
            };
            _proto._getDelegateConfig = function _getDelegateConfig() {
                var config = {};
                if (this.config) {
                    for (var key in this.config) {
                        if (this.constructor.Default[key] !== this.config[key]) {
                            config[key] = this.config[key];
                        }
                    }
                }
                return config;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length) {
                    $tip.removeClass(tabClass.join(''));
                }
            };
            _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
                var popperInstance = popperData.instance;
                this.tip = popperInstance.popper;
                this._cleanTipClass();
                this.addAttachmentClass(this._getAttachment(popperData.placement));
            };
            _proto._fixTransition = function _fixTransition() {
                var tip = this.getTipElement();
                var initConfigAnimation = this.config.animation;
                if (tip.getAttribute('x-placement') !== null) {
                    return;
                }
                $$$1(tip).removeClass(ClassName.FADE);
                this.config.animation = false;
                this.hide();
                this.show();
                this.config.animation = initConfigAnimation;
            };
            Tooltip._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === 'object' && config;
                    if (!data && /dispose|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Tooltip(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tooltip, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                },
                {
                    key: 'NAME',
                    get: function get() {
                        return NAME;
                    }
                },
                {
                    key: 'DATA_KEY',
                    get: function get() {
                        return DATA_KEY;
                    }
                },
                {
                    key: 'Event',
                    get: function get() {
                        return Event;
                    }
                },
                {
                    key: 'EVENT_KEY',
                    get: function get() {
                        return EVENT_KEY;
                    }
                },
                {
                    key: 'DefaultType',
                    get: function get() {
                        return DefaultType;
                    }
                }
            ]);
            return Tooltip;
        }();
        $$$1.fn[NAME] = Tooltip._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tooltip;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tooltip._jQueryInterface;
        };
        return Tooltip;
    }($, Popper);
    var Popover = function ($$$1) {
        var NAME = 'popover';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.popover';
        var EVENT_KEY = '.' + DATA_KEY;
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var CLASS_PREFIX = 'bs-popover';
        var BSCLS_PREFIX_REGEX = new RegExp('(^|\\s)' + CLASS_PREFIX + '\\S+', 'g');
        var Default = _objectSpread({}, Tooltip.Default, {
            placement: 'right',
            trigger: 'click',
            content: '',
            template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
        });
        var DefaultType = _objectSpread({}, Tooltip.DefaultType, { content: '(string|element|function)' });
        var ClassName = {
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            TITLE: '.popover-header',
            CONTENT: '.popover-body'
        };
        var Event = {
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            INSERTED: 'inserted' + EVENT_KEY,
            CLICK: 'click' + EVENT_KEY,
            FOCUSIN: 'focusin' + EVENT_KEY,
            FOCUSOUT: 'focusout' + EVENT_KEY,
            MOUSEENTER: 'mouseenter' + EVENT_KEY,
            MOUSELEAVE: 'mouseleave' + EVENT_KEY
        };
        var Popover = function (_Tooltip) {
            _inheritsLoose(Popover, _Tooltip);
            function Popover() {
                return _Tooltip.apply(this, arguments) || this;
            }
            var _proto = Popover.prototype;
            _proto.isWithContent = function isWithContent() {
                return this.getTitle() || this._getContent();
            };
            _proto.addAttachmentClass = function addAttachmentClass(attachment) {
                $$$1(this.getTipElement()).addClass(CLASS_PREFIX + '-' + attachment);
            };
            _proto.getTipElement = function getTipElement() {
                this.tip = this.tip || $$$1(this.config.template)[0];
                return this.tip;
            };
            _proto.setContent = function setContent() {
                var $tip = $$$1(this.getTipElement());
                this.setElementContent($tip.find(Selector.TITLE), this.getTitle());
                var content = this._getContent();
                if (typeof content === 'function') {
                    content = content.call(this.element);
                }
                this.setElementContent($tip.find(Selector.CONTENT), content);
                $tip.removeClass(ClassName.FADE + ' ' + ClassName.SHOW);
            };
            _proto._getContent = function _getContent() {
                return this.element.getAttribute('data-content') || this.config.content;
            };
            _proto._cleanTipClass = function _cleanTipClass() {
                var $tip = $$$1(this.getTipElement());
                var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);
                if (tabClass !== null && tabClass.length > 0) {
                    $tip.removeClass(tabClass.join(''));
                }
            };
            Popover._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === 'object' ? config : null;
                    if (!data && /destroy|hide/.test(config)) {
                        return;
                    }
                    if (!data) {
                        data = new Popover(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Popover, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                },
                {
                    key: 'NAME',
                    get: function get() {
                        return NAME;
                    }
                },
                {
                    key: 'DATA_KEY',
                    get: function get() {
                        return DATA_KEY;
                    }
                },
                {
                    key: 'Event',
                    get: function get() {
                        return Event;
                    }
                },
                {
                    key: 'EVENT_KEY',
                    get: function get() {
                        return EVENT_KEY;
                    }
                },
                {
                    key: 'DefaultType',
                    get: function get() {
                        return DefaultType;
                    }
                }
            ]);
            return Popover;
        }(Tooltip);
        $$$1.fn[NAME] = Popover._jQueryInterface;
        $$$1.fn[NAME].Constructor = Popover;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Popover._jQueryInterface;
        };
        return Popover;
    }($);
    var ScrollSpy = function ($$$1) {
        var NAME = 'scrollspy';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.scrollspy';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Default = {
            offset: 10,
            method: 'auto',
            target: ''
        };
        var DefaultType = {
            offset: 'number',
            method: 'string',
            target: '(string|element)'
        };
        var Event = {
            ACTIVATE: 'activate' + EVENT_KEY,
            SCROLL: 'scroll' + EVENT_KEY,
            LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_ITEM: 'dropdown-item',
            DROPDOWN_MENU: 'dropdown-menu',
            ACTIVE: 'active'
        };
        var Selector = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: '.active',
            NAV_LIST_GROUP: '.nav, .list-group',
            NAV_LINKS: '.nav-link',
            NAV_ITEMS: '.nav-item',
            LIST_ITEMS: '.list-group-item',
            DROPDOWN: '.dropdown',
            DROPDOWN_ITEMS: '.dropdown-item',
            DROPDOWN_TOGGLE: '.dropdown-toggle'
        };
        var OffsetMethod = {
            OFFSET: 'offset',
            POSITION: 'position'
        };
        var ScrollSpy = function () {
            function ScrollSpy(element, config) {
                var _this = this;
                this._element = element;
                this._scrollElement = element.tagName === 'BODY' ? window : element;
                this._config = this._getConfig(config);
                this._selector = this._config.target + ' ' + Selector.NAV_LINKS + ',' + (this._config.target + ' ' + Selector.LIST_ITEMS + ',') + (this._config.target + ' ' + Selector.DROPDOWN_ITEMS);
                this._offsets = [];
                this._targets = [];
                this._activeTarget = null;
                this._scrollHeight = 0;
                $$$1(this._scrollElement).on(Event.SCROLL, function (event) {
                    return _this._process(event);
                });
                this.refresh();
                this._process();
            }
            var _proto = ScrollSpy.prototype;
            _proto.refresh = function refresh() {
                var _this2 = this;
                var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
                var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
                var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
                this._offsets = [];
                this._targets = [];
                this._scrollHeight = this._getScrollHeight();
                var targets = [].slice.call(document.querySelectorAll(this._selector));
                targets.map(function (element) {
                    var target;
                    var targetSelector = Util.getSelectorFromElement(element);
                    if (targetSelector) {
                        target = document.querySelector(targetSelector);
                    }
                    if (target) {
                        var targetBCR = target.getBoundingClientRect();
                        if (targetBCR.width || targetBCR.height) {
                            return [
                                $$$1(target)[offsetMethod]().top + offsetBase,
                                targetSelector
                            ];
                        }
                    }
                    return null;
                }).filter(function (item) {
                    return item;
                }).sort(function (a, b) {
                    return a[0] - b[0];
                }).forEach(function (item) {
                    _this2._offsets.push(item[0]);
                    _this2._targets.push(item[1]);
                });
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                $$$1(this._scrollElement).off(EVENT_KEY);
                this._element = null;
                this._scrollElement = null;
                this._config = null;
                this._selector = null;
                this._offsets = null;
                this._targets = null;
                this._activeTarget = null;
                this._scrollHeight = null;
            };
            _proto._getConfig = function _getConfig(config) {
                config = _objectSpread({}, Default, typeof config === 'object' && config ? config : {});
                if (typeof config.target !== 'string') {
                    var id = $$$1(config.target).attr('id');
                    if (!id) {
                        id = Util.getUID(NAME);
                        $$$1(config.target).attr('id', id);
                    }
                    config.target = '#' + id;
                }
                Util.typeCheckConfig(NAME, config, DefaultType);
                return config;
            };
            _proto._getScrollTop = function _getScrollTop() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
            };
            _proto._getScrollHeight = function _getScrollHeight() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
            };
            _proto._getOffsetHeight = function _getOffsetHeight() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
            };
            _proto._process = function _process() {
                var scrollTop = this._getScrollTop() + this._config.offset;
                var scrollHeight = this._getScrollHeight();
                var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();
                if (this._scrollHeight !== scrollHeight) {
                    this.refresh();
                }
                if (scrollTop >= maxScroll) {
                    var target = this._targets[this._targets.length - 1];
                    if (this._activeTarget !== target) {
                        this._activate(target);
                    }
                    return;
                }
                if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
                    this._activeTarget = null;
                    this._clear();
                    return;
                }
                var offsetLength = this._offsets.length;
                for (var i = offsetLength; i--;) {
                    var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);
                    if (isActiveTarget) {
                        this._activate(this._targets[i]);
                    }
                }
            };
            _proto._activate = function _activate(target) {
                this._activeTarget = target;
                this._clear();
                var queries = this._selector.split(',');
                queries = queries.map(function (selector) {
                    return selector + '[data-target="' + target + '"],' + (selector + '[href="' + target + '"]');
                });
                var $link = $$$1([].slice.call(document.querySelectorAll(queries.join(','))));
                if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
                    $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
                    $link.addClass(ClassName.ACTIVE);
                } else {
                    $link.addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ', ' + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE);
                    $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
                }
                $$$1(this._scrollElement).trigger(Event.ACTIVATE, { relatedTarget: target });
            };
            _proto._clear = function _clear() {
                var nodes = [].slice.call(document.querySelectorAll(this._selector));
                $$$1(nodes).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
            };
            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var data = $$$1(this).data(DATA_KEY);
                    var _config = typeof config === 'object' && config;
                    if (!data) {
                        data = new ScrollSpy(this, _config);
                        $$$1(this).data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(ScrollSpy, null, [
                {
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                },
                {
                    key: 'Default',
                    get: function get() {
                        return Default;
                    }
                }
            ]);
            return ScrollSpy;
        }();
        $$$1(window).on(Event.LOAD_DATA_API, function () {
            var scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));
            var scrollSpysLength = scrollSpys.length;
            for (var i = scrollSpysLength; i--;) {
                var $spy = $$$1(scrollSpys[i]);
                ScrollSpy._jQueryInterface.call($spy, $spy.data());
            }
        });
        $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
        $$$1.fn[NAME].Constructor = ScrollSpy;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return ScrollSpy._jQueryInterface;
        };
        return ScrollSpy;
    }($);
    var Tab = function ($$$1) {
        var NAME = 'tab';
        var VERSION = '4.1.2';
        var DATA_KEY = 'bs.tab';
        var EVENT_KEY = '.' + DATA_KEY;
        var DATA_API_KEY = '.data-api';
        var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
        var Event = {
            HIDE: 'hide' + EVENT_KEY,
            HIDDEN: 'hidden' + EVENT_KEY,
            SHOW: 'show' + EVENT_KEY,
            SHOWN: 'shown' + EVENT_KEY,
            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY
        };
        var ClassName = {
            DROPDOWN_MENU: 'dropdown-menu',
            ACTIVE: 'active',
            DISABLED: 'disabled',
            FADE: 'fade',
            SHOW: 'show'
        };
        var Selector = {
            DROPDOWN: '.dropdown',
            NAV_LIST_GROUP: '.nav, .list-group',
            ACTIVE: '.active',
            ACTIVE_UL: '> li > .active',
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            DROPDOWN_TOGGLE: '.dropdown-toggle',
            DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
        };
        var Tab = function () {
            function Tab(element) {
                this._element = element;
            }
            var _proto = Tab.prototype;
            _proto.show = function show() {
                var _this = this;
                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
                    return;
                }
                var target;
                var previous;
                var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
                var selector = Util.getSelectorFromElement(this._element);
                if (listElement) {
                    var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
                    previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
                    previous = previous[previous.length - 1];
                }
                var hideEvent = $$$1.Event(Event.HIDE, { relatedTarget: this._element });
                var showEvent = $$$1.Event(Event.SHOW, { relatedTarget: previous });
                if (previous) {
                    $$$1(previous).trigger(hideEvent);
                }
                $$$1(this._element).trigger(showEvent);
                if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
                    return;
                }
                if (selector) {
                    target = document.querySelector(selector);
                }
                this._activate(this._element, listElement);
                var complete = function complete() {
                    var hiddenEvent = $$$1.Event(Event.HIDDEN, { relatedTarget: _this._element });
                    var shownEvent = $$$1.Event(Event.SHOWN, { relatedTarget: previous });
                    $$$1(previous).trigger(hiddenEvent);
                    $$$1(_this._element).trigger(shownEvent);
                };
                if (target) {
                    this._activate(target, target.parentNode, complete);
                } else {
                    complete();
                }
            };
            _proto.dispose = function dispose() {
                $$$1.removeData(this._element, DATA_KEY);
                this._element = null;
            };
            _proto._activate = function _activate(element, container, callback) {
                var _this2 = this;
                var activeElements;
                if (container.nodeName === 'UL') {
                    activeElements = $$$1(container).find(Selector.ACTIVE_UL);
                } else {
                    activeElements = $$$1(container).children(Selector.ACTIVE);
                }
                var active = activeElements[0];
                var isTransitioning = callback && active && $$$1(active).hasClass(ClassName.FADE);
                var complete = function complete() {
                    return _this2._transitionComplete(element, active, callback);
                };
                if (active && isTransitioning) {
                    var transitionDuration = Util.getTransitionDurationFromElement(active);
                    $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
                } else {
                    complete();
                }
            };
            _proto._transitionComplete = function _transitionComplete(element, active, callback) {
                if (active) {
                    $$$1(active).removeClass(ClassName.SHOW + ' ' + ClassName.ACTIVE);
                    var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];
                    if (dropdownChild) {
                        $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
                    }
                    if (active.getAttribute('role') === 'tab') {
                        active.setAttribute('aria-selected', false);
                    }
                }
                $$$1(element).addClass(ClassName.ACTIVE);
                if (element.getAttribute('role') === 'tab') {
                    element.setAttribute('aria-selected', true);
                }
                Util.reflow(element);
                $$$1(element).addClass(ClassName.SHOW);
                if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
                    var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];
                    if (dropdownElement) {
                        var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));
                        $$$1(dropdownToggleList).addClass(ClassName.ACTIVE);
                    }
                    element.setAttribute('aria-expanded', true);
                }
                if (callback) {
                    callback();
                }
            };
            Tab._jQueryInterface = function _jQueryInterface(config) {
                return this.each(function () {
                    var $this = $$$1(this);
                    var data = $this.data(DATA_KEY);
                    if (!data) {
                        data = new Tab(this);
                        $this.data(DATA_KEY, data);
                    }
                    if (typeof config === 'string') {
                        if (typeof data[config] === 'undefined') {
                            throw new TypeError('No method named "' + config + '"');
                        }
                        data[config]();
                    }
                });
            };
            _createClass(Tab, null, [{
                    key: 'VERSION',
                    get: function get() {
                        return VERSION;
                    }
                }]);
            return Tab;
        }();
        $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
            event.preventDefault();
            Tab._jQueryInterface.call($$$1(this), 'show');
        });
        $$$1.fn[NAME] = Tab._jQueryInterface;
        $$$1.fn[NAME].Constructor = Tab;
        $$$1.fn[NAME].noConflict = function () {
            $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
            return Tab._jQueryInterface;
        };
        return Tab;
    }($);
    (function ($$$1) {
        if (typeof $$$1 === 'undefined') {
            throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
        }
        var version = $$$1.fn.jquery.split(' ')[0].split('.');
        var minMajor = 1;
        var ltMajor = 2;
        var minMinor = 9;
        var minPatch = 1;
        var maxMajor = 4;
        if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
            throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
        }
    }($));
    exports.Util = Util;
    exports.Alert = Alert;
    exports.Button = Button;
    exports.Carousel = Carousel;
    exports.Collapse = Collapse;
    exports.Dropdown = Dropdown;
    exports.Modal = Modal;
    exports.Popover = Popover;
    exports.Scrollspy = ScrollSpy;
    exports.Tab = Tab;
    exports.Tooltip = Tooltip;
    Object.defineProperty(exports, '__esModule', { value: true });
}));
/*validate.js@0.11.1#validate*/
(function (exports, module, define) {
    'use strict';
    var validate = function (attributes, constraints, options) {
        options = v.extend({}, v.options, options);
        var results = v.runValidations(attributes, constraints, options), attr, validator;
        for (attr in results) {
            for (validator in results[attr]) {
                if (v.isPromise(results[attr][validator])) {
                    throw new Error('Use validate.async if you want support for promises');
                }
            }
        }
        return validate.processValidationResults(results, options);
    };
    var v = validate;
    v.extend = function (obj) {
        [].slice.call(arguments, 1).forEach(function (source) {
            for (var attr in source) {
                obj[attr] = source[attr];
            }
        });
        return obj;
    };
    v.extend(validate, {
        version: {
            major: 0,
            minor: 11,
            patch: 1,
            metadata: null,
            toString: function () {
                var version = v.format('%{major}.%{minor}.%{patch}', v.version);
                if (!v.isEmpty(v.version.metadata)) {
                    version += '+' + v.version.metadata;
                }
                return version;
            }
        },
        Promise: typeof Promise !== 'undefined' ? Promise : null,
        EMPTY_STRING_REGEXP: /^\s*$/,
        runValidations: function (attributes, constraints, options) {
            var results = [], attr, validatorName, value, validators, validator, validatorOptions, error;
            if (v.isDomElement(attributes) || v.isJqueryElement(attributes)) {
                attributes = v.collectFormValues(attributes);
            }
            for (attr in constraints) {
                value = v.getDeepObjectValue(attributes, attr);
                validators = v.result(constraints[attr], value, attributes, attr, options, constraints);
                for (validatorName in validators) {
                    validator = v.validators[validatorName];
                    if (!validator) {
                        error = v.format('Unknown validator %{name}', { name: validatorName });
                        throw new Error(error);
                    }
                    validatorOptions = validators[validatorName];
                    validatorOptions = v.result(validatorOptions, value, attributes, attr, options, constraints);
                    if (!validatorOptions) {
                        continue;
                    }
                    results.push({
                        attribute: attr,
                        value: value,
                        validator: validatorName,
                        globalOptions: options,
                        attributes: attributes,
                        options: validatorOptions,
                        error: validator.call(validator, value, validatorOptions, attr, attributes, options)
                    });
                }
            }
            return results;
        },
        processValidationResults: function (errors, options) {
            errors = v.pruneEmptyErrors(errors, options);
            errors = v.expandMultipleErrors(errors, options);
            errors = v.convertErrorMessages(errors, options);
            var format = options.format || 'grouped';
            if (typeof v.formatters[format] === 'function') {
                errors = v.formatters[format](errors);
            } else {
                throw new Error(v.format('Unknown format %{format}', options));
            }
            return v.isEmpty(errors) ? undefined : errors;
        },
        async: function (attributes, constraints, options) {
            options = v.extend({}, v.async.options, options);
            var WrapErrors = options.wrapErrors || function (errors) {
                return errors;
            };
            if (options.cleanAttributes !== false) {
                attributes = v.cleanAttributes(attributes, constraints);
            }
            var results = v.runValidations(attributes, constraints, options);
            return new v.Promise(function (resolve, reject) {
                v.waitForResults(results).then(function () {
                    var errors = v.processValidationResults(results, options);
                    if (errors) {
                        reject(new WrapErrors(errors, options, attributes, constraints));
                    } else {
                        resolve(attributes);
                    }
                }, function (err) {
                    reject(err);
                });
            });
        },
        single: function (value, constraints, options) {
            options = v.extend({}, v.single.options, options, {
                format: 'flat',
                fullMessages: false
            });
            return v({ single: value }, { single: constraints }, options);
        },
        waitForResults: function (results) {
            return results.reduce(function (memo, result) {
                if (!v.isPromise(result.error)) {
                    return memo;
                }
                return memo.then(function () {
                    return result.error.then(function (error) {
                        result.error = error || null;
                    });
                });
            }, new v.Promise(function (r) {
                r();
            }));
        },
        result: function (value) {
            var args = [].slice.call(arguments, 1);
            if (typeof value === 'function') {
                value = value.apply(null, args);
            }
            return value;
        },
        isNumber: function (value) {
            return typeof value === 'number' && !isNaN(value);
        },
        isFunction: function (value) {
            return typeof value === 'function';
        },
        isInteger: function (value) {
            return v.isNumber(value) && value % 1 === 0;
        },
        isBoolean: function (value) {
            return typeof value === 'boolean';
        },
        isObject: function (obj) {
            return obj === Object(obj);
        },
        isDate: function (obj) {
            return obj instanceof Date;
        },
        isDefined: function (obj) {
            return obj !== null && obj !== undefined;
        },
        isPromise: function (p) {
            return !!p && v.isFunction(p.then);
        },
        isJqueryElement: function (o) {
            return o && v.isString(o.jquery);
        },
        isDomElement: function (o) {
            if (!o) {
                return false;
            }
            if (!o.querySelectorAll || !o.querySelector) {
                return false;
            }
            if (v.isObject(document) && o === document) {
                return true;
            }
            if (typeof HTMLElement === 'object') {
                return o instanceof HTMLElement;
            } else {
                return o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
            }
        },
        isEmpty: function (value) {
            var attr;
            if (!v.isDefined(value)) {
                return true;
            }
            if (v.isFunction(value)) {
                return false;
            }
            if (v.isString(value)) {
                return v.EMPTY_STRING_REGEXP.test(value);
            }
            if (v.isArray(value)) {
                return value.length === 0;
            }
            if (v.isDate(value)) {
                return false;
            }
            if (v.isObject(value)) {
                for (attr in value) {
                    return false;
                }
                return true;
            }
            return false;
        },
        format: v.extend(function (str, vals) {
            if (!v.isString(str)) {
                return str;
            }
            return str.replace(v.format.FORMAT_REGEXP, function (m0, m1, m2) {
                if (m1 === '%') {
                    return '%{' + m2 + '}';
                } else {
                    return String(vals[m2]);
                }
            });
        }, { FORMAT_REGEXP: /(%?)%\{([^\}]+)\}/g }),
        prettify: function (str) {
            if (v.isNumber(str)) {
                if (str * 100 % 1 === 0) {
                    return '' + str;
                } else {
                    return parseFloat(Math.round(str * 100) / 100).toFixed(2);
                }
            }
            if (v.isArray(str)) {
                return str.map(function (s) {
                    return v.prettify(s);
                }).join(', ');
            }
            if (v.isObject(str)) {
                return str.toString();
            }
            str = '' + str;
            return str.replace(/([^\s])\.([^\s])/g, '$1 $2').replace(/\\+/g, '').replace(/[_-]/g, ' ').replace(/([a-z])([A-Z])/g, function (m0, m1, m2) {
                return '' + m1 + ' ' + m2.toLowerCase();
            }).toLowerCase();
        },
        stringifyValue: function (value) {
            return v.prettify(value);
        },
        isString: function (value) {
            return typeof value === 'string';
        },
        isArray: function (value) {
            return {}.toString.call(value) === '[object Array]';
        },
        isHash: function (value) {
            return v.isObject(value) && !v.isArray(value) && !v.isFunction(value);
        },
        contains: function (obj, value) {
            if (!v.isDefined(obj)) {
                return false;
            }
            if (v.isArray(obj)) {
                return obj.indexOf(value) !== -1;
            }
            return value in obj;
        },
        unique: function (array) {
            if (!v.isArray(array)) {
                return array;
            }
            return array.filter(function (el, index, array) {
                return array.indexOf(el) == index;
            });
        },
        forEachKeyInKeypath: function (object, keypath, callback) {
            if (!v.isString(keypath)) {
                return undefined;
            }
            var key = '', i, escape = false;
            for (i = 0; i < keypath.length; ++i) {
                switch (keypath[i]) {
                case '.':
                    if (escape) {
                        escape = false;
                        key += '.';
                    } else {
                        object = callback(object, key, false);
                        key = '';
                    }
                    break;
                case '\\':
                    if (escape) {
                        escape = false;
                        key += '\\';
                    } else {
                        escape = true;
                    }
                    break;
                default:
                    escape = false;
                    key += keypath[i];
                    break;
                }
            }
            return callback(object, key, true);
        },
        getDeepObjectValue: function (obj, keypath) {
            if (!v.isObject(obj)) {
                return undefined;
            }
            return v.forEachKeyInKeypath(obj, keypath, function (obj, key) {
                if (v.isObject(obj)) {
                    return obj[key];
                }
            });
        },
        collectFormValues: function (form, options) {
            var values = {}, i, j, input, inputs, option, value;
            if (v.isJqueryElement(form)) {
                form = form[0];
            }
            if (!form) {
                return values;
            }
            options = options || {};
            inputs = form.querySelectorAll('input[name], textarea[name]');
            for (i = 0; i < inputs.length; ++i) {
                input = inputs.item(i);
                if (v.isDefined(input.getAttribute('data-ignored'))) {
                    continue;
                }
                value = v.sanitizeFormValue(input.value, options);
                if (input.type === 'number') {
                    value = value ? +value : null;
                } else if (input.type === 'checkbox') {
                    if (input.attributes.value) {
                        if (!input.checked) {
                            value = values[input.name] || null;
                        }
                    } else {
                        value = input.checked;
                    }
                } else if (input.type === 'radio') {
                    if (!input.checked) {
                        value = values[input.name] || null;
                    }
                }
                values[input.name] = value;
            }
            inputs = form.querySelectorAll('select[name]');
            for (i = 0; i < inputs.length; ++i) {
                input = inputs.item(i);
                if (input.multiple) {
                    value = [];
                    for (j in input.options) {
                        option = input.options[j];
                        if (option.selected) {
                            value.push(v.sanitizeFormValue(option.value, options));
                        }
                    }
                } else {
                    value = v.sanitizeFormValue(input.options[input.selectedIndex].value, options);
                }
                values[input.name] = value;
            }
            return values;
        },
        sanitizeFormValue: function (value, options) {
            if (options.trim && v.isString(value)) {
                value = value.trim();
            }
            if (options.nullify !== false && value === '') {
                return null;
            }
            return value;
        },
        capitalize: function (str) {
            if (!v.isString(str)) {
                return str;
            }
            return str[0].toUpperCase() + str.slice(1);
        },
        pruneEmptyErrors: function (errors) {
            return errors.filter(function (error) {
                return !v.isEmpty(error.error);
            });
        },
        expandMultipleErrors: function (errors) {
            var ret = [];
            errors.forEach(function (error) {
                if (v.isArray(error.error)) {
                    error.error.forEach(function (msg) {
                        ret.push(v.extend({}, error, { error: msg }));
                    });
                } else {
                    ret.push(error);
                }
            });
            return ret;
        },
        convertErrorMessages: function (errors, options) {
            options = options || {};
            var ret = [];
            errors.forEach(function (errorInfo) {
                var error = v.result(errorInfo.error, errorInfo.value, errorInfo.attribute, errorInfo.options, errorInfo.attributes, errorInfo.globalOptions);
                if (!v.isString(error)) {
                    ret.push(errorInfo);
                    return;
                }
                if (error[0] === '^') {
                    error = error.slice(1);
                } else if (options.fullMessages !== false) {
                    error = v.capitalize(v.prettify(errorInfo.attribute)) + ' ' + error;
                }
                error = error.replace(/\\\^/g, '^');
                error = v.format(error, { value: v.stringifyValue(errorInfo.value) });
                ret.push(v.extend({}, errorInfo, { error: error }));
            });
            return ret;
        },
        groupErrorsByAttribute: function (errors) {
            var ret = {};
            errors.forEach(function (error) {
                var list = ret[error.attribute];
                if (list) {
                    list.push(error);
                } else {
                    ret[error.attribute] = [error];
                }
            });
            return ret;
        },
        flattenErrorsToArray: function (errors) {
            return errors.map(function (error) {
                return error.error;
            }).filter(function (value, index, self) {
                return self.indexOf(value) === index;
            });
        },
        cleanAttributes: function (attributes, whitelist) {
            function whitelistCreator(obj, key, last) {
                if (v.isObject(obj[key])) {
                    return obj[key];
                }
                return obj[key] = last ? true : {};
            }
            function buildObjectWhitelist(whitelist) {
                var ow = {}, lastObject, attr;
                for (attr in whitelist) {
                    if (!whitelist[attr]) {
                        continue;
                    }
                    v.forEachKeyInKeypath(ow, attr, whitelistCreator);
                }
                return ow;
            }
            function cleanRecursive(attributes, whitelist) {
                if (!v.isObject(attributes)) {
                    return attributes;
                }
                var ret = v.extend({}, attributes), w, attribute;
                for (attribute in attributes) {
                    w = whitelist[attribute];
                    if (v.isObject(w)) {
                        ret[attribute] = cleanRecursive(ret[attribute], w);
                    } else if (!w) {
                        delete ret[attribute];
                    }
                }
                return ret;
            }
            if (!v.isObject(whitelist) || !v.isObject(attributes)) {
                return {};
            }
            whitelist = buildObjectWhitelist(whitelist);
            return cleanRecursive(attributes, whitelist);
        },
        exposeModule: function (validate, root, exports, module, define) {
            if (exports) {
                if (module && module.exports) {
                    exports = module.exports = validate;
                }
                exports.validate = validate;
            } else {
                root.validate = validate;
                if (validate.isFunction(define) && define.amd) {
                    define('validate.js@0.11.1#validate', [], function () {
                        return validate;
                    });
                }
            }
        },
        warn: function (msg) {
            if (typeof console !== 'undefined' && console.warn) {
                console.warn('[validate.js] ' + msg);
            }
        },
        error: function (msg) {
            if (typeof console !== 'undefined' && console.error) {
                console.error('[validate.js] ' + msg);
            }
        }
    });
    validate.validators = {
        presence: function (value, options) {
            options = v.extend({}, this.options, options);
            if (options.allowEmpty ? !v.isDefined(value) : v.isEmpty(value)) {
                return options.message || this.message || 'can\'t be blank';
            }
        },
        length: function (value, options, attribute) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var is = options.is, maximum = options.maximum, minimum = options.minimum, tokenizer = options.tokenizer || function (val) {
                    return val;
                }, err, errors = [];
            value = tokenizer(value);
            var length = value.length;
            if (!v.isNumber(length)) {
                v.error(v.format('Attribute %{attr} has a non numeric value for `length`', { attr: attribute }));
                return options.message || this.notValid || 'has an incorrect length';
            }
            if (v.isNumber(is) && length !== is) {
                err = options.wrongLength || this.wrongLength || 'is the wrong length (should be %{count} characters)';
                errors.push(v.format(err, { count: is }));
            }
            if (v.isNumber(minimum) && length < minimum) {
                err = options.tooShort || this.tooShort || 'is too short (minimum is %{count} characters)';
                errors.push(v.format(err, { count: minimum }));
            }
            if (v.isNumber(maximum) && length > maximum) {
                err = options.tooLong || this.tooLong || 'is too long (maximum is %{count} characters)';
                errors.push(v.format(err, { count: maximum }));
            }
            if (errors.length > 0) {
                return options.message || errors;
            }
        },
        numericality: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var errors = [], name, count, checks = {
                    greaterThan: function (v, c) {
                        return v > c;
                    },
                    greaterThanOrEqualTo: function (v, c) {
                        return v >= c;
                    },
                    equalTo: function (v, c) {
                        return v === c;
                    },
                    lessThan: function (v, c) {
                        return v < c;
                    },
                    lessThanOrEqualTo: function (v, c) {
                        return v <= c;
                    },
                    divisibleBy: function (v, c) {
                        return v % c === 0;
                    }
                };
            if (v.isString(value) && options.strict) {
                var pattern = '^(0|[1-9]\\d*)';
                if (!options.onlyInteger) {
                    pattern += '(\\.\\d+)?';
                }
                pattern += '$';
                if (!new RegExp(pattern).test(value)) {
                    return options.message || options.notValid || this.notValid || this.message || 'must be a valid number';
                }
            }
            if (options.noStrings !== true && v.isString(value) && !v.isEmpty(value)) {
                value = +value;
            }
            if (!v.isNumber(value)) {
                return options.message || options.notValid || this.notValid || this.message || 'is not a number';
            }
            if (options.onlyInteger && !v.isInteger(value)) {
                return options.message || options.notInteger || this.notInteger || this.message || 'must be an integer';
            }
            for (name in checks) {
                count = options[name];
                if (v.isNumber(count) && !checks[name](value, count)) {
                    var key = 'not' + v.capitalize(name);
                    var msg = options[key] || this[key] || this.message || 'must be %{type} %{count}';
                    errors.push(v.format(msg, {
                        count: count,
                        type: v.prettify(name)
                    }));
                }
            }
            if (options.odd && value % 2 !== 1) {
                errors.push(options.notOdd || this.notOdd || this.message || 'must be odd');
            }
            if (options.even && value % 2 !== 0) {
                errors.push(options.notEven || this.notEven || this.message || 'must be even');
            }
            if (errors.length) {
                return options.message || errors;
            }
        },
        datetime: v.extend(function (value, options) {
            if (!v.isFunction(this.parse) || !v.isFunction(this.format)) {
                throw new Error('Both the parse and format functions needs to be set to use the datetime/date validator');
            }
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var err, errors = [], earliest = options.earliest ? this.parse(options.earliest, options) : NaN, latest = options.latest ? this.parse(options.latest, options) : NaN;
            value = this.parse(value, options);
            if (isNaN(value) || options.dateOnly && value % 86400000 !== 0) {
                err = options.notValid || options.message || this.notValid || 'must be a valid date';
                return v.format(err, { value: arguments[0] });
            }
            if (!isNaN(earliest) && value < earliest) {
                err = options.tooEarly || options.message || this.tooEarly || 'must be no earlier than %{date}';
                err = v.format(err, {
                    value: this.format(value, options),
                    date: this.format(earliest, options)
                });
                errors.push(err);
            }
            if (!isNaN(latest) && value > latest) {
                err = options.tooLate || options.message || this.tooLate || 'must be no later than %{date}';
                err = v.format(err, {
                    date: this.format(latest, options),
                    value: this.format(value, options)
                });
                errors.push(err);
            }
            if (errors.length) {
                return v.unique(errors);
            }
        }, {
            parse: null,
            format: null
        }),
        date: function (value, options) {
            options = v.extend({}, options, { dateOnly: true });
            return v.validators.datetime.call(v.validators.datetime, value, options);
        },
        format: function (value, options) {
            if (v.isString(options) || options instanceof RegExp) {
                options = { pattern: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is invalid', pattern = options.pattern, match;
            if (!v.isDefined(value)) {
                return;
            }
            if (!v.isString(value)) {
                return message;
            }
            if (v.isString(pattern)) {
                pattern = new RegExp(options.pattern, options.flags);
            }
            match = pattern.exec(value);
            if (!match || match[0].length != value.length) {
                return message;
            }
        },
        inclusion: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isArray(options)) {
                options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (v.contains(options.within, value)) {
                return;
            }
            var message = options.message || this.message || '^%{value} is not included in the list';
            return v.format(message, { value: value });
        },
        exclusion: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isArray(options)) {
                options = { within: options };
            }
            options = v.extend({}, this.options, options);
            if (!v.contains(options.within, value)) {
                return;
            }
            var message = options.message || this.message || '^%{value} is restricted';
            return v.format(message, { value: value });
        },
        email: v.extend(function (value, options) {
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not a valid email';
            if (!v.isDefined(value)) {
                return;
            }
            if (!v.isString(value)) {
                return message;
            }
            if (!this.PATTERN.exec(value)) {
                return message;
            }
        }, { PATTERN: /^[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9\u007F-\uffff!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$/i }),
        equality: function (value, options, attribute, attributes) {
            if (!v.isDefined(value)) {
                return;
            }
            if (v.isString(options)) {
                options = { attribute: options };
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not equal to %{attribute}';
            if (v.isEmpty(options.attribute) || !v.isString(options.attribute)) {
                throw new Error('The attribute must be a non empty string');
            }
            var otherValue = v.getDeepObjectValue(attributes, options.attribute), comparator = options.comparator || function (v1, v2) {
                    return v1 === v2;
                };
            if (!comparator(value, otherValue, options, attribute, attributes)) {
                return v.format(message, { attribute: v.prettify(options.attribute) });
            }
        },
        url: function (value, options) {
            if (!v.isDefined(value)) {
                return;
            }
            options = v.extend({}, this.options, options);
            var message = options.message || this.message || 'is not a valid url', schemes = options.schemes || this.schemes || [
                    'http',
                    'https'
                ], allowLocal = options.allowLocal || this.allowLocal || false;
            if (!v.isString(value)) {
                return message;
            }
            var regex = '^' + '(?:(?:' + schemes.join('|') + ')://)' + '(?:\\S+(?::\\S*)?@)?' + '(?:';
            var tld = '(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))';
            if (allowLocal) {
                tld += '?';
            } else {
                regex += '(?!(?:10|127)(?:\\.\\d{1,3}){3})' + '(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})' + '(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})';
            }
            regex += '(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])' + '(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}' + '(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))' + '|' + '(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)' + '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*' + tld + ')' + '(?::\\d{2,5})?' + '(?:[/?#]\\S*)?' + '$';
            var PATTERN = new RegExp(regex, 'i');
            if (!PATTERN.exec(value)) {
                return message;
            }
        }
    };
    validate.formatters = {
        detailed: function (errors) {
            return errors;
        },
        flat: v.flattenErrorsToArray,
        grouped: function (errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
                errors[attr] = v.flattenErrorsToArray(errors[attr]);
            }
            return errors;
        },
        constraint: function (errors) {
            var attr;
            errors = v.groupErrorsByAttribute(errors);
            for (attr in errors) {
                errors[attr] = errors[attr].map(function (result) {
                    return result.validator;
                }).sort();
            }
            return errors;
        }
    };
    validate.exposeModule(validate, this, exports, module, define);
}.call(this, typeof exports !== 'undefined' ? exports : null, typeof module !== 'undefined' ? module : null, typeof define !== 'undefined' ? define : null));
/*tempusdominus-bootstrap-4@5.0.1#build/js/tempusdominus-bootstrap-4*/
define('tempusdominus-bootstrap-4@5.0.1#build/js/tempusdominus-bootstrap-4', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/*@preserve\r\n * Tempus Dominus Bootstrap4 v5.0.1 (https://tempusdominus.github.io/bootstrap-4/)\r\n * Copyright 2016-2018 Jonathan Peterson\r\n * Licensed under MIT (https://github.com/tempusdominus/bootstrap-3/blob/master/LICENSE)\r\n */\r\n\r\nif (typeof jQuery === \'undefined\') {\r\n  throw new Error(\'Tempus Dominus Bootstrap4\\\'s requires jQuery. jQuery must be included before Tempus Dominus Bootstrap4\\\'s JavaScript.\');\r\n}\r\n\r\n+function ($) {\r\n  var version = $.fn.jquery.split(\' \')[0].split(\'.\');\r\n  if ((version[0] < 2 && version[1] < 9) || (version[0] === 1 && version[1] === 9 && version[2] < 1) || (version[0] >= 4)) {\r\n    throw new Error(\'Tempus Dominus Bootstrap4\\\'s requires at least jQuery v3.0.0 but less than v4.0.0\');\r\n  }\r\n}(jQuery);\r\n\r\n\r\nif (typeof moment === \'undefined\') {\r\n  throw new Error(\'Tempus Dominus Bootstrap4\\\'s requires moment.js. Moment.js must be included before Tempus Dominus Bootstrap4\\\'s JavaScript.\');\r\n}\r\n\r\nvar version = moment.version.split(\'.\')\r\nif ((version[0] <= 2 && version[1] < 17) || (version[0] >= 3)) {\r\n  throw new Error(\'Tempus Dominus Bootstrap4\\\'s requires at least moment.js v2.17.0 but less than v3.0.0\');\r\n}\r\n\r\n+function () {\r\n\r\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n// ReSharper disable once InconsistentNaming\nvar DateTimePicker = function ($, moment) {\n    // ReSharper disable InconsistentNaming\n    var NAME = \'datetimepicker\',\n        DATA_KEY = \'\' + NAME,\n        EVENT_KEY = \'.\' + DATA_KEY,\n        DATA_API_KEY = \'.data-api\',\n        Selector = {\n        DATA_TOGGLE: \'[data-toggle="\' + DATA_KEY + \'"]\'\n    },\n        ClassName = {\n        INPUT: NAME + \'-input\'\n    },\n        Event = {\n        CHANGE: \'change\' + EVENT_KEY,\n        BLUR: \'blur\' + EVENT_KEY,\n        KEYUP: \'keyup\' + EVENT_KEY,\n        KEYDOWN: \'keydown\' + EVENT_KEY,\n        FOCUS: \'focus\' + EVENT_KEY,\n        CLICK_DATA_API: \'click\' + EVENT_KEY + DATA_API_KEY,\n        //emitted\n        UPDATE: \'update\' + EVENT_KEY,\n        ERROR: \'error\' + EVENT_KEY,\n        HIDE: \'hide\' + EVENT_KEY,\n        SHOW: \'show\' + EVENT_KEY\n    },\n        DatePickerModes = [{\n        CLASS_NAME: \'days\',\n        NAV_FUNCTION: \'M\',\n        NAV_STEP: 1\n    }, {\n        CLASS_NAME: \'months\',\n        NAV_FUNCTION: \'y\',\n        NAV_STEP: 1\n    }, {\n        CLASS_NAME: \'years\',\n        NAV_FUNCTION: \'y\',\n        NAV_STEP: 10\n    }, {\n        CLASS_NAME: \'decades\',\n        NAV_FUNCTION: \'y\',\n        NAV_STEP: 100\n    }],\n        KeyMap = {\n        \'up\': 38,\n        38: \'up\',\n        \'down\': 40,\n        40: \'down\',\n        \'left\': 37,\n        37: \'left\',\n        \'right\': 39,\n        39: \'right\',\n        \'tab\': 9,\n        9: \'tab\',\n        \'escape\': 27,\n        27: \'escape\',\n        \'enter\': 13,\n        13: \'enter\',\n        \'pageUp\': 33,\n        33: \'pageUp\',\n        \'pageDown\': 34,\n        34: \'pageDown\',\n        \'shift\': 16,\n        16: \'shift\',\n        \'control\': 17,\n        17: \'control\',\n        \'space\': 32,\n        32: \'space\',\n        \'t\': 84,\n        84: \'t\',\n        \'delete\': 46,\n        46: \'delete\'\n    },\n        ViewModes = [\'times\', \'days\', \'months\', \'years\', \'decades\'],\n        keyState = {},\n        keyPressHandled = {};\n\n    var MinViewModeNumber = 0,\n        Default = {\n        timeZone: \'\',\n        format: false,\n        dayViewHeaderFormat: \'MMMM YYYY\',\n        extraFormats: false,\n        stepping: 1,\n        minDate: false,\n        maxDate: false,\n        useCurrent: true,\n        collapse: true,\n        locale: moment.locale(),\n        defaultDate: false,\n        disabledDates: false,\n        enabledDates: false,\n        icons: {\n            time: \'fa fa-clock-o\',\n            date: \'fa fa-calendar\',\n            up: \'fa fa-arrow-up\',\n            down: \'fa fa-arrow-down\',\n            previous: \'fa fa-chevron-left\',\n            next: \'fa fa-chevron-right\',\n            today: \'fa fa-calendar-check-o\',\n            clear: \'fa fa-delete\',\n            close: \'fa fa-times\'\n        },\n        tooltips: {\n            today: \'Go to today\',\n            clear: \'Clear selection\',\n            close: \'Close the picker\',\n            selectMonth: \'Select Month\',\n            prevMonth: \'Previous Month\',\n            nextMonth: \'Next Month\',\n            selectYear: \'Select Year\',\n            prevYear: \'Previous Year\',\n            nextYear: \'Next Year\',\n            selectDecade: \'Select Decade\',\n            prevDecade: \'Previous Decade\',\n            nextDecade: \'Next Decade\',\n            prevCentury: \'Previous Century\',\n            nextCentury: \'Next Century\',\n            pickHour: \'Pick Hour\',\n            incrementHour: \'Increment Hour\',\n            decrementHour: \'Decrement Hour\',\n            pickMinute: \'Pick Minute\',\n            incrementMinute: \'Increment Minute\',\n            decrementMinute: \'Decrement Minute\',\n            pickSecond: \'Pick Second\',\n            incrementSecond: \'Increment Second\',\n            decrementSecond: \'Decrement Second\',\n            togglePeriod: \'Toggle Period\',\n            selectTime: \'Select Time\',\n            selectDate: \'Select Date\'\n        },\n        useStrict: false,\n        sideBySide: false,\n        daysOfWeekDisabled: false,\n        calendarWeeks: false,\n        viewMode: \'days\',\n        toolbarPlacement: \'default\',\n        buttons: {\n            showToday: false,\n            showClear: false,\n            showClose: false\n        },\n        widgetPositioning: {\n            horizontal: \'auto\',\n            vertical: \'auto\'\n        },\n        widgetParent: null,\n        ignoreReadonly: false,\n        keepOpen: false,\n        focusOnShow: true,\n        inline: false,\n        keepInvalid: false,\n        keyBinds: {\n            up: function up() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().subtract(7, \'d\'));\n                } else {\n                    this.date(d.clone().add(this.stepping(), \'m\'));\n                }\n                return true;\n            },\n            down: function down() {\n                if (!this.widget) {\n                    this.show();\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().add(7, \'d\'));\n                } else {\n                    this.date(d.clone().subtract(this.stepping(), \'m\'));\n                }\n                return true;\n            },\n            \'control up\': function controlUp() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().subtract(1, \'y\'));\n                } else {\n                    this.date(d.clone().add(1, \'h\'));\n                }\n                return true;\n            },\n            \'control down\': function controlDown() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().add(1, \'y\'));\n                } else {\n                    this.date(d.clone().subtract(1, \'h\'));\n                }\n                return true;\n            },\n            left: function left() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().subtract(1, \'d\'));\n                }\n                return true;\n            },\n            right: function right() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().add(1, \'d\'));\n                }\n                return true;\n            },\n            pageUp: function pageUp() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().subtract(1, \'M\'));\n                }\n                return true;\n            },\n            pageDown: function pageDown() {\n                if (!this.widget) {\n                    return false;\n                }\n                var d = this._dates[0] || this.getMoment();\n                if (this.widget.find(\'.datepicker\').is(\':visible\')) {\n                    this.date(d.clone().add(1, \'M\'));\n                }\n                return true;\n            },\n            enter: function enter() {\n                if (!this.widget) {\n                    return false;\n                }\n                this.hide();\n                return true;\n            },\n            escape: function escape() {\n                if (!this.widget) {\n                    return false;\n                }\n                this.hide();\n                return true;\n            },\n            \'control space\': function controlSpace() {\n                if (!this.widget) {\n                    return false;\n                }\n                if (this.widget.find(\'.timepicker\').is(\':visible\')) {\n                    this.widget.find(\'.btn[data-action="togglePeriod"]\').click();\n                }\n                return true;\n            },\n            t: function t() {\n                if (!this.widget) {\n                    return false;\n                }\n                this.date(this.getMoment());\n                return true;\n            },\n            \'delete\': function _delete() {\n                if (!this.widget) {\n                    return false;\n                }\n                this.clear();\n                return true;\n            }\n        },\n        debug: false,\n        allowInputToggle: false,\n        disabledTimeIntervals: false,\n        disabledHours: false,\n        enabledHours: false,\n        viewDate: false,\n        allowMultidate: false,\n        multidateSeparator: \',\'\n    };\n\n    // ReSharper restore InconsistentNaming\n\n    // ReSharper disable once DeclarationHides\n    // ReSharper disable once InconsistentNaming\n\n    var DateTimePicker = function () {\n        /** @namespace eData.dateOptions */\n        /** @namespace moment.tz */\n\n        function DateTimePicker(element, options) {\n            _classCallCheck(this, DateTimePicker);\n\n            this._options = this._getOptions(options);\n            this._element = element;\n            this._dates = [];\n            this._datesFormatted = [];\n            this._viewDate = null;\n            this.unset = true;\n            this.component = false;\n            this.widget = false;\n            this.use24Hours = null;\n            this.actualFormat = null;\n            this.parseFormats = null;\n            this.currentViewMode = null;\n\n            this._int();\n        }\n\n        /**\r\n         * @return {string}\r\n         */\n\n\n        //private\n\n        DateTimePicker.prototype._int = function _int() {\n            var targetInput = this._element.data(\'target-input\');\n            if (this._element.is(\'input\')) {\n                this.input = this._element;\n            } else if (targetInput !== undefined) {\n                if (targetInput === \'nearest\') {\n                    this.input = this._element.find(\'input\');\n                } else {\n                    this.input = $(targetInput);\n                }\n            }\n\n            this._dates = [];\n            this._dates[0] = this.getMoment();\n            this._viewDate = this.getMoment().clone();\n\n            $.extend(true, this._options, this._dataToOptions());\n\n            this.options(this._options);\n\n            this._initFormatting();\n\n            if (this.input !== undefined && this.input.is(\'input\') && this.input.val().trim().length !== 0) {\n                this._setValue(this._parseInputDate(this.input.val().trim()), 0);\n            } else if (this._options.defaultDate && this.input !== undefined && this.input.attr(\'placeholder\') === undefined) {\n                this._setValue(this._options.defaultDate, 0);\n            }\n            if (this._options.inline) {\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype._update = function _update() {\n            if (!this.widget) {\n                return;\n            }\n            this._fillDate();\n            this._fillTime();\n        };\n\n        DateTimePicker.prototype._setValue = function _setValue(targetMoment, index) {\n            var oldDate = this.unset ? null : this._dates[index];\n            var outpValue = \'\';\n            // case of calling setValue(null or false)\n            if (!targetMoment) {\n                if (!this._options.allowMultidate || this._dates.length === 1) {\n                    this.unset = true;\n                    this._dates = [];\n                    this._datesFormatted = [];\n                } else {\n                    outpValue = this._element.data(\'date\') + \',\';\n                    outpValue = outpValue.replace(oldDate.format(this.actualFormat) + \',\', \'\').replace(\',,\', \'\').replace(/,\\s*$/, \'\');\n                    this._dates.splice(index, 1);\n                    this._datesFormatted.splice(index, 1);\n                }\n                if (this.input !== undefined) {\n                    this.input.val(outpValue);\n                    this.input.trigger(\'input\');\n                }\n                this._element.data(\'date\', outpValue);\n                this._notifyEvent({\n                    type: DateTimePicker.Event.CHANGE,\n                    date: false,\n                    oldDate: oldDate\n                });\n                this._update();\n                return;\n            }\n\n            targetMoment = targetMoment.clone().locale(this._options.locale);\n\n            if (this._hasTimeZone()) {\n                targetMoment.tz(this._options.timeZone);\n            }\n\n            if (this._options.stepping !== 1) {\n                targetMoment.minutes(Math.round(targetMoment.minutes() / this._options.stepping) * this._options.stepping).seconds(0);\n            }\n\n            if (this._isValid(targetMoment)) {\n                this._dates[index] = targetMoment;\n                this._datesFormatted[index] = targetMoment.format(\'YYYY-MM-DD\');\n                this._viewDate = targetMoment.clone();\n                if (this._options.allowMultidate && this._dates.length > 1) {\n                    for (var i = 0; i < this._dates.length; i++) {\n                        outpValue += \'\' + this._dates[i].format(this.actualFormat) + this._options.multidateSeparator;\n                    }\n                    outpValue = outpValue.replace(/,\\s*$/, \'\');\n                } else {\n                    outpValue = this._dates[index].format(this.actualFormat);\n                }\n                if (this.input !== undefined) {\n                    this.input.val(outpValue);\n                    this.input.trigger(\'input\');\n                }\n                this._element.data(\'date\', outpValue);\n\n                this.unset = false;\n                this._update();\n                this._notifyEvent({\n                    type: DateTimePicker.Event.CHANGE,\n                    date: this._dates[index].clone(),\n                    oldDate: oldDate\n                });\n            } else {\n                if (!this._options.keepInvalid) {\n                    if (this.input !== undefined) {\n                        this.input.val(\'\' + (this.unset ? \'\' : this._dates[index].format(this.actualFormat)));\n                        this.input.trigger(\'input\');\n                    }\n                } else {\n                    this._notifyEvent({\n                        type: DateTimePicker.Event.CHANGE,\n                        date: targetMoment,\n                        oldDate: oldDate\n                    });\n                }\n                this._notifyEvent({\n                    type: DateTimePicker.Event.ERROR,\n                    date: targetMoment,\n                    oldDate: oldDate\n                });\n            }\n        };\n\n        DateTimePicker.prototype._change = function _change(e) {\n            var val = $(e.target).val().trim(),\n                parsedDate = val ? this._parseInputDate(val) : null;\n            this._setValue(parsedDate);\n            e.stopImmediatePropagation();\n            return false;\n        };\n\n        //noinspection JSMethodCanBeStatic\n\n\n        DateTimePicker.prototype._getOptions = function _getOptions(options) {\n            options = $.extend(true, {}, Default, options);\n            return options;\n        };\n\n        DateTimePicker.prototype._hasTimeZone = function _hasTimeZone() {\n            return moment.tz !== undefined && this._options.timeZone !== undefined && this._options.timeZone !== null && this._options.timeZone !== \'\';\n        };\n\n        DateTimePicker.prototype._isEnabled = function _isEnabled(granularity) {\n            if (typeof granularity !== \'string\' || granularity.length > 1) {\n                throw new TypeError(\'isEnabled expects a single character string parameter\');\n            }\n            switch (granularity) {\n                case \'y\':\n                    return this.actualFormat.indexOf(\'Y\') !== -1;\n                case \'M\':\n                    return this.actualFormat.indexOf(\'M\') !== -1;\n                case \'d\':\n                    return this.actualFormat.toLowerCase().indexOf(\'d\') !== -1;\n                case \'h\':\n                case \'H\':\n                    return this.actualFormat.toLowerCase().indexOf(\'h\') !== -1;\n                case \'m\':\n                    return this.actualFormat.indexOf(\'m\') !== -1;\n                case \'s\':\n                    return this.actualFormat.indexOf(\'s\') !== -1;\n                case \'a\':\n                case \'A\':\n                    return this.actualFormat.toLowerCase().indexOf(\'a\') !== -1;\n                default:\n                    return false;\n            }\n        };\n\n        DateTimePicker.prototype._hasTime = function _hasTime() {\n            return this._isEnabled(\'h\') || this._isEnabled(\'m\') || this._isEnabled(\'s\');\n        };\n\n        DateTimePicker.prototype._hasDate = function _hasDate() {\n            return this._isEnabled(\'y\') || this._isEnabled(\'M\') || this._isEnabled(\'d\');\n        };\n\n        DateTimePicker.prototype._dataToOptions = function _dataToOptions() {\n            var eData = this._element.data();\n            var dataOptions = {};\n\n            if (eData.dateOptions && eData.dateOptions instanceof Object) {\n                dataOptions = $.extend(true, dataOptions, eData.dateOptions);\n            }\n\n            $.each(this._options, function (key) {\n                var attributeName = \'date\' + key.charAt(0).toUpperCase() + key.slice(1); //todo data api key\n                if (eData[attributeName] !== undefined) {\n                    dataOptions[key] = eData[attributeName];\n                } else {\n                    delete dataOptions[key];\n                }\n            });\n            return dataOptions;\n        };\n\n        DateTimePicker.prototype._notifyEvent = function _notifyEvent(e) {\n            if (e.type === DateTimePicker.Event.CHANGE && e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate) {\n                return;\n            }\n            this._element.trigger(e);\n        };\n\n        DateTimePicker.prototype._viewUpdate = function _viewUpdate(e) {\n            if (e === \'y\') {\n                e = \'YYYY\';\n            }\n            this._notifyEvent({\n                type: DateTimePicker.Event.UPDATE,\n                change: e,\n                viewDate: this._viewDate.clone()\n            });\n        };\n\n        DateTimePicker.prototype._showMode = function _showMode(dir) {\n            if (!this.widget) {\n                return;\n            }\n            if (dir) {\n                this.currentViewMode = Math.max(MinViewModeNumber, Math.min(3, this.currentViewMode + dir));\n            }\n            this.widget.find(\'.datepicker > div\').hide().filter(\'.datepicker-\' + DatePickerModes[this.currentViewMode].CLASS_NAME).show();\n        };\n\n        DateTimePicker.prototype._isInDisabledDates = function _isInDisabledDates(testDate) {\n            return this._options.disabledDates[testDate.format(\'YYYY-MM-DD\')] === true;\n        };\n\n        DateTimePicker.prototype._isInEnabledDates = function _isInEnabledDates(testDate) {\n            return this._options.enabledDates[testDate.format(\'YYYY-MM-DD\')] === true;\n        };\n\n        DateTimePicker.prototype._isInDisabledHours = function _isInDisabledHours(testDate) {\n            return this._options.disabledHours[testDate.format(\'H\')] === true;\n        };\n\n        DateTimePicker.prototype._isInEnabledHours = function _isInEnabledHours(testDate) {\n            return this._options.enabledHours[testDate.format(\'H\')] === true;\n        };\n\n        DateTimePicker.prototype._isValid = function _isValid(targetMoment, granularity) {\n            if (!targetMoment.isValid()) {\n                return false;\n            }\n            if (this._options.disabledDates && granularity === \'d\' && this._isInDisabledDates(targetMoment)) {\n                return false;\n            }\n            if (this._options.enabledDates && granularity === \'d\' && !this._isInEnabledDates(targetMoment)) {\n                return false;\n            }\n            if (this._options.minDate && targetMoment.isBefore(this._options.minDate, granularity)) {\n                return false;\n            }\n            if (this._options.maxDate && targetMoment.isAfter(this._options.maxDate, granularity)) {\n                return false;\n            }\n            if (this._options.daysOfWeekDisabled && granularity === \'d\' && this._options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {\n                return false;\n            }\n            if (this._options.disabledHours && (granularity === \'h\' || granularity === \'m\' || granularity === \'s\') && this._isInDisabledHours(targetMoment)) {\n                return false;\n            }\n            if (this._options.enabledHours && (granularity === \'h\' || granularity === \'m\' || granularity === \'s\') && !this._isInEnabledHours(targetMoment)) {\n                return false;\n            }\n            if (this._options.disabledTimeIntervals && (granularity === \'h\' || granularity === \'m\' || granularity === \'s\')) {\n                var found = false;\n                $.each(this._options.disabledTimeIntervals, function () {\n                    if (targetMoment.isBetween(this[0], this[1])) {\n                        found = true;\n                        return false;\n                    }\n                });\n                if (found) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        DateTimePicker.prototype._parseInputDate = function _parseInputDate(inputDate) {\n            if (this._options.parseInputDate === undefined) {\n                if (!moment.isMoment(inputDate)) {\n                    inputDate = this.getMoment(inputDate);\n                }\n            } else {\n                inputDate = this._options.parseInputDate(inputDate);\n            }\n            //inputDate.locale(this.options.locale);\n            return inputDate;\n        };\n\n        DateTimePicker.prototype._keydown = function _keydown(e) {\n            var handler = null,\n                index = void 0,\n                index2 = void 0,\n                keyBindKeys = void 0,\n                allModifiersPressed = void 0;\n            var pressedKeys = [],\n                pressedModifiers = {},\n                currentKey = e.which,\n                pressed = \'p\';\n\n            keyState[currentKey] = pressed;\n\n            for (index in keyState) {\n                if (keyState.hasOwnProperty(index) && keyState[index] === pressed) {\n                    pressedKeys.push(index);\n                    if (parseInt(index, 10) !== currentKey) {\n                        pressedModifiers[index] = true;\n                    }\n                }\n            }\n\n            for (index in this._options.keyBinds) {\n                if (this._options.keyBinds.hasOwnProperty(index) && typeof this._options.keyBinds[index] === \'function\') {\n                    keyBindKeys = index.split(\' \');\n                    if (keyBindKeys.length === pressedKeys.length && KeyMap[currentKey] === keyBindKeys[keyBindKeys.length - 1]) {\n                        allModifiersPressed = true;\n                        for (index2 = keyBindKeys.length - 2; index2 >= 0; index2--) {\n                            if (!(KeyMap[keyBindKeys[index2]] in pressedModifiers)) {\n                                allModifiersPressed = false;\n                                break;\n                            }\n                        }\n                        if (allModifiersPressed) {\n                            handler = this._options.keyBinds[index];\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (handler) {\n                if (handler.call(this)) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                }\n            }\n        };\n\n        //noinspection JSMethodCanBeStatic,SpellCheckingInspection\n\n\n        DateTimePicker.prototype._keyup = function _keyup(e) {\n            keyState[e.which] = \'r\';\n            if (keyPressHandled[e.which]) {\n                keyPressHandled[e.which] = false;\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        };\n\n        DateTimePicker.prototype._indexGivenDates = function _indexGivenDates(givenDatesArray) {\n            // Store given enabledDates and disabledDates as keys.\n            // This way we can check their existence in O(1) time instead of looping through whole array.\n            // (for example: options.enabledDates[\'2014-02-27\'] === true)\n            var givenDatesIndexed = {},\n                self = this;\n            $.each(givenDatesArray, function () {\n                var dDate = self._parseInputDate(this);\n                if (dDate.isValid()) {\n                    givenDatesIndexed[dDate.format(\'YYYY-MM-DD\')] = true;\n                }\n            });\n            return Object.keys(givenDatesIndexed).length ? givenDatesIndexed : false;\n        };\n\n        DateTimePicker.prototype._indexGivenHours = function _indexGivenHours(givenHoursArray) {\n            // Store given enabledHours and disabledHours as keys.\n            // This way we can check their existence in O(1) time instead of looping through whole array.\n            // (for example: options.enabledHours[\'2014-02-27\'] === true)\n            var givenHoursIndexed = {};\n            $.each(givenHoursArray, function () {\n                givenHoursIndexed[this] = true;\n            });\n            return Object.keys(givenHoursIndexed).length ? givenHoursIndexed : false;\n        };\n\n        DateTimePicker.prototype._initFormatting = function _initFormatting() {\n            var format = this._options.format || \'L LT\',\n                self = this;\n\n            this.actualFormat = format.replace(/(\\[[^\\[]*])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function (formatInput) {\n                return self._dates[0].localeData().longDateFormat(formatInput) || formatInput; //todo taking the first date should be ok\n            });\n\n            this.parseFormats = this._options.extraFormats ? this._options.extraFormats.slice() : [];\n            if (this.parseFormats.indexOf(format) < 0 && this.parseFormats.indexOf(this.actualFormat) < 0) {\n                this.parseFormats.push(this.actualFormat);\n            }\n\n            this.use24Hours = this.actualFormat.toLowerCase().indexOf(\'a\') < 1 && this.actualFormat.replace(/\\[.*?]/g, \'\').indexOf(\'h\') < 1;\n\n            if (this._isEnabled(\'y\')) {\n                MinViewModeNumber = 2;\n            }\n            if (this._isEnabled(\'M\')) {\n                MinViewModeNumber = 1;\n            }\n            if (this._isEnabled(\'d\')) {\n                MinViewModeNumber = 0;\n            }\n\n            this.currentViewMode = Math.max(MinViewModeNumber, this.currentViewMode);\n\n            if (!this.unset) {\n                this._setValue(this._dates[0], 0);\n            }\n        };\n\n        DateTimePicker.prototype._getLastPickedDate = function _getLastPickedDate() {\n            return this._dates[this._getLastPickedDateIndex()];\n        };\n\n        DateTimePicker.prototype._getLastPickedDateIndex = function _getLastPickedDateIndex() {\n            return this._dates.length - 1;\n        };\n\n        //public\n\n\n        DateTimePicker.prototype.getMoment = function getMoment(d) {\n            var returnMoment = void 0;\n\n            if (d === undefined || d === null) {\n                returnMoment = moment(); //TODO should this use format? and locale?\n            } else if (this._hasTimeZone()) {\n                // There is a string to parse and a default time zone\n                // parse with the tz function which takes a default time zone if it is not in the format string\n                returnMoment = moment.tz(d, this.parseFormats, this._options.locale, this._options.useStrict, this._options.timeZone);\n            } else {\n                returnMoment = moment(d, this.parseFormats, this._options.locale, this._options.useStrict);\n            }\n\n            if (this._hasTimeZone()) {\n                returnMoment.tz(this._options.timeZone);\n            }\n\n            return returnMoment;\n        };\n\n        DateTimePicker.prototype.toggle = function toggle() {\n            return this.widget ? this.hide() : this.show();\n        };\n\n        DateTimePicker.prototype.ignoreReadonly = function ignoreReadonly(_ignoreReadonly) {\n            if (arguments.length === 0) {\n                return this._options.ignoreReadonly;\n            }\n            if (typeof _ignoreReadonly !== \'boolean\') {\n                throw new TypeError(\'ignoreReadonly () expects a boolean parameter\');\n            }\n            this._options.ignoreReadonly = _ignoreReadonly;\n        };\n\n        DateTimePicker.prototype.options = function options(newOptions) {\n            if (arguments.length === 0) {\n                return $.extend(true, {}, this._options);\n            }\n\n            if (!(newOptions instanceof Object)) {\n                throw new TypeError(\'options() this.options parameter should be an object\');\n            }\n            $.extend(true, this._options, newOptions);\n            var self = this;\n            $.each(this._options, function (key, value) {\n                if (self[key] !== undefined) {\n                    self[key](value);\n                }\n            });\n        };\n\n        DateTimePicker.prototype.date = function date(newDate, index) {\n            index = index || 0;\n            if (arguments.length === 0) {\n                if (this.unset) {\n                    return null;\n                }\n                if (this._options.allowMultidate) {\n                    return this._dates.join(this._options.multidateSeparator);\n                } else {\n                    return this._dates[index].clone();\n                }\n            }\n\n            if (newDate !== null && typeof newDate !== \'string\' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n                throw new TypeError(\'date() parameter must be one of [null, string, moment or Date]\');\n            }\n\n            this._setValue(newDate === null ? null : this._parseInputDate(newDate), index);\n        };\n\n        DateTimePicker.prototype.format = function format(newFormat) {\n            if (arguments.length === 0) {\n                return this._options.format;\n            }\n\n            if (typeof newFormat !== \'string\' && (typeof newFormat !== \'boolean\' || newFormat !== false)) {\n                throw new TypeError(\'format() expects a string or boolean:false parameter \' + newFormat);\n            }\n\n            this._options.format = newFormat;\n            if (this.actualFormat) {\n                this._initFormatting(); // reinitialize formatting\n            }\n        };\n\n        DateTimePicker.prototype.timeZone = function timeZone(newZone) {\n            if (arguments.length === 0) {\n                return this._options.timeZone;\n            }\n\n            if (typeof newZone !== \'string\') {\n                throw new TypeError(\'newZone() expects a string parameter\');\n            }\n\n            this._options.timeZone = newZone;\n        };\n\n        DateTimePicker.prototype.dayViewHeaderFormat = function dayViewHeaderFormat(newFormat) {\n            if (arguments.length === 0) {\n                return this._options.dayViewHeaderFormat;\n            }\n\n            if (typeof newFormat !== \'string\') {\n                throw new TypeError(\'dayViewHeaderFormat() expects a string parameter\');\n            }\n\n            this._options.dayViewHeaderFormat = newFormat;\n        };\n\n        DateTimePicker.prototype.extraFormats = function extraFormats(formats) {\n            if (arguments.length === 0) {\n                return this._options.extraFormats;\n            }\n\n            if (formats !== false && !(formats instanceof Array)) {\n                throw new TypeError(\'extraFormats() expects an array or false parameter\');\n            }\n\n            this._options.extraFormats = formats;\n            if (this.parseFormats) {\n                this._initFormatting(); // reinit formatting\n            }\n        };\n\n        DateTimePicker.prototype.disabledDates = function disabledDates(dates) {\n            if (arguments.length === 0) {\n                return this._options.disabledDates ? $.extend({}, this._options.disabledDates) : this._options.disabledDates;\n            }\n\n            if (!dates) {\n                this._options.disabledDates = false;\n                this._update();\n                return true;\n            }\n            if (!(dates instanceof Array)) {\n                throw new TypeError(\'disabledDates() expects an array parameter\');\n            }\n            this._options.disabledDates = this._indexGivenDates(dates);\n            this._options.enabledDates = false;\n            this._update();\n        };\n\n        DateTimePicker.prototype.enabledDates = function enabledDates(dates) {\n            if (arguments.length === 0) {\n                return this._options.enabledDates ? $.extend({}, this._options.enabledDates) : this._options.enabledDates;\n            }\n\n            if (!dates) {\n                this._options.enabledDates = false;\n                this._update();\n                return true;\n            }\n            if (!(dates instanceof Array)) {\n                throw new TypeError(\'enabledDates() expects an array parameter\');\n            }\n            this._options.enabledDates = this._indexGivenDates(dates);\n            this._options.disabledDates = false;\n            this._update();\n        };\n\n        DateTimePicker.prototype.daysOfWeekDisabled = function daysOfWeekDisabled(_daysOfWeekDisabled) {\n            if (arguments.length === 0) {\n                return this._options.daysOfWeekDisabled.splice(0);\n            }\n\n            if (typeof _daysOfWeekDisabled === \'boolean\' && !_daysOfWeekDisabled) {\n                this._options.daysOfWeekDisabled = false;\n                this._update();\n                return true;\n            }\n\n            if (!(_daysOfWeekDisabled instanceof Array)) {\n                throw new TypeError(\'daysOfWeekDisabled() expects an array parameter\');\n            }\n            this._options.daysOfWeekDisabled = _daysOfWeekDisabled.reduce(function (previousValue, currentValue) {\n                currentValue = parseInt(currentValue, 10);\n                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {\n                    return previousValue;\n                }\n                if (previousValue.indexOf(currentValue) === -1) {\n                    previousValue.push(currentValue);\n                }\n                return previousValue;\n            }, []).sort();\n            if (this._options.useCurrent && !this._options.keepInvalid) {\n                for (var i = 0; i < this._dates.length; i++) {\n                    var tries = 0;\n                    while (!this._isValid(this._dates[i], \'d\')) {\n                        this._dates[i].add(1, \'d\');\n                        if (tries === 31) {\n                            throw \'Tried 31 times to find a valid date\';\n                        }\n                        tries++;\n                    }\n                    this._setValue(this._dates[i], i);\n                }\n            }\n            this._update();\n        };\n\n        DateTimePicker.prototype.maxDate = function maxDate(_maxDate) {\n            if (arguments.length === 0) {\n                return this._options.maxDate ? this._options.maxDate.clone() : this._options.maxDate;\n            }\n\n            if (typeof _maxDate === \'boolean\' && _maxDate === false) {\n                this._options.maxDate = false;\n                this._update();\n                return true;\n            }\n\n            if (typeof _maxDate === \'string\') {\n                if (_maxDate === \'now\' || _maxDate === \'moment\') {\n                    _maxDate = this.getMoment();\n                }\n            }\n\n            var parsedDate = this._parseInputDate(_maxDate);\n\n            if (!parsedDate.isValid()) {\n                throw new TypeError(\'maxDate() Could not parse date parameter: \' + _maxDate);\n            }\n            if (this._options.minDate && parsedDate.isBefore(this._options.minDate)) {\n                throw new TypeError(\'maxDate() date parameter is before this.options.minDate: \' + parsedDate.format(this.actualFormat));\n            }\n            this._options.maxDate = parsedDate;\n            for (var i = 0; i < this._dates.length; i++) {\n                if (this._options.useCurrent && !this._options.keepInvalid && this._dates[i].isAfter(_maxDate)) {\n                    this._setValue(this._options.maxDate, i);\n                }\n            }\n            if (this._viewDate.isAfter(parsedDate)) {\n                this._viewDate = parsedDate.clone().subtract(this._options.stepping, \'m\');\n            }\n            this._update();\n        };\n\n        DateTimePicker.prototype.minDate = function minDate(_minDate) {\n            if (arguments.length === 0) {\n                return this._options.minDate ? this._options.minDate.clone() : this._options.minDate;\n            }\n\n            if (typeof _minDate === \'boolean\' && _minDate === false) {\n                this._options.minDate = false;\n                this._update();\n                return true;\n            }\n\n            if (typeof _minDate === \'string\') {\n                if (_minDate === \'now\' || _minDate === \'moment\') {\n                    _minDate = this.getMoment();\n                }\n            }\n\n            var parsedDate = this._parseInputDate(_minDate);\n\n            if (!parsedDate.isValid()) {\n                throw new TypeError(\'minDate() Could not parse date parameter: \' + _minDate);\n            }\n            if (this._options.maxDate && parsedDate.isAfter(this._options.maxDate)) {\n                throw new TypeError(\'minDate() date parameter is after this.options.maxDate: \' + parsedDate.format(this.actualFormat));\n            }\n            this._options.minDate = parsedDate;\n            for (var i = 0; i < this._dates.length; i++) {\n                if (this._options.useCurrent && !this._options.keepInvalid && this._dates[i].isBefore(_minDate)) {\n                    this._setValue(this._options.minDate, i);\n                }\n            }\n            if (this._viewDate.isBefore(parsedDate)) {\n                this._viewDate = parsedDate.clone().add(this._options.stepping, \'m\');\n            }\n            this._update();\n        };\n\n        DateTimePicker.prototype.defaultDate = function defaultDate(_defaultDate) {\n            if (arguments.length === 0) {\n                return this._options.defaultDate ? this._options.defaultDate.clone() : this._options.defaultDate;\n            }\n            if (!_defaultDate) {\n                this._options.defaultDate = false;\n                return true;\n            }\n\n            if (typeof _defaultDate === \'string\') {\n                if (_defaultDate === \'now\' || _defaultDate === \'moment\') {\n                    _defaultDate = this.getMoment();\n                } else {\n                    _defaultDate = this.getMoment(_defaultDate);\n                }\n            }\n\n            var parsedDate = this._parseInputDate(_defaultDate);\n            if (!parsedDate.isValid()) {\n                throw new TypeError(\'defaultDate() Could not parse date parameter: \' + _defaultDate);\n            }\n            if (!this._isValid(parsedDate)) {\n                throw new TypeError(\'defaultDate() date passed is invalid according to component setup validations\');\n            }\n\n            this._options.defaultDate = parsedDate;\n\n            if (this._options.defaultDate && this._options.inline || this.input !== undefined && this.input.val().trim() === \'\') {\n                this._setValue(this._options.defaultDate, 0);\n            }\n        };\n\n        DateTimePicker.prototype.locale = function locale(_locale) {\n            if (arguments.length === 0) {\n                return this._options.locale;\n            }\n\n            if (!moment.localeData(_locale)) {\n                throw new TypeError(\'locale() locale \' + _locale + \' is not loaded from moment locales!\');\n            }\n\n            this._options.locale = _locale;\n\n            for (var i = 0; i < this._dates.length; i++) {\n                this._dates[i].locale(this._options.locale);\n            }\n            this._viewDate.locale(this._options.locale);\n\n            if (this.actualFormat) {\n                this._initFormatting(); // reinitialize formatting\n            }\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.stepping = function stepping(_stepping) {\n            if (arguments.length === 0) {\n                return this._options.stepping;\n            }\n\n            _stepping = parseInt(_stepping, 10);\n            if (isNaN(_stepping) || _stepping < 1) {\n                _stepping = 1;\n            }\n            this._options.stepping = _stepping;\n        };\n\n        DateTimePicker.prototype.useCurrent = function useCurrent(_useCurrent) {\n            var useCurrentOptions = [\'year\', \'month\', \'day\', \'hour\', \'minute\'];\n            if (arguments.length === 0) {\n                return this._options.useCurrent;\n            }\n\n            if (typeof _useCurrent !== \'boolean\' && typeof _useCurrent !== \'string\') {\n                throw new TypeError(\'useCurrent() expects a boolean or string parameter\');\n            }\n            if (typeof _useCurrent === \'string\' && useCurrentOptions.indexOf(_useCurrent.toLowerCase()) === -1) {\n                throw new TypeError(\'useCurrent() expects a string parameter of \' + useCurrentOptions.join(\', \'));\n            }\n            this._options.useCurrent = _useCurrent;\n        };\n\n        DateTimePicker.prototype.collapse = function collapse(_collapse) {\n            if (arguments.length === 0) {\n                return this._options.collapse;\n            }\n\n            if (typeof _collapse !== \'boolean\') {\n                throw new TypeError(\'collapse() expects a boolean parameter\');\n            }\n            if (this._options.collapse === _collapse) {\n                return true;\n            }\n            this._options.collapse = _collapse;\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.icons = function icons(_icons) {\n            if (arguments.length === 0) {\n                return $.extend({}, this._options.icons);\n            }\n\n            if (!(_icons instanceof Object)) {\n                throw new TypeError(\'icons() expects parameter to be an Object\');\n            }\n\n            $.extend(this._options.icons, _icons);\n\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.tooltips = function tooltips(_tooltips) {\n            if (arguments.length === 0) {\n                return $.extend({}, this._options.tooltips);\n            }\n\n            if (!(_tooltips instanceof Object)) {\n                throw new TypeError(\'tooltips() expects parameter to be an Object\');\n            }\n            $.extend(this._options.tooltips, _tooltips);\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.useStrict = function useStrict(_useStrict) {\n            if (arguments.length === 0) {\n                return this._options.useStrict;\n            }\n\n            if (typeof _useStrict !== \'boolean\') {\n                throw new TypeError(\'useStrict() expects a boolean parameter\');\n            }\n            this._options.useStrict = _useStrict;\n        };\n\n        DateTimePicker.prototype.sideBySide = function sideBySide(_sideBySide) {\n            if (arguments.length === 0) {\n                return this._options.sideBySide;\n            }\n\n            if (typeof _sideBySide !== \'boolean\') {\n                throw new TypeError(\'sideBySide() expects a boolean parameter\');\n            }\n            this._options.sideBySide = _sideBySide;\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.viewMode = function viewMode(_viewMode) {\n            if (arguments.length === 0) {\n                return this._options.viewMode;\n            }\n\n            if (typeof _viewMode !== \'string\') {\n                throw new TypeError(\'viewMode() expects a string parameter\');\n            }\n\n            if (DateTimePicker.ViewModes.indexOf(_viewMode) === -1) {\n                throw new TypeError(\'viewMode() parameter must be one of (\' + DateTimePicker.ViewModes.join(\', \') + \') value\');\n            }\n\n            this._options.viewMode = _viewMode;\n            this.currentViewMode = Math.max(DateTimePicker.ViewModes.indexOf(_viewMode) - 1, DateTimePicker.MinViewModeNumber);\n\n            this._showMode();\n        };\n\n        DateTimePicker.prototype.calendarWeeks = function calendarWeeks(_calendarWeeks) {\n            if (arguments.length === 0) {\n                return this._options.calendarWeeks;\n            }\n\n            if (typeof _calendarWeeks !== \'boolean\') {\n                throw new TypeError(\'calendarWeeks() expects parameter to be a boolean value\');\n            }\n\n            this._options.calendarWeeks = _calendarWeeks;\n            this._update();\n        };\n\n        DateTimePicker.prototype.buttons = function buttons(_buttons) {\n            if (arguments.length === 0) {\n                return $.extend({}, this._options.buttons);\n            }\n\n            if (!(_buttons instanceof Object)) {\n                throw new TypeError(\'buttons() expects parameter to be an Object\');\n            }\n\n            $.extend(this._options.buttons, _buttons);\n\n            if (typeof this._options.buttons.showToday !== \'boolean\') {\n                throw new TypeError(\'buttons.showToday expects a boolean parameter\');\n            }\n            if (typeof this._options.buttons.showClear !== \'boolean\') {\n                throw new TypeError(\'buttons.showClear expects a boolean parameter\');\n            }\n            if (typeof this._options.buttons.showClose !== \'boolean\') {\n                throw new TypeError(\'buttons.showClose expects a boolean parameter\');\n            }\n\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        DateTimePicker.prototype.keepOpen = function keepOpen(_keepOpen) {\n            if (arguments.length === 0) {\n                return this._options.keepOpen;\n            }\n\n            if (typeof _keepOpen !== \'boolean\') {\n                throw new TypeError(\'keepOpen() expects a boolean parameter\');\n            }\n\n            this._options.keepOpen = _keepOpen;\n        };\n\n        DateTimePicker.prototype.focusOnShow = function focusOnShow(_focusOnShow) {\n            if (arguments.length === 0) {\n                return this._options.focusOnShow;\n            }\n\n            if (typeof _focusOnShow !== \'boolean\') {\n                throw new TypeError(\'focusOnShow() expects a boolean parameter\');\n            }\n\n            this._options.focusOnShow = _focusOnShow;\n        };\n\n        DateTimePicker.prototype.inline = function inline(_inline) {\n            if (arguments.length === 0) {\n                return this._options.inline;\n            }\n\n            if (typeof _inline !== \'boolean\') {\n                throw new TypeError(\'inline() expects a boolean parameter\');\n            }\n\n            this._options.inline = _inline;\n        };\n\n        DateTimePicker.prototype.clear = function clear() {\n            this._setValue(null); //todo\n        };\n\n        DateTimePicker.prototype.keyBinds = function keyBinds(_keyBinds) {\n            if (arguments.length === 0) {\n                return this._options.keyBinds;\n            }\n\n            this._options.keyBinds = _keyBinds;\n        };\n\n        DateTimePicker.prototype.debug = function debug(_debug) {\n            if (typeof _debug !== \'boolean\') {\n                throw new TypeError(\'debug() expects a boolean parameter\');\n            }\n\n            this._options.debug = _debug;\n        };\n\n        DateTimePicker.prototype.allowInputToggle = function allowInputToggle(_allowInputToggle) {\n            if (arguments.length === 0) {\n                return this._options.allowInputToggle;\n            }\n\n            if (typeof _allowInputToggle !== \'boolean\') {\n                throw new TypeError(\'allowInputToggle() expects a boolean parameter\');\n            }\n\n            this._options.allowInputToggle = _allowInputToggle;\n        };\n\n        DateTimePicker.prototype.keepInvalid = function keepInvalid(_keepInvalid) {\n            if (arguments.length === 0) {\n                return this._options.keepInvalid;\n            }\n\n            if (typeof _keepInvalid !== \'boolean\') {\n                throw new TypeError(\'keepInvalid() expects a boolean parameter\');\n            }\n            this._options.keepInvalid = _keepInvalid;\n        };\n\n        DateTimePicker.prototype.datepickerInput = function datepickerInput(_datepickerInput) {\n            if (arguments.length === 0) {\n                return this._options.datepickerInput;\n            }\n\n            if (typeof _datepickerInput !== \'string\') {\n                throw new TypeError(\'datepickerInput() expects a string parameter\');\n            }\n\n            this._options.datepickerInput = _datepickerInput;\n        };\n\n        DateTimePicker.prototype.parseInputDate = function parseInputDate(_parseInputDate2) {\n            if (arguments.length === 0) {\n                return this._options.parseInputDate;\n            }\n\n            if (typeof _parseInputDate2 !== \'function\') {\n                throw new TypeError(\'parseInputDate() should be as function\');\n            }\n\n            this._options.parseInputDate = _parseInputDate2;\n        };\n\n        DateTimePicker.prototype.disabledTimeIntervals = function disabledTimeIntervals(_disabledTimeIntervals) {\n            if (arguments.length === 0) {\n                return this._options.disabledTimeIntervals ? $.extend({}, this._options.disabledTimeIntervals) : this._options.disabledTimeIntervals;\n            }\n\n            if (!_disabledTimeIntervals) {\n                this._options.disabledTimeIntervals = false;\n                this._update();\n                return true;\n            }\n            if (!(_disabledTimeIntervals instanceof Array)) {\n                throw new TypeError(\'disabledTimeIntervals() expects an array parameter\');\n            }\n            this._options.disabledTimeIntervals = _disabledTimeIntervals;\n            this._update();\n        };\n\n        DateTimePicker.prototype.disabledHours = function disabledHours(hours) {\n            if (arguments.length === 0) {\n                return this._options.disabledHours ? $.extend({}, this._options.disabledHours) : this._options.disabledHours;\n            }\n\n            if (!hours) {\n                this._options.disabledHours = false;\n                this._update();\n                return true;\n            }\n            if (!(hours instanceof Array)) {\n                throw new TypeError(\'disabledHours() expects an array parameter\');\n            }\n            this._options.disabledHours = this._indexGivenHours(hours);\n            this._options.enabledHours = false;\n            if (this._options.useCurrent && !this._options.keepInvalid) {\n                for (var i = 0; i < this._dates.length; i++) {\n                    var tries = 0;\n                    while (!this._isValid(this._dates[i], \'h\')) {\n                        this._dates[i].add(1, \'h\');\n                        if (tries === 24) {\n                            throw \'Tried 24 times to find a valid date\';\n                        }\n                        tries++;\n                    }\n                    this._setValue(this._dates[i], i);\n                }\n            }\n            this._update();\n        };\n\n        DateTimePicker.prototype.enabledHours = function enabledHours(hours) {\n            if (arguments.length === 0) {\n                return this._options.enabledHours ? $.extend({}, this._options.enabledHours) : this._options.enabledHours;\n            }\n\n            if (!hours) {\n                this._options.enabledHours = false;\n                this._update();\n                return true;\n            }\n            if (!(hours instanceof Array)) {\n                throw new TypeError(\'enabledHours() expects an array parameter\');\n            }\n            this._options.enabledHours = this._indexGivenHours(hours);\n            this._options.disabledHours = false;\n            if (this._options.useCurrent && !this._options.keepInvalid) {\n                for (var i = 0; i < this._dates.length; i++) {\n                    var tries = 0;\n                    while (!this._isValid(this._dates[i], \'h\')) {\n                        this._dates[i].add(1, \'h\');\n                        if (tries === 24) {\n                            throw \'Tried 24 times to find a valid date\';\n                        }\n                        tries++;\n                    }\n                    this._setValue(this._dates[i], i);\n                }\n            }\n            this._update();\n        };\n\n        DateTimePicker.prototype.viewDate = function viewDate(newDate) {\n            if (arguments.length === 0) {\n                return this._viewDate.clone();\n            }\n\n            if (!newDate) {\n                this._viewDate = (this._dates[0] || this.getMoment()).clone();\n                return true;\n            }\n\n            if (typeof newDate !== \'string\' && !moment.isMoment(newDate) && !(newDate instanceof Date)) {\n                throw new TypeError(\'viewDate() parameter must be one of [string, moment or Date]\');\n            }\n\n            this._viewDate = this._parseInputDate(newDate);\n            this._viewUpdate();\n        };\n\n        DateTimePicker.prototype.allowMultidate = function allowMultidate(_allowMultidate) {\n            if (typeof _allowMultidate !== \'boolean\') {\n                throw new TypeError(\'allowMultidate() expects a boolean parameter\');\n            }\n\n            this._options.allowMultidate = _allowMultidate;\n        };\n\n        DateTimePicker.prototype.multidateSeparator = function multidateSeparator(_multidateSeparator) {\n            if (arguments.length === 0) {\n                return this._options.multidateSeparator;\n            }\n\n            if (typeof _multidateSeparator !== \'string\' || _multidateSeparator.length > 1) {\n                throw new TypeError(\'multidateSeparator expects a single character string parameter\');\n            }\n\n            this._options.multidateSeparator = _multidateSeparator;\n        };\n\n        _createClass(DateTimePicker, null, [{\n            key: \'NAME\',\n            get: function get() {\n                return NAME;\n            }\n\n            /**\r\n             * @return {string}\r\n             */\n\n        }, {\n            key: \'DATA_KEY\',\n            get: function get() {\n                return DATA_KEY;\n            }\n\n            /**\r\n             * @return {string}\r\n             */\n\n        }, {\n            key: \'EVENT_KEY\',\n            get: function get() {\n                return EVENT_KEY;\n            }\n\n            /**\r\n             * @return {string}\r\n             */\n\n        }, {\n            key: \'DATA_API_KEY\',\n            get: function get() {\n                return DATA_API_KEY;\n            }\n        }, {\n            key: \'DatePickerModes\',\n            get: function get() {\n                return DatePickerModes;\n            }\n        }, {\n            key: \'ViewModes\',\n            get: function get() {\n                return ViewModes;\n            }\n\n            /**\r\n             * @return {number}\r\n             */\n\n        }, {\n            key: \'MinViewModeNumber\',\n            get: function get() {\n                return MinViewModeNumber;\n            }\n        }, {\n            key: \'Event\',\n            get: function get() {\n                return Event;\n            }\n        }, {\n            key: \'Selector\',\n            get: function get() {\n                return Selector;\n            }\n        }, {\n            key: \'Default\',\n            get: function get() {\n                return Default;\n            },\n            set: function set(value) {\n                Default = value;\n            }\n        }, {\n            key: \'ClassName\',\n            get: function get() {\n                return ClassName;\n            }\n        }]);\n\n        return DateTimePicker;\n    }();\n\n    return DateTimePicker;\n}(jQuery, moment);\n\n//noinspection JSUnusedGlobalSymbols\n/* global DateTimePicker */\nvar TempusDominusBootstrap4 = function ($) {\n    // eslint-disable-line no-unused-vars\n    // ReSharper disable once InconsistentNaming\n    var JQUERY_NO_CONFLICT = $.fn[DateTimePicker.NAME],\n        verticalModes = [\'top\', \'bottom\', \'auto\'],\n        horizontalModes = [\'left\', \'right\', \'auto\'],\n        toolbarPlacements = [\'default\', \'top\', \'bottom\'],\n        getSelectorFromElement = function getSelectorFromElement($element) {\n        var selector = $element.data(\'target\'),\n            $selector = void 0;\n\n        if (!selector) {\n            selector = $element.attr(\'href\') || \'\';\n            selector = /^#[a-z]/i.test(selector) ? selector : null;\n        }\n        $selector = $(selector);\n        if ($selector.length === 0) {\n            return $selector;\n        }\n\n        if (!$selector.data(DateTimePicker.DATA_KEY)) {\n            $.extend({}, $selector.data(), $(this).data());\n        }\n\n        return $selector;\n    };\n\n    // ReSharper disable once InconsistentNaming\n\n    var TempusDominusBootstrap4 = function (_DateTimePicker) {\n        _inherits(TempusDominusBootstrap4, _DateTimePicker);\n\n        function TempusDominusBootstrap4(element, options) {\n            _classCallCheck(this, TempusDominusBootstrap4);\n\n            var _this = _possibleConstructorReturn(this, _DateTimePicker.call(this, element, options));\n\n            _this._init();\n            return _this;\n        }\n\n        TempusDominusBootstrap4.prototype._init = function _init() {\n            if (this._element.hasClass(\'input-group\')) {\n                var datepickerButton = this._element.find(\'.datepickerbutton\');\n                if (datepickerButton.length === 0) {\n                    this.component = this._element.find(\'[data-toggle="datetimepicker"]\');\n                } else {\n                    this.component = datepickerButton;\n                }\n            }\n        };\n\n        TempusDominusBootstrap4.prototype._getDatePickerTemplate = function _getDatePickerTemplate() {\n            var headTemplate = $(\'<thead>\').append($(\'<tr>\').append($(\'<th>\').addClass(\'prev\').attr(\'data-action\', \'previous\').append($(\'<span>\').addClass(this._options.icons.previous))).append($(\'<th>\').addClass(\'picker-switch\').attr(\'data-action\', \'pickerSwitch\').attr(\'colspan\', \'\' + (this._options.calendarWeeks ? \'6\' : \'5\'))).append($(\'<th>\').addClass(\'next\').attr(\'data-action\', \'next\').append($(\'<span>\').addClass(this._options.icons.next)))),\n                contTemplate = $(\'<tbody>\').append($(\'<tr>\').append($(\'<td>\').attr(\'colspan\', \'\' + (this._options.calendarWeeks ? \'8\' : \'7\'))));\n\n            return [$(\'<div>\').addClass(\'datepicker-days\').append($(\'<table>\').addClass(\'table table-sm\').append(headTemplate).append($(\'<tbody>\'))), $(\'<div>\').addClass(\'datepicker-months\').append($(\'<table>\').addClass(\'table-condensed\').append(headTemplate.clone()).append(contTemplate.clone())), $(\'<div>\').addClass(\'datepicker-years\').append($(\'<table>\').addClass(\'table-condensed\').append(headTemplate.clone()).append(contTemplate.clone())), $(\'<div>\').addClass(\'datepicker-decades\').append($(\'<table>\').addClass(\'table-condensed\').append(headTemplate.clone()).append(contTemplate.clone()))];\n        };\n\n        TempusDominusBootstrap4.prototype._getTimePickerMainTemplate = function _getTimePickerMainTemplate() {\n            var topRow = $(\'<tr>\'),\n                middleRow = $(\'<tr>\'),\n                bottomRow = $(\'<tr>\');\n\n            if (this._isEnabled(\'h\')) {\n                topRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.incrementHour\n                }).addClass(\'btn\').attr(\'data-action\', \'incrementHours\').append($(\'<span>\').addClass(this._options.icons.up))));\n                middleRow.append($(\'<td>\').append($(\'<span>\').addClass(\'timepicker-hour\').attr({\n                    \'data-time-component\': \'hours\',\n                    \'title\': this._options.tooltips.pickHour\n                }).attr(\'data-action\', \'showHours\')));\n                bottomRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.decrementHour\n                }).addClass(\'btn\').attr(\'data-action\', \'decrementHours\').append($(\'<span>\').addClass(this._options.icons.down))));\n            }\n            if (this._isEnabled(\'m\')) {\n                if (this._isEnabled(\'h\')) {\n                    topRow.append($(\'<td>\').addClass(\'separator\'));\n                    middleRow.append($(\'<td>\').addClass(\'separator\').html(\':\'));\n                    bottomRow.append($(\'<td>\').addClass(\'separator\'));\n                }\n                topRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.incrementMinute\n                }).addClass(\'btn\').attr(\'data-action\', \'incrementMinutes\').append($(\'<span>\').addClass(this._options.icons.up))));\n                middleRow.append($(\'<td>\').append($(\'<span>\').addClass(\'timepicker-minute\').attr({\n                    \'data-time-component\': \'minutes\',\n                    \'title\': this._options.tooltips.pickMinute\n                }).attr(\'data-action\', \'showMinutes\')));\n                bottomRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.decrementMinute\n                }).addClass(\'btn\').attr(\'data-action\', \'decrementMinutes\').append($(\'<span>\').addClass(this._options.icons.down))));\n            }\n            if (this._isEnabled(\'s\')) {\n                if (this._isEnabled(\'m\')) {\n                    topRow.append($(\'<td>\').addClass(\'separator\'));\n                    middleRow.append($(\'<td>\').addClass(\'separator\').html(\':\'));\n                    bottomRow.append($(\'<td>\').addClass(\'separator\'));\n                }\n                topRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.incrementSecond\n                }).addClass(\'btn\').attr(\'data-action\', \'incrementSeconds\').append($(\'<span>\').addClass(this._options.icons.up))));\n                middleRow.append($(\'<td>\').append($(\'<span>\').addClass(\'timepicker-second\').attr({\n                    \'data-time-component\': \'seconds\',\n                    \'title\': this._options.tooltips.pickSecond\n                }).attr(\'data-action\', \'showSeconds\')));\n                bottomRow.append($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.decrementSecond\n                }).addClass(\'btn\').attr(\'data-action\', \'decrementSeconds\').append($(\'<span>\').addClass(this._options.icons.down))));\n            }\n\n            if (!this.use24Hours) {\n                topRow.append($(\'<td>\').addClass(\'separator\'));\n                middleRow.append($(\'<td>\').append($(\'<button>\').addClass(\'btn btn-primary\').attr({\n                    \'data-action\': \'togglePeriod\',\n                    tabindex: \'-1\',\n                    \'title\': this._options.tooltips.togglePeriod\n                })));\n                bottomRow.append($(\'<td>\').addClass(\'separator\'));\n            }\n\n            return $(\'<div>\').addClass(\'timepicker-picker\').append($(\'<table>\').addClass(\'table-condensed\').append([topRow, middleRow, bottomRow]));\n        };\n\n        TempusDominusBootstrap4.prototype._getTimePickerTemplate = function _getTimePickerTemplate() {\n            var hoursView = $(\'<div>\').addClass(\'timepicker-hours\').append($(\'<table>\').addClass(\'table-condensed\')),\n                minutesView = $(\'<div>\').addClass(\'timepicker-minutes\').append($(\'<table>\').addClass(\'table-condensed\')),\n                secondsView = $(\'<div>\').addClass(\'timepicker-seconds\').append($(\'<table>\').addClass(\'table-condensed\')),\n                ret = [this._getTimePickerMainTemplate()];\n\n            if (this._isEnabled(\'h\')) {\n                ret.push(hoursView);\n            }\n            if (this._isEnabled(\'m\')) {\n                ret.push(minutesView);\n            }\n            if (this._isEnabled(\'s\')) {\n                ret.push(secondsView);\n            }\n\n            return ret;\n        };\n\n        TempusDominusBootstrap4.prototype._getToolbar = function _getToolbar() {\n            var row = [];\n            if (this._options.buttons.showToday) {\n                row.push($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'data-action\': \'today\',\n                    \'title\': this._options.tooltips.today\n                }).append($(\'<span>\').addClass(this._options.icons.today))));\n            }\n            if (!this._options.sideBySide && this._hasDate() && this._hasTime()) {\n                var title = void 0,\n                    icon = void 0;\n                if (this._options.viewMode === \'times\') {\n                    title = this._options.tooltips.selectDate;\n                    icon = this._options.icons.date;\n                } else {\n                    title = this._options.tooltips.selectTime;\n                    icon = this._options.icons.time;\n                }\n                row.push($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'data-action\': \'togglePicker\',\n                    \'title\': title\n                }).append($(\'<span>\').addClass(icon))));\n            }\n            if (this._options.buttons.showClear) {\n                row.push($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'data-action\': \'clear\',\n                    \'title\': this._options.tooltips.clear\n                }).append($(\'<span>\').addClass(this._options.icons.clear))));\n            }\n            if (this._options.buttons.showClose) {\n                row.push($(\'<td>\').append($(\'<a>\').attr({\n                    href: \'#\',\n                    tabindex: \'-1\',\n                    \'data-action\': \'close\',\n                    \'title\': this._options.tooltips.close\n                }).append($(\'<span>\').addClass(this._options.icons.close))));\n            }\n            return row.length === 0 ? \'\' : $(\'<table>\').addClass(\'table-condensed\').append($(\'<tbody>\').append($(\'<tr>\').append(row)));\n        };\n\n        TempusDominusBootstrap4.prototype._getTemplate = function _getTemplate() {\n            var template = $(\'<div>\').addClass(\'bootstrap-datetimepicker-widget dropdown-menu\'),\n                dateView = $(\'<div>\').addClass(\'datepicker\').append(this._getDatePickerTemplate()),\n                timeView = $(\'<div>\').addClass(\'timepicker\').append(this._getTimePickerTemplate()),\n                content = $(\'<ul>\').addClass(\'list-unstyled\'),\n                toolbar = $(\'<li>\').addClass(\'picker-switch\' + (this._options.collapse ? \' accordion-toggle\' : \'\')).append(this._getToolbar());\n\n            if (this._options.inline) {\n                template.removeClass(\'dropdown-menu\');\n            }\n\n            if (this.use24Hours) {\n                template.addClass(\'usetwentyfour\');\n            }\n            if (this._isEnabled(\'s\') && !this.use24Hours) {\n                template.addClass(\'wider\');\n            }\n\n            if (this._options.sideBySide && this._hasDate() && this._hasTime()) {\n                template.addClass(\'timepicker-sbs\');\n                if (this._options.toolbarPlacement === \'top\') {\n                    template.append(toolbar);\n                }\n                template.append($(\'<div>\').addClass(\'row\').append(dateView.addClass(\'col-md-6\')).append(timeView.addClass(\'col-md-6\')));\n                if (this._options.toolbarPlacement === \'bottom\' || this._options.toolbarPlacement === \'default\') {\n                    template.append(toolbar);\n                }\n                return template;\n            }\n\n            if (this._options.toolbarPlacement === \'top\') {\n                content.append(toolbar);\n            }\n            if (this._hasDate()) {\n                content.append($(\'<li>\').addClass(this._options.collapse && this._hasTime() ? \'collapse\' : \'\').addClass(this._options.collapse && this._hasTime() && this._options.viewMode === \'times\' ? \'\' : \'show\').append(dateView));\n            }\n            if (this._options.toolbarPlacement === \'default\') {\n                content.append(toolbar);\n            }\n            if (this._hasTime()) {\n                content.append($(\'<li>\').addClass(this._options.collapse && this._hasDate() ? \'collapse\' : \'\').addClass(this._options.collapse && this._hasDate() && this._options.viewMode === \'times\' ? \'show\' : \'\').append(timeView));\n            }\n            if (this._options.toolbarPlacement === \'bottom\') {\n                content.append(toolbar);\n            }\n            return template.append(content);\n        };\n\n        TempusDominusBootstrap4.prototype._place = function _place(e) {\n            var self = e && e.data && e.data.picker || this,\n                vertical = self._options.widgetPositioning.vertical,\n                horizontal = self._options.widgetPositioning.horizontal,\n                parent = void 0;\n            var position = (self.component && self.component.length ? self.component : self._element).position(),\n                offset = (self.component && self.component.length ? self.component : self._element).offset();\n            if (self._options.widgetParent) {\n                parent = self._options.widgetParent.append(self.widget);\n            } else if (self._element.is(\'input\')) {\n                parent = self._element.after(self.widget).parent();\n            } else if (self._options.inline) {\n                parent = self._element.append(self.widget);\n                return;\n            } else {\n                parent = self._element;\n                self._element.children().first().after(self.widget);\n            }\n\n            // Top and bottom logic\n            if (vertical === \'auto\') {\n                //noinspection JSValidateTypes\n                if (offset.top + self.widget.height() * 1.5 >= $(window).height() + $(window).scrollTop() && self.widget.height() + self._element.outerHeight() < offset.top) {\n                    vertical = \'top\';\n                } else {\n                    vertical = \'bottom\';\n                }\n            }\n\n            // Left and right logic\n            if (horizontal === \'auto\') {\n                if (parent.width() < offset.left + self.widget.outerWidth() / 2 && offset.left + self.widget.outerWidth() > $(window).width()) {\n                    horizontal = \'right\';\n                } else {\n                    horizontal = \'left\';\n                }\n            }\n\n            if (vertical === \'top\') {\n                self.widget.addClass(\'top\').removeClass(\'bottom\');\n            } else {\n                self.widget.addClass(\'bottom\').removeClass(\'top\');\n            }\n\n            if (horizontal === \'right\') {\n                self.widget.addClass(\'float-right\');\n            } else {\n                self.widget.removeClass(\'float-right\');\n            }\n\n            // find the first parent element that has a relative css positioning\n            if (parent.css(\'position\') !== \'relative\') {\n                parent = parent.parents().filter(function () {\n                    return $(this).css(\'position\') === \'relative\';\n                }).first();\n            }\n\n            if (parent.length === 0) {\n                throw new Error(\'datetimepicker component should be placed within a relative positioned container\');\n            }\n\n            self.widget.css({\n                top: vertical === \'top\' ? \'auto\' : position.top + self._element.outerHeight() + \'px\',\n                bottom: vertical === \'top\' ? parent.outerHeight() - (parent === self._element ? 0 : position.top) + \'px\' : \'auto\',\n                left: horizontal === \'left\' ? (parent === self._element ? 0 : position.left) + \'px\' : \'auto\',\n                right: horizontal === \'left\' ? \'auto\' : parent.outerWidth() - self._element.outerWidth() - (parent === self._element ? 0 : position.left) + \'px\'\n            });\n        };\n\n        TempusDominusBootstrap4.prototype._fillDow = function _fillDow() {\n            var row = $(\'<tr>\'),\n                currentDate = this._viewDate.clone().startOf(\'w\').startOf(\'d\');\n\n            if (this._options.calendarWeeks === true) {\n                row.append($(\'<th>\').addClass(\'cw\').text(\'#\'));\n            }\n\n            while (currentDate.isBefore(this._viewDate.clone().endOf(\'w\'))) {\n                row.append($(\'<th>\').addClass(\'dow\').text(currentDate.format(\'dd\')));\n                currentDate.add(1, \'d\');\n            }\n            this.widget.find(\'.datepicker-days thead\').append(row);\n        };\n\n        TempusDominusBootstrap4.prototype._fillMonths = function _fillMonths() {\n            var spans = [],\n                monthsShort = this._viewDate.clone().startOf(\'y\').startOf(\'d\');\n            while (monthsShort.isSame(this._viewDate, \'y\')) {\n                spans.push($(\'<span>\').attr(\'data-action\', \'selectMonth\').addClass(\'month\').text(monthsShort.format(\'MMM\')));\n                monthsShort.add(1, \'M\');\n            }\n            this.widget.find(\'.datepicker-months td\').empty().append(spans);\n        };\n\n        TempusDominusBootstrap4.prototype._updateMonths = function _updateMonths() {\n            var monthsView = this.widget.find(\'.datepicker-months\'),\n                monthsViewHeader = monthsView.find(\'th\'),\n                months = monthsView.find(\'tbody\').find(\'span\'),\n                self = this;\n\n            monthsViewHeader.eq(0).find(\'span\').attr(\'title\', this._options.tooltips.prevYear);\n            monthsViewHeader.eq(1).attr(\'title\', this._options.tooltips.selectYear);\n            monthsViewHeader.eq(2).find(\'span\').attr(\'title\', this._options.tooltips.nextYear);\n\n            monthsView.find(\'.disabled\').removeClass(\'disabled\');\n\n            if (!this._isValid(this._viewDate.clone().subtract(1, \'y\'), \'y\')) {\n                monthsViewHeader.eq(0).addClass(\'disabled\');\n            }\n\n            monthsViewHeader.eq(1).text(this._viewDate.year());\n\n            if (!this._isValid(this._viewDate.clone().add(1, \'y\'), \'y\')) {\n                monthsViewHeader.eq(2).addClass(\'disabled\');\n            }\n\n            months.removeClass(\'active\');\n            if (this._getLastPickedDate().isSame(this._viewDate, \'y\') && !this.unset) {\n                months.eq(this._getLastPickedDate().month()).addClass(\'active\');\n            }\n\n            months.each(function (index) {\n                if (!self._isValid(self._viewDate.clone().month(index), \'M\')) {\n                    $(this).addClass(\'disabled\');\n                }\n            });\n        };\n\n        TempusDominusBootstrap4.prototype._getStartEndYear = function _getStartEndYear(factor, year) {\n            var step = factor / 10,\n                startYear = Math.floor(year / factor) * factor,\n                endYear = startYear + step * 9,\n                focusValue = Math.floor(year / step) * step;\n            return [startYear, endYear, focusValue];\n        };\n\n        TempusDominusBootstrap4.prototype._updateYears = function _updateYears() {\n            var yearsView = this.widget.find(\'.datepicker-years\'),\n                yearsViewHeader = yearsView.find(\'th\'),\n                yearCaps = this._getStartEndYear(10, this._viewDate.year()),\n                startYear = this._viewDate.clone().year(yearCaps[0]),\n                endYear = this._viewDate.clone().year(yearCaps[1]);\n            var html = \'\';\n\n            yearsViewHeader.eq(0).find(\'span\').attr(\'title\', this._options.tooltips.prevDecade);\n            yearsViewHeader.eq(1).attr(\'title\', this._options.tooltips.selectDecade);\n            yearsViewHeader.eq(2).find(\'span\').attr(\'title\', this._options.tooltips.nextDecade);\n\n            yearsView.find(\'.disabled\').removeClass(\'disabled\');\n\n            if (this._options.minDate && this._options.minDate.isAfter(startYear, \'y\')) {\n                yearsViewHeader.eq(0).addClass(\'disabled\');\n            }\n\n            yearsViewHeader.eq(1).text(startYear.year() + \'-\' + endYear.year());\n\n            if (this._options.maxDate && this._options.maxDate.isBefore(endYear, \'y\')) {\n                yearsViewHeader.eq(2).addClass(\'disabled\');\n            }\n\n            html += \'<span data-action="selectYear" class="year old\' + (!this._isValid(startYear, \'y\') ? \' disabled\' : \'\') + \'">\' + (startYear.year() - 1) + \'</span>\';\n            while (!startYear.isAfter(endYear, \'y\')) {\n                html += \'<span data-action="selectYear" class="year\' + (startYear.isSame(this._getLastPickedDate(), \'y\') && !this.unset ? \' active\' : \'\') + (!this._isValid(startYear, \'y\') ? \' disabled\' : \'\') + \'">\' + startYear.year() + \'</span>\';\n                startYear.add(1, \'y\');\n            }\n            html += \'<span data-action="selectYear" class="year old\' + (!this._isValid(startYear, \'y\') ? \' disabled\' : \'\') + \'">\' + startYear.year() + \'</span>\';\n\n            yearsView.find(\'td\').html(html);\n        };\n\n        TempusDominusBootstrap4.prototype._updateDecades = function _updateDecades() {\n            var decadesView = this.widget.find(\'.datepicker-decades\'),\n                decadesViewHeader = decadesView.find(\'th\'),\n                yearCaps = this._getStartEndYear(100, this._viewDate.year()),\n                startDecade = this._viewDate.clone().year(yearCaps[0]),\n                endDecade = this._viewDate.clone().year(yearCaps[1]);\n            var minDateDecade = false,\n                maxDateDecade = false,\n                endDecadeYear = void 0,\n                html = \'\';\n\n            decadesViewHeader.eq(0).find(\'span\').attr(\'title\', this._options.tooltips.prevCentury);\n            decadesViewHeader.eq(2).find(\'span\').attr(\'title\', this._options.tooltips.nextCentury);\n\n            decadesView.find(\'.disabled\').removeClass(\'disabled\');\n\n            if (startDecade.year() === 0 || this._options.minDate && this._options.minDate.isAfter(startDecade, \'y\')) {\n                decadesViewHeader.eq(0).addClass(\'disabled\');\n            }\n\n            decadesViewHeader.eq(1).text(startDecade.year() + \'-\' + endDecade.year());\n\n            if (this._options.maxDate && this._options.maxDate.isBefore(endDecade, \'y\')) {\n                decadesViewHeader.eq(2).addClass(\'disabled\');\n            }\n\n            if (startDecade.year() - 10 < 0) {\n                html += \'<span>&nbsp;</span>\';\n            } else {\n                html += \'<span data-action="selectDecade" class="decade old" data-selection="\' + (startDecade.year() + 6) + \'">\' + (startDecade.year() - 10) + \'</span>\';\n            }\n\n            while (!startDecade.isAfter(endDecade, \'y\')) {\n                endDecadeYear = startDecade.year() + 11;\n                minDateDecade = this._options.minDate && this._options.minDate.isAfter(startDecade, \'y\') && this._options.minDate.year() <= endDecadeYear;\n                maxDateDecade = this._options.maxDate && this._options.maxDate.isAfter(startDecade, \'y\') && this._options.maxDate.year() <= endDecadeYear;\n                html += \'<span data-action="selectDecade" class="decade\' + (this._getLastPickedDate().isAfter(startDecade) && this._getLastPickedDate().year() <= endDecadeYear ? \' active\' : \'\') + (!this._isValid(startDecade, \'y\') && !minDateDecade && !maxDateDecade ? \' disabled\' : \'\') + \'" data-selection="\' + (startDecade.year() + 6) + \'">\' + startDecade.year() + \'</span>\';\n                startDecade.add(10, \'y\');\n            }\n            html += \'<span data-action="selectDecade" class="decade old" data-selection="\' + (startDecade.year() + 6) + \'">\' + startDecade.year() + \'</span>\';\n\n            decadesView.find(\'td\').html(html);\n        };\n\n        TempusDominusBootstrap4.prototype._fillDate = function _fillDate() {\n            var daysView = this.widget.find(\'.datepicker-days\'),\n                daysViewHeader = daysView.find(\'th\'),\n                html = [];\n            var currentDate = void 0,\n                row = void 0,\n                clsName = void 0,\n                i = void 0;\n\n            if (!this._hasDate()) {\n                return;\n            }\n\n            daysViewHeader.eq(0).find(\'span\').attr(\'title\', this._options.tooltips.prevMonth);\n            daysViewHeader.eq(1).attr(\'title\', this._options.tooltips.selectMonth);\n            daysViewHeader.eq(2).find(\'span\').attr(\'title\', this._options.tooltips.nextMonth);\n\n            daysView.find(\'.disabled\').removeClass(\'disabled\');\n            daysViewHeader.eq(1).text(this._viewDate.format(this._options.dayViewHeaderFormat));\n\n            if (!this._isValid(this._viewDate.clone().subtract(1, \'M\'), \'M\')) {\n                daysViewHeader.eq(0).addClass(\'disabled\');\n            }\n            if (!this._isValid(this._viewDate.clone().add(1, \'M\'), \'M\')) {\n                daysViewHeader.eq(2).addClass(\'disabled\');\n            }\n\n            currentDate = this._viewDate.clone().startOf(\'M\').startOf(\'w\').startOf(\'d\');\n\n            for (i = 0; i < 42; i++) {\n                //always display 42 days (should show 6 weeks)\n                if (currentDate.weekday() === 0) {\n                    row = $(\'<tr>\');\n                    if (this._options.calendarWeeks) {\n                        row.append(\'<td class="cw">\' + currentDate.week() + \'</td>\');\n                    }\n                    html.push(row);\n                }\n                clsName = \'\';\n                if (currentDate.isBefore(this._viewDate, \'M\')) {\n                    clsName += \' old\';\n                }\n                if (currentDate.isAfter(this._viewDate, \'M\')) {\n                    clsName += \' new\';\n                }\n                if (this._options.allowMultidate) {\n                    var index = this._datesFormatted.indexOf(currentDate.format(\'YYYY-MM-DD\'));\n                    if (index !== -1) {\n                        if (currentDate.isSame(this._datesFormatted[index], \'d\') && !this.unset) {\n                            clsName += \' active\';\n                        }\n                    }\n                } else {\n                    if (currentDate.isSame(this._getLastPickedDate(), \'d\') && !this.unset) {\n                        clsName += \' active\';\n                    }\n                }\n                if (!this._isValid(currentDate, \'d\')) {\n                    clsName += \' disabled\';\n                }\n                if (currentDate.isSame(this.getMoment(), \'d\')) {\n                    clsName += \' today\';\n                }\n                if (currentDate.day() === 0 || currentDate.day() === 6) {\n                    clsName += \' weekend\';\n                }\n                row.append(\'<td data-action="selectDay" data-day="\' + currentDate.format(\'L\') + \'" class="day\' + clsName + \'">\' + currentDate.date() + \'</td>\');\n                currentDate.add(1, \'d\');\n            }\n\n            daysView.find(\'tbody\').empty().append(html);\n\n            this._updateMonths();\n\n            this._updateYears();\n\n            this._updateDecades();\n        };\n\n        TempusDominusBootstrap4.prototype._fillHours = function _fillHours() {\n            var table = this.widget.find(\'.timepicker-hours table\'),\n                currentHour = this._viewDate.clone().startOf(\'d\'),\n                html = [];\n            var row = $(\'<tr>\');\n\n            if (this._viewDate.hour() > 11 && !this.use24Hours) {\n                currentHour.hour(12);\n            }\n            while (currentHour.isSame(this._viewDate, \'d\') && (this.use24Hours || this._viewDate.hour() < 12 && currentHour.hour() < 12 || this._viewDate.hour() > 11)) {\n                if (currentHour.hour() % 4 === 0) {\n                    row = $(\'<tr>\');\n                    html.push(row);\n                }\n                row.append(\'<td data-action="selectHour" class="hour\' + (!this._isValid(currentHour, \'h\') ? \' disabled\' : \'\') + \'">\' + currentHour.format(this.use24Hours ? \'HH\' : \'hh\') + \'</td>\');\n                currentHour.add(1, \'h\');\n            }\n            table.empty().append(html);\n        };\n\n        TempusDominusBootstrap4.prototype._fillMinutes = function _fillMinutes() {\n            var table = this.widget.find(\'.timepicker-minutes table\'),\n                currentMinute = this._viewDate.clone().startOf(\'h\'),\n                html = [],\n                step = this._options.stepping === 1 ? 5 : this._options.stepping;\n            var row = $(\'<tr>\');\n\n            while (this._viewDate.isSame(currentMinute, \'h\')) {\n                if (currentMinute.minute() % (step * 4) === 0) {\n                    row = $(\'<tr>\');\n                    html.push(row);\n                }\n                row.append(\'<td data-action="selectMinute" class="minute\' + (!this._isValid(currentMinute, \'m\') ? \' disabled\' : \'\') + \'">\' + currentMinute.format(\'mm\') + \'</td>\');\n                currentMinute.add(step, \'m\');\n            }\n            table.empty().append(html);\n        };\n\n        TempusDominusBootstrap4.prototype._fillSeconds = function _fillSeconds() {\n            var table = this.widget.find(\'.timepicker-seconds table\'),\n                currentSecond = this._viewDate.clone().startOf(\'m\'),\n                html = [];\n            var row = $(\'<tr>\');\n\n            while (this._viewDate.isSame(currentSecond, \'m\')) {\n                if (currentSecond.second() % 20 === 0) {\n                    row = $(\'<tr>\');\n                    html.push(row);\n                }\n                row.append(\'<td data-action="selectSecond" class="second\' + (!this._isValid(currentSecond, \'s\') ? \' disabled\' : \'\') + \'">\' + currentSecond.format(\'ss\') + \'</td>\');\n                currentSecond.add(5, \'s\');\n            }\n\n            table.empty().append(html);\n        };\n\n        TempusDominusBootstrap4.prototype._fillTime = function _fillTime() {\n            var toggle = void 0,\n                newDate = void 0;\n            var timeComponents = this.widget.find(\'.timepicker span[data-time-component]\');\n\n            if (!this.use24Hours) {\n                toggle = this.widget.find(\'.timepicker [data-action=togglePeriod]\');\n                newDate = this._getLastPickedDate().clone().add(this._getLastPickedDate().hours() >= 12 ? -12 : 12, \'h\');\n\n                toggle.text(this._getLastPickedDate().format(\'A\'));\n\n                if (this._isValid(newDate, \'h\')) {\n                    toggle.removeClass(\'disabled\');\n                } else {\n                    toggle.addClass(\'disabled\');\n                }\n            }\n            timeComponents.filter(\'[data-time-component=hours]\').text(this._getLastPickedDate().format(\'\' + (this.use24Hours ? \'HH\' : \'hh\')));\n            timeComponents.filter(\'[data-time-component=minutes]\').text(this._getLastPickedDate().format(\'mm\'));\n            timeComponents.filter(\'[data-time-component=seconds]\').text(this._getLastPickedDate().format(\'ss\'));\n\n            this._fillHours();\n            this._fillMinutes();\n            this._fillSeconds();\n        };\n\n        TempusDominusBootstrap4.prototype._doAction = function _doAction(e, action) {\n            var lastPicked = this._getLastPickedDate();\n            if ($(e.currentTarget).is(\'.disabled\')) {\n                return false;\n            }\n            action = action || $(e.currentTarget).data(\'action\');\n            switch (action) {\n                case \'next\':\n                    {\n                        var navFnc = DateTimePicker.DatePickerModes[this.currentViewMode].NAV_FUNCTION;\n                        this._viewDate.add(DateTimePicker.DatePickerModes[this.currentViewMode].NAV_STEP, navFnc);\n                        this._fillDate();\n                        this._viewUpdate(navFnc);\n                        break;\n                    }\n                case \'previous\':\n                    {\n                        var _navFnc = DateTimePicker.DatePickerModes[this.currentViewMode].NAV_FUNCTION;\n                        this._viewDate.subtract(DateTimePicker.DatePickerModes[this.currentViewMode].NAV_STEP, _navFnc);\n                        this._fillDate();\n                        this._viewUpdate(_navFnc);\n                        break;\n                    }\n                case \'pickerSwitch\':\n                    this._showMode(1);\n                    break;\n                case \'selectMonth\':\n                    {\n                        var month = $(e.target).closest(\'tbody\').find(\'span\').index($(e.target));\n                        this._viewDate.month(month);\n                        if (this.currentViewMode === DateTimePicker.MinViewModeNumber) {\n                            this._setValue(lastPicked.clone().year(this._viewDate.year()).month(this._viewDate.month()), this._getLastPickedDateIndex());\n                            if (!this._options.inline) {\n                                this.hide();\n                            }\n                        } else {\n                            this._showMode(-1);\n                            this._fillDate();\n                        }\n                        this._viewUpdate(\'M\');\n                        break;\n                    }\n                case \'selectYear\':\n                    {\n                        var year = parseInt($(e.target).text(), 10) || 0;\n                        this._viewDate.year(year);\n                        if (this.currentViewMode === DateTimePicker.MinViewModeNumber) {\n                            this._setValue(lastPicked.clone().year(this._viewDate.year()), this._getLastPickedDateIndex());\n                            if (!this._options.inline) {\n                                this.hide();\n                            }\n                        } else {\n                            this._showMode(-1);\n                            this._fillDate();\n                        }\n                        this._viewUpdate(\'YYYY\');\n                        break;\n                    }\n                case \'selectDecade\':\n                    {\n                        var _year = parseInt($(e.target).data(\'selection\'), 10) || 0;\n                        this._viewDate.year(_year);\n                        if (this.currentViewMode === DateTimePicker.MinViewModeNumber) {\n                            this._setValue(lastPicked.clone().year(this._viewDate.year()), this._getLastPickedDateIndex());\n                            if (!this._options.inline) {\n                                this.hide();\n                            }\n                        } else {\n                            this._showMode(-1);\n                            this._fillDate();\n                        }\n                        this._viewUpdate(\'YYYY\');\n                        break;\n                    }\n                case \'selectDay\':\n                    {\n                        var day = this._viewDate.clone();\n                        if ($(e.target).is(\'.old\')) {\n                            day.subtract(1, \'M\');\n                        }\n                        if ($(e.target).is(\'.new\')) {\n                            day.add(1, \'M\');\n                        }\n                        this._setValue(day.date(parseInt($(e.target).text(), 10)), this._getLastPickedDateIndex());\n                        if (!this._hasTime() && !this._options.keepOpen && !this._options.inline) {\n                            this.hide();\n                        }\n                        break;\n                    }\n                case \'incrementHours\':\n                    {\n                        var newDate = lastPicked.clone().add(1, \'h\');\n                        if (this._isValid(newDate, \'h\')) {\n                            this._setValue(newDate, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'incrementMinutes\':\n                    {\n                        var _newDate = lastPicked.clone().add(this._options.stepping, \'m\');\n                        if (this._isValid(_newDate, \'m\')) {\n                            this._setValue(_newDate, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'incrementSeconds\':\n                    {\n                        var _newDate2 = lastPicked.clone().add(1, \'s\');\n                        if (this._isValid(_newDate2, \'s\')) {\n                            this._setValue(_newDate2, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'decrementHours\':\n                    {\n                        var _newDate3 = lastPicked.clone().subtract(1, \'h\');\n                        if (this._isValid(_newDate3, \'h\')) {\n                            this._setValue(_newDate3, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'decrementMinutes\':\n                    {\n                        var _newDate4 = lastPicked.clone().subtract(this._options.stepping, \'m\');\n                        if (this._isValid(_newDate4, \'m\')) {\n                            this._setValue(_newDate4, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'decrementSeconds\':\n                    {\n                        var _newDate5 = lastPicked.clone().subtract(1, \'s\');\n                        if (this._isValid(_newDate5, \'s\')) {\n                            this._setValue(_newDate5, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n                case \'togglePeriod\':\n                    {\n                        this._setValue(lastPicked.clone().add(lastPicked.hours() >= 12 ? -12 : 12, \'h\'), this._getLastPickedDateIndex());\n                        break;\n                    }\n                case \'togglePicker\':\n                    {\n                        var $this = $(e.target),\n                            $link = $this.closest(\'a\'),\n                            $parent = $this.closest(\'ul\'),\n                            expanded = $parent.find(\'.show\'),\n                            closed = $parent.find(\'.collapse:not(.show)\'),\n                            $span = $this.is(\'span\') ? $this : $this.find(\'span\');\n                        var collapseData = void 0;\n\n                        if (expanded && expanded.length) {\n                            collapseData = expanded.data(\'collapse\');\n                            if (collapseData && collapseData.transitioning) {\n                                return true;\n                            }\n                            if (expanded.collapse) {\n                                // if collapse plugin is available through bootstrap.js then use it\n                                expanded.collapse(\'hide\');\n                                closed.collapse(\'show\');\n                            } else {\n                                // otherwise just toggle in class on the two views\n                                expanded.removeClass(\'show\');\n                                closed.addClass(\'show\');\n                            }\n                            $span.toggleClass(this._options.icons.time + \' \' + this._options.icons.date);\n\n                            if ($span.hasClass(this._options.icons.date)) {\n                                $link.attr(\'title\', this._options.tooltips.selectDate);\n                            } else {\n                                $link.attr(\'title\', this._options.tooltips.selectTime);\n                            }\n                        }\n                    }\n                    break;\n                case \'showPicker\':\n                    this.widget.find(\'.timepicker > div:not(.timepicker-picker)\').hide();\n                    this.widget.find(\'.timepicker .timepicker-picker\').show();\n                    break;\n                case \'showHours\':\n                    this.widget.find(\'.timepicker .timepicker-picker\').hide();\n                    this.widget.find(\'.timepicker .timepicker-hours\').show();\n                    break;\n                case \'showMinutes\':\n                    this.widget.find(\'.timepicker .timepicker-picker\').hide();\n                    this.widget.find(\'.timepicker .timepicker-minutes\').show();\n                    break;\n                case \'showSeconds\':\n                    this.widget.find(\'.timepicker .timepicker-picker\').hide();\n                    this.widget.find(\'.timepicker .timepicker-seconds\').show();\n                    break;\n                case \'selectHour\':\n                    {\n                        var hour = parseInt($(e.target).text(), 10);\n\n                        if (!this.use24Hours) {\n                            if (lastPicked.hours() >= 12) {\n                                if (hour !== 12) {\n                                    hour += 12;\n                                }\n                            } else {\n                                if (hour === 12) {\n                                    hour = 0;\n                                }\n                            }\n                        }\n                        this._setValue(lastPicked.clone().hours(hour), this._getLastPickedDateIndex());\n                        if (!this._isEnabled(\'a\') && !this._isEnabled(\'m\') && !this._options.keepOpen && !this._options.inline) {\n                            this.hide();\n                        } else {\n                            this._doAction(e, \'showPicker\');\n                        }\n                        break;\n                    }\n                case \'selectMinute\':\n                    this._setValue(lastPicked.clone().minutes(parseInt($(e.target).text(), 10)), this._getLastPickedDateIndex());\n                    if (!this._isEnabled(\'a\') && !this._isEnabled(\'s\') && !this._options.keepOpen && !this._options.inline) {\n                        this.hide();\n                    } else {\n                        this._doAction(e, \'showPicker\');\n                    }\n                    break;\n                case \'selectSecond\':\n                    this._setValue(lastPicked.clone().seconds(parseInt($(e.target).text(), 10)), this._getLastPickedDateIndex());\n                    if (!this._isEnabled(\'a\') && !this._options.keepOpen && !this._options.inline) {\n                        this.hide();\n                    } else {\n                        this._doAction(e, \'showPicker\');\n                    }\n                    break;\n                case \'clear\':\n                    this.clear();\n                    break;\n                case \'close\':\n                    this.hide();\n                    break;\n                case \'today\':\n                    {\n                        var todaysDate = this.getMoment();\n                        if (this._isValid(todaysDate, \'d\')) {\n                            this._setValue(todaysDate, this._getLastPickedDateIndex());\n                        }\n                        break;\n                    }\n            }\n            return false;\n        };\n\n        //public\n\n\n        TempusDominusBootstrap4.prototype.hide = function hide() {\n            var transitioning = false;\n            if (!this.widget) {\n                return;\n            }\n            // Ignore event if in the middle of a picker transition\n            this.widget.find(\'.collapse\').each(function () {\n                var collapseData = $(this).data(\'collapse\');\n                if (collapseData && collapseData.transitioning) {\n                    transitioning = true;\n                    return false;\n                }\n                return true;\n            });\n            if (transitioning) {\n                return;\n            }\n            if (this.component && this.component.hasClass(\'btn\')) {\n                this.component.toggleClass(\'active\');\n            }\n            this.widget.hide();\n\n            $(window).off(\'resize\', this._place());\n            this.widget.off(\'click\', \'[data-action]\');\n            this.widget.off(\'mousedown\', false);\n\n            this.widget.remove();\n            this.widget = false;\n\n            this._notifyEvent({\n                type: DateTimePicker.Event.HIDE,\n                date: this._getLastPickedDate().clone()\n            });\n\n            if (this.input !== undefined) {\n                this.input.blur();\n            }\n\n            this._viewDate = this._getLastPickedDate().clone();\n        };\n\n        TempusDominusBootstrap4.prototype.show = function show() {\n            var currentMoment = void 0;\n            var useCurrentGranularity = {\n                \'year\': function year(m) {\n                    return m.month(0).date(1).hours(0).seconds(0).minutes(0);\n                },\n                \'month\': function month(m) {\n                    return m.date(1).hours(0).seconds(0).minutes(0);\n                },\n                \'day\': function day(m) {\n                    return m.hours(0).seconds(0).minutes(0);\n                },\n                \'hour\': function hour(m) {\n                    return m.seconds(0).minutes(0);\n                },\n                \'minute\': function minute(m) {\n                    return m.seconds(0);\n                }\n            };\n\n            if (this.input !== undefined) {\n                if (this.input.prop(\'disabled\') || !this._options.ignoreReadonly && this.input.prop(\'readonly\') || this.widget) {\n                    return;\n                }\n                if (this.input.val() !== undefined && this.input.val().trim().length !== 0) {\n                    this._setValue(this._parseInputDate(this.input.val().trim()), 0);\n                } else if (this.unset && this._options.useCurrent) {\n                    currentMoment = this.getMoment();\n                    if (typeof this._options.useCurrent === \'string\') {\n                        currentMoment = useCurrentGranularity[this._options.useCurrent](currentMoment);\n                    }\n                    this._setValue(currentMoment, 0);\n                }\n            } else if (this.unset && this._options.useCurrent) {\n                currentMoment = this.getMoment();\n                if (typeof this._options.useCurrent === \'string\') {\n                    currentMoment = useCurrentGranularity[this._options.useCurrent](currentMoment);\n                }\n                this._setValue(currentMoment, 0);\n            }\n\n            this.widget = this._getTemplate();\n\n            this._fillDow();\n            this._fillMonths();\n\n            this.widget.find(\'.timepicker-hours\').hide();\n            this.widget.find(\'.timepicker-minutes\').hide();\n            this.widget.find(\'.timepicker-seconds\').hide();\n\n            this._update();\n            this._showMode();\n\n            $(window).on(\'resize\', { picker: this }, this._place);\n            this.widget.on(\'click\', \'[data-action]\', $.proxy(this._doAction, this)); // this handles clicks on the widget\n            this.widget.on(\'mousedown\', false);\n\n            if (this.component && this.component.hasClass(\'btn\')) {\n                this.component.toggleClass(\'active\');\n            }\n            this._place();\n            this.widget.show();\n            if (this.input !== undefined && this._options.focusOnShow && !this.input.is(\':focus\')) {\n                this.input.focus();\n            }\n\n            this._notifyEvent({\n                type: DateTimePicker.Event.SHOW\n            });\n        };\n\n        TempusDominusBootstrap4.prototype.destroy = function destroy() {\n            this.hide();\n            //todo doc off?\n            this._element.removeData(DateTimePicker.DATA_KEY);\n            this._element.removeData(\'date\');\n        };\n\n        TempusDominusBootstrap4.prototype.disable = function disable() {\n            this.hide();\n            if (this.component && this.component.hasClass(\'btn\')) {\n                this.component.addClass(\'disabled\');\n            }\n            if (this.input !== undefined) {\n                this.input.prop(\'disabled\', true); //todo disable this/comp if input is null\n            }\n        };\n\n        TempusDominusBootstrap4.prototype.enable = function enable() {\n            if (this.component && this.component.hasClass(\'btn\')) {\n                this.component.removeClass(\'disabled\');\n            }\n            if (this.input !== undefined) {\n                this.input.prop(\'disabled\', false); //todo enable comp/this if input is null\n            }\n        };\n\n        TempusDominusBootstrap4.prototype.toolbarPlacement = function toolbarPlacement(_toolbarPlacement) {\n            if (arguments.length === 0) {\n                return this._options.toolbarPlacement;\n            }\n\n            if (typeof _toolbarPlacement !== \'string\') {\n                throw new TypeError(\'toolbarPlacement() expects a string parameter\');\n            }\n            if (toolbarPlacements.indexOf(_toolbarPlacement) === -1) {\n                throw new TypeError(\'toolbarPlacement() parameter must be one of (\' + toolbarPlacements.join(\', \') + \') value\');\n            }\n            this._options.toolbarPlacement = _toolbarPlacement;\n\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        TempusDominusBootstrap4.prototype.widgetPositioning = function widgetPositioning(_widgetPositioning) {\n            if (arguments.length === 0) {\n                return $.extend({}, this._options.widgetPositioning);\n            }\n\n            if ({}.toString.call(_widgetPositioning) !== \'[object Object]\') {\n                throw new TypeError(\'widgetPositioning() expects an object variable\');\n            }\n            if (_widgetPositioning.horizontal) {\n                if (typeof _widgetPositioning.horizontal !== \'string\') {\n                    throw new TypeError(\'widgetPositioning() horizontal variable must be a string\');\n                }\n                _widgetPositioning.horizontal = _widgetPositioning.horizontal.toLowerCase();\n                if (horizontalModes.indexOf(_widgetPositioning.horizontal) === -1) {\n                    throw new TypeError(\'widgetPositioning() expects horizontal parameter to be one of (\' + horizontalModes.join(\', \') + \')\');\n                }\n                this._options.widgetPositioning.horizontal = _widgetPositioning.horizontal;\n            }\n            if (_widgetPositioning.vertical) {\n                if (typeof _widgetPositioning.vertical !== \'string\') {\n                    throw new TypeError(\'widgetPositioning() vertical variable must be a string\');\n                }\n                _widgetPositioning.vertical = _widgetPositioning.vertical.toLowerCase();\n                if (verticalModes.indexOf(_widgetPositioning.vertical) === -1) {\n                    throw new TypeError(\'widgetPositioning() expects vertical parameter to be one of (\' + verticalModes.join(\', \') + \')\');\n                }\n                this._options.widgetPositioning.vertical = _widgetPositioning.vertical;\n            }\n            this._update();\n        };\n\n        TempusDominusBootstrap4.prototype.widgetParent = function widgetParent(_widgetParent) {\n            if (arguments.length === 0) {\n                return this._options.widgetParent;\n            }\n\n            if (typeof _widgetParent === \'string\') {\n                _widgetParent = $(_widgetParent);\n            }\n\n            if (_widgetParent !== null && typeof _widgetParent !== \'string\' && !(_widgetParent instanceof $)) {\n                throw new TypeError(\'widgetParent() expects a string or a jQuery object parameter\');\n            }\n\n            this._options.widgetParent = _widgetParent;\n            if (this.widget) {\n                this.hide();\n                this.show();\n            }\n        };\n\n        //static\n\n\n        TempusDominusBootstrap4._jQueryHandleThis = function _jQueryHandleThis(me, option, argument) {\n            var data = $(me).data(DateTimePicker.DATA_KEY);\n            if ((typeof option === \'undefined\' ? \'undefined\' : _typeof(option)) === \'object\') {\n                $.extend({}, DateTimePicker.Default, option);\n            }\n\n            if (!data) {\n                data = new TempusDominusBootstrap4($(me), option);\n                $(me).data(DateTimePicker.DATA_KEY, data);\n            }\n\n            if (typeof option === \'string\') {\n                if (data[option] === undefined) {\n                    throw new Error(\'No method named "\' + option + \'"\');\n                }\n                if (argument === undefined) {\n                    return data[option]();\n                } else {\n                    return data[option](argument);\n                }\n            }\n        };\n\n        TempusDominusBootstrap4._jQueryInterface = function _jQueryInterface(option, argument) {\n            if (this.length === 1) {\n                return TempusDominusBootstrap4._jQueryHandleThis(this[0], option, argument);\n            }\n            return this.each(function () {\n                TempusDominusBootstrap4._jQueryHandleThis(this, option, argument);\n            });\n        };\n\n        return TempusDominusBootstrap4;\n    }(DateTimePicker);\n\n    /**\r\n    * ------------------------------------------------------------------------\r\n    * jQuery\r\n    * ------------------------------------------------------------------------\r\n    */\n\n\n    $(document).on(DateTimePicker.Event.CLICK_DATA_API, DateTimePicker.Selector.DATA_TOGGLE, function () {\n        var $target = getSelectorFromElement($(this));\n        if ($target.length === 0) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'toggle\');\n    }).on(DateTimePicker.Event.CHANGE, \'.\' + DateTimePicker.ClassName.INPUT, function (event) {\n        var $target = getSelectorFromElement($(this));\n        if ($target.length === 0) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'_change\', event);\n    }).on(DateTimePicker.Event.BLUR, \'.\' + DateTimePicker.ClassName.INPUT, function (event) {\n        var $target = getSelectorFromElement($(this)),\n            config = $target.data(DateTimePicker.DATA_KEY);\n        if ($target.length === 0) {\n            return;\n        }\n        if (config._options.debug || window.debug) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'hide\', event);\n    }).on(DateTimePicker.Event.KEYDOWN, \'.\' + DateTimePicker.ClassName.INPUT, function (event) {\n        var $target = getSelectorFromElement($(this));\n        if ($target.length === 0) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'_keydown\', event);\n    }).on(DateTimePicker.Event.KEYUP, \'.\' + DateTimePicker.ClassName.INPUT, function (event) {\n        var $target = getSelectorFromElement($(this));\n        if ($target.length === 0) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'_keyup\', event);\n    }).on(DateTimePicker.Event.FOCUS, \'.\' + DateTimePicker.ClassName.INPUT, function (event) {\n        var $target = getSelectorFromElement($(this)),\n            config = $target.data(DateTimePicker.DATA_KEY);\n        if ($target.length === 0) {\n            return;\n        }\n        if (!config._options.allowInputToggle) {\n            return;\n        }\n        TempusDominusBootstrap4._jQueryInterface.call($target, \'show\', event);\n    });\n\n    $.fn[DateTimePicker.NAME] = TempusDominusBootstrap4._jQueryInterface;\n    $.fn[DateTimePicker.NAME].Constructor = TempusDominusBootstrap4;\n    $.fn[DateTimePicker.NAME].noConflict = function () {\n        $.fn[DateTimePicker.NAME] = JQUERY_NO_CONFLICT;\n        return TempusDominusBootstrap4._jQueryInterface;\n    };\n\n    return TempusDominusBootstrap4;\n}(jQuery);\r\n\r\n}();\r\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*shuttle-access@1.0.1#shuttle-access*/
define('shuttle-access@1.0.1#shuttle-access', [
    'exports',
    'jquery',
    'can-define/map/',
    'can-define/list/',
    'shuttle-can-api',
    'can-util/js/each/',
    'shuttle-guard'
], function (exports, _jquery, _map, _list, _shuttleCanApi, _each, _shuttleGuard) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AnonymousMap = exports.PermissionList = exports.PermissionMap = exports.messages = undefined;
    var _jquery2 = _interopRequireDefault(_jquery);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _shuttleCanApi2 = _interopRequireDefault(_shuttleCanApi);
    var _each2 = _interopRequireDefault(_each);
    var _shuttleGuard2 = _interopRequireDefault(_shuttleGuard);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Messages = _map2.default.extend({
        missingCredentials: {
            type: 'string',
            default: 'No credentials specified.'
        },
        loginFailure: {
            type: 'string',
            default: 'Invalid login credentials.'
        },
        missingStorage: {
            type: 'string',
            default: 'No storage has been specified.'
        },
        missingSessionsApi: {
            type: 'string',
            default: 'The \'sessions\' api has not been set.  Make a call to \'access.start()\' before accessing the \'sessions\' api.'
        },
        missingAnonymousApi: {
            type: 'string',
            default: 'The \'anonymous\' api has not been set.  Make a call to \'access.start()\' before accessing the \'anonymous\' api.'
        },
        invalidStorage: {
            type: 'string',
            default: 'An invalid \'storage\' instance has been specified.  It should have a \'getItem\', \'setItem\', and \'removeItem\' method.'
        }
    });
    var messages = exports.messages = new Messages({});
    var PermissionMap = exports.PermissionMap = _map2.default.extend({
        type: {
            type: 'string',
            default: 'user'
        },
        permission: {
            type: 'string',
            default: ''
        }
    });
    var PermissionList = exports.PermissionList = _list2.default.extend({ '#': PermissionMap });
    var AnonymousMap = exports.AnonymousMap = _map2.default.extend({
        isUserRequired: {
            type: 'boolean',
            default: false
        },
        permissions: { Default: PermissionList }
    });
    var AccessApi = _map2.default.extend({
        sessions: {
            get: function get(value) {
                if (!value) {
                    throw new Error(messages.missingSessionsApi);
                }
                return value;
            }
        },
        anonymous: {
            get: function get(value) {
                if (!value) {
                    throw new Error(messages.missingAnonymousApi);
                }
                return value;
            }
        }
    });
    var Access = _map2.default.extend({
        url: {
            type: 'string',
            default: '',
            get: function get(value) {
                if (!value) {
                    throw new Error('Use `import {options} from \'shuttle-access\';` to get the options and then set the api endpoint url `this.url = \'http://server-endpoint\';`.');
                }
                return value + (!value.endsWith('/') ? '/' : '');
            }
        },
        api: { Default: AccessApi },
        storage: {
            default: function _default() {
                return localStorage;
            },
            set: function set(newval) {
                _shuttleGuard2.default.againstUndefined(newval, 'newval');
                if (typeof newval.getItem !== 'function' || typeof newval.setItem !== 'function' || typeof newval.removeItem !== 'function') {
                    throw new Error(messages.invalidStorage);
                }
                return newval;
            }
        },
        username: {
            type: 'string',
            default: ''
        },
        token: {
            type: 'string',
            default: undefined
        },
        isUserRequired: 'boolean',
        permissions: { Default: PermissionList },
        hasSession: function hasSession() {
            return this.token != undefined;
        },
        hasPermission: function hasPermission(permission) {
            var result = false;
            var permissionCompare = permission.toLowerCase();
            this.permissions.forEach(function (item) {
                if (result) {
                    return;
                }
                result = item.permission === '*' || item.permission.toLowerCase() === permissionCompare;
            });
            return result;
        },
        removePermission: function removePermission(permission) {
            this.permissions = this.permissions.filter(function (item) {
                return item.permission !== permission;
            });
        },
        start: function start() {
            var self = this;
            if (!this.storage) {
                throw new Error(messages.missingStorage);
            }
            this.api.anonymous = new _shuttleCanApi2.default({
                endpoint: this.url + 'anonymouspermissions',
                Map: AnonymousMap
            });
            this.api.sessions = new _shuttleCanApi2.default({ endpoint: this.url + 'sessions' });
            return this.api.anonymous.map().then(function (map) {
                var username = self.storage.getItem('username');
                var token = self.storage.getItem('token');
                self.isUserRequired = map.isUserRequired;
                (0, _each2.default)(map.permissions, function (item) {
                    self.addPermission('anonymous', item.permission);
                });
                if (!!username && !!token) {
                    return self.login({
                        username: username,
                        token: token
                    }).then(function (response) {
                        return response;
                    });
                }
                return map;
            });
        },
        addPermission: function addPermission(type, permission) {
            if (this.hasPermission(permission)) {
                return;
            }
            this.permissions.push({
                type: type,
                permission: permission
            });
        },
        login: function login(credentials) {
            var _this = this;
            var self = this;
            return new Promise(function (resolve, reject) {
                if (!credentials || !credentials.username || !(!!credentials.password || !!credentials.token)) {
                    reject(new Error(messages.missingCredentials));
                    return;
                }
                var usingToken = !!credentials.token;
                return _this.api.sessions.post({
                    username: credentials.username,
                    password: credentials.password,
                    token: credentials.token
                }).then(function (response) {
                    if (response.registered) {
                        self.storage.setItem('username', credentials.username);
                        self.storage.setItem('token', response.token);
                        self.username = credentials.username;
                        self.token = response.token;
                        self.isUserRequired = false;
                        self.removeUserPermissions();
                        (0, _each2.default)(response.permissions, function (item) {
                            self.addPermission('user', item.permission);
                        });
                        resolve();
                    } else {
                        if (usingToken) {
                            self.username = undefined;
                            self.token = undefined;
                            self.storage.removeItem('username');
                            self.storage.removeItem('token');
                        } else {
                            reject(new Error(messages.loginFailure));
                        }
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        },
        logout: function logout() {
            this.username = undefined;
            this.token = undefined;
            this.storage.removeItem('username');
            this.storage.removeItem('token');
            this.removeUserPermissions();
        },
        removeUserPermissions: function removeUserPermissions() {
            this.permissions = this.permissions.filter(function (item) {
                return item.type !== 'user';
            });
        },
        loginStatus: {
            get: function get() {
                return this.isUserRequired ? 'user-required' : this.token == undefined ? 'not-logged-in' : 'logged-in';
            }
        }
    });
    var access = new Access();
    _jquery2.default.ajaxPrefilter(function (options, originalOptions) {
        options.beforeSend = function (xhr) {
            if (access.token) {
                xhr.setRequestHeader('access-sessiontoken', access.token);
            }
            if (originalOptions.beforeSend) {
                originalOptions.beforeSend(xhr);
            }
        };
    });
    exports.default = access;
});
/*can-simple-observable@2.2.0#make-compute/make-compute*/
define('can-simple-observable@2.2.0#make-compute/make-compute', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    var translationHelpers = new WeakMap();
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = translationHelpers.get(handler);
            if (!translationHandler) {
                translationHandler = function (newVal, oldVal) {
                    handler.call(compute, { type: 'change' }, newVal, oldVal);
                };
                if (process.env.NODE_ENV !== 'production') {
                    Object.defineProperty(translationHandler, 'name', { value: 'translationHandler(' + event + ')::' + canReflect.getName(observable) + '.onValue(' + canReflect.getName(handler) + ')' });
                }
                translationHelpers.set(handler, translationHandler);
            }
            canReflect.onValue(observable, translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            canReflect.offValue(observable, translationHelpers.get(handler));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-route@4.3.0#src/binding-proxy*/
define('can-route@4.3.0#src/binding-proxy', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var SimpleObservable = require('can-simple-observable');
    var urlDataObservable = new SimpleObservable(null);
    var bindingProxy = {
        defaultBinding: null,
        urlDataObservable: urlDataObservable,
        bindings: {},
        call: function () {
            var args = canReflect.toArray(arguments), prop = args.shift(), binding = urlDataObservable.value;
            if (binding === null) {
                throw new Error('there is no current binding!!!');
            }
            var method = binding[prop.indexOf('can.') === 0 ? canSymbol.for(prop) : prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        }
    };
    module.exports = bindingProxy;
});
/*can-route@4.3.0#src/regexps*/
define('can-route@4.3.0#src/regexps', function (require, exports, module) {
    'use strict';
    module.exports = {
        curlies: /\{\s*([\w.]+)\s*\}/g,
        colon: /\:([\w.]+)/g
    };
});
/*can-diff@1.4.1#map/map*/
define('can-diff@1.4.1#map/map', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function defaultIdentity(a, b) {
        return a === b;
    }
    module.exports = function (oldObject, newObject) {
        var oldObjectClone, patches = [];
        oldObjectClone = canReflect.assignMap({}, oldObject);
        canReflect.eachKey(newObject, function (value, newProp) {
            if (!oldObject || !oldObject.hasOwnProperty(newProp)) {
                patches.push({
                    key: newProp,
                    type: 'add',
                    value: value
                });
            } else if (newObject[newProp] !== oldObject[newProp]) {
                patches.push({
                    key: newProp,
                    type: 'set',
                    value: value
                });
            }
            delete oldObjectClone[newProp];
        });
        for (var oldProp in oldObjectClone) {
            patches.push({
                key: oldProp,
                type: 'delete'
            });
        }
        return patches;
    };
});
/*can-route@4.3.0#src/register*/
define('can-route@4.3.0#src/register', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    './binding-proxy',
    './regexps',
    'can-diff/list/list',
    'can-diff/map/map'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var bindingProxy = require('./binding-proxy');
    var regexps = require('./regexps');
    var diff = require('can-diff/list/list');
    var diffObject = require('can-diff/map/map');
    var removeBackslash = function (str) {
        return str.replace(/\\/g, '');
    };
    var wrapQuote = function (str) {
        return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
    };
    var RouteRegistry = {
        routes: {},
        register: function registerRoute(url, defaults) {
            var root = bindingProxy.call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            defaults = defaults || {};
            var names = [], res, test = '', matcher, lastIndex, next, querySeparator = bindingProxy.call('querySeparator'), matchSlashes = bindingProxy.call('matchSlashes');
            if (regexps.colon.test(url)) {
                matcher = regexps.colon;
                if (process.env.NODE_ENV !== 'production') {
                    dev.warn('update route "' + url + '" to "' + url.replace(regexps.colon, function (name, key) {
                        return '{' + key + '}';
                    }) + '"');
                }
            } else {
                matcher = regexps.curlies;
            }
            lastIndex = matcher.lastIndex = 0;
            while (res = matcher.exec(url)) {
                names.push(res[1]);
                test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
                next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
                test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
                lastIndex = matcher.lastIndex;
            }
            test += url.substr(lastIndex).replace('\\', '');
            if (process.env.NODE_ENV !== 'production') {
                canReflect.eachKey(RouteRegistry.routes, function (r) {
                    var existingKeys = r.names.concat(Object.keys(r.defaults)).sort();
                    var keys = names.concat(Object.keys(defaults)).sort();
                    var sameMapKeys = !diff(existingKeys, keys).length;
                    var sameDefaultValues = !diffObject(r.defaults, defaults).length;
                    var matchingRoutesWithoutTrailingSlash = r.route.replace(/\/$/, '') === url.replace(/\/$/, '');
                    if (sameMapKeys && sameDefaultValues && !matchingRoutesWithoutTrailingSlash) {
                        dev.warn('two routes were registered with matching keys:\n' + '\t(1) route.register("' + r.route + '", ' + JSON.stringify(r.defaults) + ')\n' + '\t(2) route.register("' + url + '", ' + JSON.stringify(defaults) + ')\n' + '(1) will always be chosen since it was registered first');
                    }
                });
            }
            return RouteRegistry.routes[url] = {
                test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
                route: url,
                names: names,
                defaults: defaults,
                length: url.split('/').length
            };
        }
    };
    module.exports = RouteRegistry;
});
/*can-deparam@1.2.0#can-deparam*/
define('can-deparam@1.2.0#can-deparam', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, entityRegex = /%([^0-9a-f][0-9a-f]|[0-9a-f][^0-9a-f]|[^0-9a-f][^0-9a-f])/i, prep = function (str) {
            str = str.replace(/\+/g, ' ');
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return decodeURIComponent(str.replace(entityRegex, function (match, hex) {
                    return '%25' + hex;
                }));
            }
        };
    function isArrayLikeName(name) {
        return digitTest.test(name) || name === '[]';
    }
    function idenity(value) {
        return value;
    }
    module.exports = namespace.deparam = function (params, valueDeserializer) {
        valueDeserializer = valueDeserializer || idenity;
        var data = {}, pairs, lastPart;
        if (params && paramTest.test(params)) {
            pairs = params.split('&');
            pairs.forEach(function (pair) {
                var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                if (key) {
                    parts = key.match(keyBreaker);
                    for (var j = 0, l = parts.length - 1; j < l; j++) {
                        var currentName = parts[j], nextName = parts[j + 1], currentIsArray = isArrayLikeName(currentName) && current instanceof Array;
                        if (!current[currentName]) {
                            if (currentIsArray) {
                                current.push(isArrayLikeName(nextName) ? [] : {});
                            } else {
                                current[currentName] = isArrayLikeName(nextName) ? [] : {};
                            }
                        }
                        if (currentIsArray) {
                            current = current[current.length - 1];
                        } else {
                            current = current[currentName];
                        }
                    }
                    lastPart = parts.pop();
                    if (isArrayLikeName(lastPart)) {
                        current.push(valueDeserializer(value));
                    } else {
                        current[lastPart] = valueDeserializer(value);
                    }
                }
            });
        }
        return data;
    };
});
/*can-route@4.3.0#src/deparam*/
define('can-route@4.3.0#src/deparam', [
    'require',
    'exports',
    'module',
    'can-deparam',
    'can-reflect',
    './binding-proxy',
    './register'
], function (require, exports, module) {
    'use strict';
    var deparam = require('can-deparam');
    var canReflect = require('can-reflect');
    var bindingProxy = require('./binding-proxy');
    var register = require('./register');
    var decode = function (str) {
        try {
            return decodeURIComponent(str);
        } catch (ex) {
            return unescape(str);
        }
    };
    function toURLFragment(url) {
        var root = bindingProxy.call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        return url;
    }
    function canRoute_getRule(url) {
        url = toURLFragment(url);
        var route = { length: -1 };
        canReflect.eachKey(register.routes, function (temp, name) {
            if (temp.test.test(url) && temp.length > route.length) {
                route = temp;
            }
        });
        if (route.length > -1) {
            return route;
        }
    }
    function canRoute_deparam(url) {
        var route = canRoute_getRule(url), querySeparator = bindingProxy.call('querySeparator'), paramsMatcher = bindingProxy.call('paramsMatcher');
        url = toURLFragment(url);
        if (route) {
            var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? deparam(remainder.slice(1)) : {};
            obj = canReflect.assignDeep(canReflect.assignDeep({}, route.defaults), obj);
            parts.forEach(function (part, i) {
                if (part && part !== querySeparator) {
                    obj[route.names[i]] = decode(part);
                }
            });
            return obj;
        }
        if (url.charAt(0) !== querySeparator) {
            url = querySeparator + url;
        }
        return paramsMatcher.test(url) ? deparam(url.slice(1)) : {};
    }
    canRoute_deparam.getRule = canRoute_getRule;
    module.exports = canRoute_deparam;
});
/*can-param@1.1.0#can-param*/
define('can-param@1.1.0#can-param', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function buildParam(prefix, obj, add) {
        if (Array.isArray(obj)) {
            for (var i = 0, l = obj.length; i < l; ++i) {
                buildParam(prefix + '[]', obj[i], add);
            }
        } else if (obj && typeof obj === 'object') {
            for (var name in obj) {
                buildParam(prefix + '[' + name + ']', obj[name], add);
            }
        } else {
            add(prefix, obj);
        }
    }
    module.exports = namespace.param = function param(object) {
        var pairs = [], add = function (key, value) {
                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            };
        for (var name in object) {
            buildParam(name, object[name], add);
        }
        return pairs.join('&').replace(/%20/g, '+');
    };
});
/*can-route@4.3.0#src/param*/
define('can-route@4.3.0#src/param', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-param',
    './register',
    './regexps',
    './binding-proxy'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var param = require('can-param');
    var register = require('./register');
    var regexps = require('./regexps');
    var bindingProxy = require('./binding-proxy');
    var matchesData = function (route, data) {
        var count = 0, i = 0, defaults = {};
        for (var name in route.defaults) {
            if (route.defaults[name] === data[name]) {
                defaults[name] = 1;
                count++;
            }
        }
        for (; i < route.names.length; i++) {
            if (!data.hasOwnProperty(route.names[i])) {
                return -1;
            }
            if (!defaults[route.names[i]]) {
                count++;
            }
        }
        return count;
    };
    function getMatchedRoute(data, routeName) {
        var route, matches = 0, matchCount, propCount = 0;
        delete data.route;
        canReflect.eachKey(data, function () {
            propCount++;
        });
        canReflect.eachKey(register.routes, function (temp, name) {
            matchCount = matchesData(temp, data);
            if (matchCount > matches) {
                route = temp;
                matches = matchCount;
            }
            if (matchCount >= propCount) {
                return false;
            }
        });
        if (register.routes[routeName] && matchesData(register.routes[routeName], data) === matches) {
            route = register.routes[routeName];
        }
        return route;
    }
    function paramFromRoute(route, data) {
        var cpy, res, after, matcher;
        if (route) {
            cpy = canReflect.assignMap({}, data);
            matcher = regexps.colon.test(route.route) ? regexps.colon : regexps.curlies;
            res = route.route.replace(matcher, function (whole, name) {
                delete cpy[name];
                return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
            }).replace('\\', '');
            canReflect.eachKey(route.defaults, function (val, name) {
                if (cpy[name] === val) {
                    delete cpy[name];
                }
            });
            after = param(cpy);
            return res + (after ? bindingProxy.call('querySeparator') + after : '');
        }
        return canReflect.size(data) === 0 ? '' : bindingProxy.call('querySeparator') + param(data);
    }
    function canRoute_param(data, currentRouteName) {
        return paramFromRoute(getMatchedRoute(data, currentRouteName), data);
    }
    module.exports = canRoute_param;
    canRoute_param.paramFromRoute = paramFromRoute;
    canRoute_param.getMatchedRoute = getMatchedRoute;
});
/*can-route@4.3.0#src/url-helpers*/
define('can-route@4.3.0#src/url-helpers', [
    'require',
    'exports',
    'module',
    './binding-proxy',
    './deparam',
    './param',
    'can-reflect',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var bindingProxy = require('./binding-proxy');
    var routeDeparam = require('./deparam');
    var routeParam = require('./param');
    var canReflect = require('can-reflect');
    var string = require('can-string');
    var makeProps = function (props) {
        var tags = [];
        canReflect.eachKey(props, function (val, name) {
            tags.push((name === 'className' ? 'class' : name) + '="' + (name === 'href' ? val : string.esc(val)) + '"');
        });
        return tags.join(' ');
    };
    var matchCheck = function (source, matcher) {
        for (var prop in source) {
            var s = source[prop], m = matcher[prop];
            if (s && m && typeof s === 'object' && typeof matcher === 'object') {
                return matchCheck(s, m);
            }
            if (s != m) {
                return false;
            }
        }
        return true;
    };
    function canRoute_url(options, merge) {
        if (merge) {
            var baseOptions = routeDeparam(bindingProxy.call('can.getValue'));
            options = canReflect.assignMap(canReflect.assignMap({}, baseOptions), options);
        }
        return bindingProxy.call('root') + routeParam(options);
    }
    module.exports = {
        url: canRoute_url,
        link: function canRoute_link(name, options, props, merge) {
            return '<a ' + makeProps(canReflect.assignMap({ href: canRoute_url(options, merge) }, props)) + '>' + name + '</a>';
        },
        isCurrent: function canRoute_isCurrent(options, subsetMatch) {
            if (subsetMatch) {
                var baseOptions = routeDeparam(bindingProxy.call('can.getValue'));
                return matchCheck(options, baseOptions);
            } else {
                return bindingProxy.call('can.getValue') === routeParam(options);
            }
        }
    };
});
/*can-route-hash@1.0.0#can-route-hash*/
define('can-route-hash@1.0.0#can-route-hash', [
    'require',
    'exports',
    'module',
    'can-globals/location/location',
    'can-reflect',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-simple-observable',
    'can-dom-events'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var paramsMatcher = /^(?:&[^=]+=[^&]*)+/;
        var LOCATION = require('can-globals/location/location');
        var canReflect = require('can-reflect');
        var ObservationRecorder = require('can-observation-recorder');
        var queues = require('can-queues');
        var KeyTree = require('can-key-tree');
        var SimpleObservable = require('can-simple-observable');
        var domEvents = require('can-dom-events');
        function getHash() {
            var loc = LOCATION();
            return loc.href.split(/#!?/)[1] || '';
        }
        function HashchangeObservable() {
            var dispatchHandlers = this.dispatchHandlers.bind(this);
            var self = this;
            this._value = '';
            this.handlers = new KeyTree([
                Object,
                Array
            ], {
                onFirst: function () {
                    self._value = getHash();
                    domEvents.addEventListener(window, 'hashchange', dispatchHandlers);
                },
                onEmpty: function () {
                    domEvents.removeEventListener(window, 'hashchange', dispatchHandlers);
                }
            });
        }
        HashchangeObservable.prototype = Object.create(SimpleObservable.prototype);
        HashchangeObservable.constructor = HashchangeObservable;
        canReflect.assign(HashchangeObservable.prototype, {
            paramsMatcher: paramsMatcher,
            querySeparator: '&',
            matchSlashes: false,
            root: '#!',
            dispatchHandlers: function () {
                var old = this._value;
                this._value = getHash();
                if (old !== this._value) {
                    queues.enqueueByQueue(this.handlers.getNode([]), this, [
                        this._value,
                        old
                    ], null, [
                        canReflect.getName(this),
                        'changed to',
                        this._value,
                        'from',
                        old
                    ]);
                }
            },
            get: function () {
                ObservationRecorder.add(this);
                return getHash();
            },
            set: function (path) {
                var loc = LOCATION();
                if (!path && !loc.path) {
                } else if (loc.hash !== '#' + path) {
                    loc.hash = '!' + path;
                }
                return path;
            }
        });
        Object.defineProperty(HashchangeObservable.prototype, 'value', {
            get: function () {
                return canReflect.getValue(this);
            },
            set: function (value) {
                canReflect.setValue(this, value);
            }
        });
        canReflect.assignSymbols(HashchangeObservable.prototype, {
            'can.getValue': HashchangeObservable.prototype.get,
            'can.setValue': HashchangeObservable.prototype.set,
            'can.onValue': HashchangeObservable.prototype.on,
            'can.offValue': HashchangeObservable.prototype.off,
            'can.isMapLike': false,
            'can.valueHasDependencies': function () {
                return true;
            },
            'can.getName': function () {
                return 'HashchangeObservable<' + this._value + '>';
            }
        });
        module.exports = HashchangeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-web-worker/is-web-worker*/
define('can-globals@1.2.0#is-web-worker/is-web-worker', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        var funcConstructor = Function;
        globals.define('isWebWorker', function () {
            var global = funcConstructor('return this')();
            return typeof WorkerGlobalScope !== 'undefined' && global instanceof WorkerGlobalScope;
        });
        module.exports = globals.makeExport('isWebWorker');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route@4.3.0#can-route*/
define('can-route@4.3.0#can-route', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-queues',
    'can-observation',
    'can-namespace',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-simple-observable/make-compute/make-compute',
    'can-simple-map',
    './src/register',
    './src/url-helpers',
    './src/param',
    './src/deparam',
    './src/binding-proxy',
    'can-route-hash',
    'can-globals/is-web-worker/is-web-worker',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Bind = require('can-bind');
        var queues = require('can-queues');
        var Observation = require('can-observation');
        var namespace = require('can-namespace');
        var devLog = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var makeCompute = require('can-simple-observable/make-compute/make-compute');
        var SimpleMap = require('can-simple-map');
        var registerRoute = require('./src/register');
        var urlHelpers = require('./src/url-helpers');
        var routeParam = require('./src/param');
        var routeDeparam = require('./src/deparam');
        var bindingProxy = require('./src/binding-proxy');
        var Hashchange = require('can-route-hash');
        var isWebWorker = require('can-globals/is-web-worker/is-web-worker');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        var hashchangeObservable = new Hashchange();
        bindingProxy.bindings.hashchange = hashchangeObservable;
        bindingProxy.defaultBinding = 'hashchange';
        bindingProxy.urlDataObservable.value = hashchangeObservable;
        function canRoute(url, defaults) {
            if (process.env.NODE_ENV !== 'production') {
                devLog.warn('Call route.register(url,defaults) instead of calling route(url, defaults)');
            }
            registerRoute.register(url, defaults);
            return canRoute;
        }
        var timer;
        var currentRuleObservable = new Observation(function canRoute_matchedRoute() {
            var url = bindingProxy.call('can.getValue');
            return canRoute.rule(url);
        });
        function updateUrl(serializedData) {
            clearTimeout(timer);
            timer = setTimeout(function () {
                var serialized = canReflect.serialize(canRoute.data), currentRouteName = currentRuleObservable.get(), route = routeParam.getMatchedRoute(serialized, currentRouteName), path = routeParam.paramFromRoute(route, serialized);
                bindingProxy.call('can.setValue', path);
            }, 10);
        }
        function updateRouteData() {
            var hash = bindingProxy.call('can.getValue');
            queues.batch.start();
            var state = canRoute.deparam(hash);
            delete state.route;
            canReflect.update(canRoute.data, state);
            queues.batch.stop();
        }
        Object.defineProperty(canRoute, 'routes', {
            get: function () {
                return registerRoute.routes;
            },
            set: function (newVal) {
                return registerRoute.routes = newVal;
            }
        });
        Object.defineProperty(canRoute, 'defaultBinding', {
            get: function () {
                return bindingProxy.defaultBinding;
            },
            set: function (newVal) {
                bindingProxy.defaultBinding = newVal;
                var observable = bindingProxy.bindings[bindingProxy.defaultBinding];
                if (observable) {
                    bindingProxy.urlDataObservable.value = observable;
                }
            }
        });
        Object.defineProperty(canRoute, 'urlData', {
            get: function () {
                return bindingProxy.urlDataObservable.value;
            },
            set: function (newVal) {
                canRoute._teardown();
                bindingProxy.urlDataObservable.value = newVal;
            }
        });
        canReflect.assignMap(canRoute, {
            param: routeParam,
            deparam: routeDeparam,
            map: function (data) {
                if (process.env.NODE_ENV !== 'production') {
                    devLog.warn('Set route.data directly instead of calling route.map');
                }
                canRoute.data = data;
            },
            start: function (val) {
                if (val !== true) {
                    canRoute._setup();
                    if (isBrowserWindow() || isWebWorker()) {
                        var hash = bindingProxy.call('can.getValue');
                        queues.batch.start();
                        var state = canRoute.deparam(hash);
                        delete state.route;
                        canReflect.assign(canRoute.data, state);
                        queues.batch.stop();
                        updateUrl();
                    }
                }
                return canRoute;
            },
            url: urlHelpers.url,
            link: urlHelpers.link,
            isCurrent: urlHelpers.isCurrent,
            bindings: bindingProxy.bindings,
            _setup: function () {
                if (!canRoute._canBinding) {
                    var bindingOptions = {
                        parent: bindingProxy.urlDataObservable.value,
                        setParent: updateUrl,
                        child: canRoute.serializedObservation,
                        setChild: updateRouteData,
                        onInitDoNotUpdateChild: true,
                        cycles: 1,
                        queue: 'notify'
                    };
                    if (process.env.NODE_ENV !== 'production') {
                        bindingOptions.updateChildName = 'can-route.updateRouteData';
                        bindingOptions.updateParentName = 'can-route.updateUrl';
                    }
                    canRoute._canBinding = new Bind(bindingOptions);
                    canRoute._canBinding.start();
                }
            },
            _teardown: function () {
                if (canRoute._canBinding) {
                    canRoute._canBinding.stop();
                    canRoute._canBinding = null;
                }
                clearTimeout(timer);
            },
            stop: function () {
                this._teardown();
                return canRoute;
            },
            currentRule: makeCompute(currentRuleObservable),
            register: registerRoute.register,
            rule: function (url) {
                var rule = routeDeparam.getRule(url);
                if (rule) {
                    return rule.route;
                }
            }
        });
        var bindToCanRouteData = function (name, args) {
            if (!canRoute.data[name]) {
                return canRoute.data.addEventListener.apply(canRoute.data, args);
            }
            return canRoute.data[name].apply(canRoute.data, args);
        };
        [
            'addEventListener',
            'removeEventListener',
            'bind',
            'unbind',
            'on',
            'off'
        ].forEach(function (name) {
            canRoute[name] = function (eventName, handler) {
                if (eventName === '__url') {
                    return bindingProxy.call('can.onValue', handler);
                }
                return bindToCanRouteData(name, arguments);
            };
        });
        [
            'delegate',
            'undelegate',
            'removeAttr',
            'compute',
            '_get',
            '___get',
            'each'
        ].forEach(function (name) {
            canRoute[name] = function () {
                return bindToCanRouteData(name, arguments);
            };
        });
        var routeData;
        var setRouteData = function (data) {
            routeData = data;
            return routeData;
        };
        var serializedObservation;
        var serializedCompute;
        Object.defineProperty(canRoute, 'serializedObservation', {
            get: function () {
                if (!serializedObservation) {
                    serializedObservation = new Observation(function canRoute_data_serialized() {
                        return canReflect.serialize(canRoute.data);
                    });
                }
                return serializedObservation;
            }
        });
        Object.defineProperty(canRoute, 'serializedCompute', {
            get: function () {
                if (!serializedCompute) {
                    serializedCompute = makeCompute(canRoute.serializedObservation);
                }
                return serializedCompute;
            }
        });
        var stringify = function (obj) {
            if (obj && typeof obj === 'object') {
                if (obj && typeof obj === 'object' && 'serialize' in obj) {
                    obj = obj.serialize();
                } else {
                    obj = typeof obj.slice === 'function' ? obj.slice() : canReflect.assign({}, obj);
                }
                canReflect.eachKey(obj, function (val, prop) {
                    obj[prop] = stringify(val);
                });
            } else if (obj !== undefined && obj !== null && typeof obj.toString === 'function') {
                obj = obj.toString();
            }
            return obj;
        };
        var stringCoercingMapDecorator = function (map) {
            var sym = canSymbol.for('can.route.stringCoercingMapDecorator');
            if (!map.attr[sym]) {
                var attrSuper = map.attr;
                map.attr = function (prop, val) {
                    var serializable = this.define === undefined || this.define[prop] === undefined || !!this.define[prop].serialize, args;
                    if (serializable) {
                        args = stringify(Array.apply(null, arguments));
                    } else {
                        args = arguments;
                    }
                    return attrSuper.apply(this, args);
                };
                canReflect.setKeyValue(map.attr, sym, true);
            }
            return map;
        };
        var viewModelSymbol = canSymbol.for('can.viewModel');
        Object.defineProperty(canRoute, 'data', {
            get: function () {
                if (routeData) {
                    return routeData;
                } else {
                    return setRouteData(stringCoercingMapDecorator(new SimpleMap()));
                }
            },
            set: function (data) {
                if (canReflect.isConstructorLike(data)) {
                    data = new data();
                }
                if (data && data[viewModelSymbol] !== undefined) {
                    data = data[viewModelSymbol];
                }
                if ('attr' in data) {
                    setRouteData(stringCoercingMapDecorator(data));
                } else {
                    setRouteData(data);
                }
            }
        });
        canRoute.attr = function (prop, value) {
            console.warn('can-route: can-route.attr is deprecated. Use methods on can-route.data instead.');
            if ('attr' in canRoute.data) {
                return canRoute.data.attr.apply(canRoute.data, arguments);
            } else {
                if (arguments.length > 1) {
                    canReflect.setKeyValue(canRoute.data, prop, value);
                    return canRoute.data;
                } else if (typeof prop === 'object') {
                    canReflect.assignDeep(canRoute.data, prop);
                    return canRoute.data;
                } else if (arguments.length === 1) {
                    return canReflect.getKeyValue(canRoute.data, prop);
                } else {
                    return canReflect.unwrap(canRoute.data);
                }
            }
        };
        canReflect.setKeyValue(canRoute, canSymbol.for('can.isFunctionLike'), false);
        canRoute.matched = canRoute.currentRule;
        canRoute.current = canRoute.isCurrent;
        module.exports = namespace.route = canRoute;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-route-helpers@1.1.0#can-stache-route-helpers*/
define('can-stache-route-helpers@1.1.0#can-stache-route-helpers', [
    'require',
    'exports',
    'module',
    'can-stache/helpers/core',
    'can-route',
    'can-stache/src/expression',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var helpers = require('can-stache/helpers/core');
    var route = require('can-route');
    var stacheExpression = require('can-stache/src/expression');
    var canReflect = require('can-reflect');
    var looksLikeOptions = helpers.looksLikeOptions;
    var calculateArgs = function () {
        var finalParams, finalMerge, optionsArg;
        canReflect.eachIndex(arguments, function (arg) {
            if (typeof arg === 'boolean') {
                finalMerge = arg;
            } else if (arg && typeof arg === 'object') {
                if (!looksLikeOptions(arg)) {
                    finalParams = helpers.resolveHash(arg);
                } else {
                    optionsArg = arg;
                }
            }
        });
        if (!finalParams && optionsArg) {
            finalParams = helpers.resolveHash(optionsArg.hash);
        }
        return {
            finalParams: finalParams || {},
            finalMerge: finalMerge,
            optionsArg: optionsArg
        };
    };
    helpers.registerHelper('routeUrl', function () {
        var args = calculateArgs.apply(this, arguments);
        return route.url(args.finalParams, typeof args.finalMerge === 'boolean' ? args.finalMerge : undefined);
    });
    var routeCurrent = function () {
        var args = calculateArgs.apply(this, arguments);
        var result = route.current(args.finalParams, typeof args.finalMerge === 'boolean' ? args.finalMerge : undefined);
        if (args.optionsArg && !(args.optionsArg instanceof stacheExpression.Call)) {
            if (result) {
                return args.optionsArg.fn();
            } else {
                return args.optionsArg.inverse();
            }
        } else {
            return result;
        }
    };
    routeCurrent.callAsMethod = true;
    helpers.registerHelper('routeCurrent', routeCurrent);
});
/*i18next@11.4.0#dist/commonjs/logger*/
define('i18next@11.4.0#dist/commonjs/logger', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        } else {
            return Array.from(arr);
        }
    }
    var consoleLogger = {
        type: 'logger',
        log: function log(args) {
            this.output('log', args);
        },
        warn: function warn(args) {
            this.output('warn', args);
        },
        error: function error(args) {
            this.output('error', args);
        },
        output: function output(type, args) {
            var _console;
            if (console && console[type])
                (_console = console)[type].apply(_console, _toConsumableArray(args));
        }
    };
    var Logger = function () {
        function Logger(concreteLogger) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Logger);
            this.init(concreteLogger, options);
        }
        Logger.prototype.init = function init(concreteLogger) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.prefix = options.prefix || 'i18next:';
            this.logger = concreteLogger || consoleLogger;
            this.options = options;
            this.debug = options.debug;
        };
        Logger.prototype.setDebug = function setDebug(bool) {
            this.debug = bool;
        };
        Logger.prototype.log = function log() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return this.forward(args, 'log', '', true);
        };
        Logger.prototype.warn = function warn() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }
            return this.forward(args, 'warn', '', true);
        };
        Logger.prototype.error = function error() {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }
            return this.forward(args, 'error', '');
        };
        Logger.prototype.deprecate = function deprecate() {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }
            return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
        };
        Logger.prototype.forward = function forward(args, lvl, prefix, debugOnly) {
            if (debugOnly && !this.debug)
                return null;
            if (typeof args[0] === 'string')
                args[0] = '' + prefix + this.prefix + ' ' + args[0];
            return this.logger[lvl](args);
        };
        Logger.prototype.create = function create(moduleName) {
            return new Logger(this.logger, _extends({ prefix: this.prefix + ':' + moduleName + ':' }, this.options));
        };
        return Logger;
    }();
    exports.default = new Logger();
});
/*i18next@11.4.0#dist/commonjs/EventEmitter*/
define('i18next@11.4.0#dist/commonjs/EventEmitter', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var EventEmitter = function () {
        function EventEmitter() {
            _classCallCheck(this, EventEmitter);
            this.observers = {};
        }
        EventEmitter.prototype.on = function on(events, listener) {
            var _this = this;
            events.split(' ').forEach(function (event) {
                _this.observers[event] = _this.observers[event] || [];
                _this.observers[event].push(listener);
            });
        };
        EventEmitter.prototype.off = function off(event, listener) {
            var _this2 = this;
            if (!this.observers[event]) {
                return;
            }
            this.observers[event].forEach(function () {
                if (!listener) {
                    delete _this2.observers[event];
                } else {
                    var index = _this2.observers[event].indexOf(listener);
                    if (index > -1) {
                        _this2.observers[event].splice(index, 1);
                    }
                }
            });
        };
        EventEmitter.prototype.emit = function emit(event) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }
            if (this.observers[event]) {
                var cloned = [].concat(this.observers[event]);
                cloned.forEach(function (observer) {
                    observer.apply(undefined, args);
                });
            }
            if (this.observers['*']) {
                var _cloned = [].concat(this.observers['*']);
                _cloned.forEach(function (observer) {
                    observer.apply(observer, [event].concat(args));
                });
            }
        };
        return EventEmitter;
    }();
    exports.default = EventEmitter;
});
/*i18next@11.4.0#dist/commonjs/utils*/
define('i18next@11.4.0#dist/commonjs/utils', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.makeString = makeString;
    exports.copy = copy;
    exports.setPath = setPath;
    exports.pushPath = pushPath;
    exports.getPath = getPath;
    exports.deepExtend = deepExtend;
    exports.regexEscape = regexEscape;
    exports.escape = escape;
    function makeString(object) {
        if (object == null)
            return '';
        return '' + object;
    }
    function copy(a, s, t) {
        a.forEach(function (m) {
            if (s[m])
                t[m] = s[m];
        });
    }
    function getLastOfPath(object, path, Empty) {
        function cleanKey(key) {
            return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
        }
        function canNotTraverseDeeper() {
            return !object || typeof object === 'string';
        }
        var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
        while (stack.length > 1) {
            if (canNotTraverseDeeper())
                return {};
            var key = cleanKey(stack.shift());
            if (!object[key] && Empty)
                object[key] = new Empty();
            object = object[key];
        }
        if (canNotTraverseDeeper())
            return {};
        return {
            obj: object,
            k: cleanKey(stack.shift())
        };
    }
    function setPath(object, path, newValue) {
        var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
        obj[k] = newValue;
    }
    function pushPath(object, path, newValue, concat) {
        var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
        obj[k] = obj[k] || [];
        if (concat)
            obj[k] = obj[k].concat(newValue);
        if (!concat)
            obj[k].push(newValue);
    }
    function getPath(object, path) {
        var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
        if (!obj)
            return undefined;
        return obj[k];
    }
    function deepExtend(target, source, overwrite) {
        for (var prop in source) {
            if (prop in target) {
                if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                    if (overwrite)
                        target[prop] = source[prop];
                } else {
                    deepExtend(target[prop], source[prop], overwrite);
                }
            } else {
                target[prop] = source[prop];
            }
        }
        return target;
    }
    function regexEscape(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    }
    var _entityMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;',
        '/': '&#x2F;'
    };
    function escape(data) {
        if (typeof data === 'string') {
            return data.replace(/[&<>"'\/]/g, function (s) {
                return _entityMap[s];
            });
        }
        return data;
    }
});
/*i18next@11.4.0#dist/commonjs/ResourceStore*/
define('i18next@11.4.0#dist/commonjs/ResourceStore', [
    'require',
    'exports',
    'module',
    './EventEmitter.js',
    './utils.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _EventEmitter2 = require('./EventEmitter.js');
    var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
    var _utils = require('./utils.js');
    var utils = _interopRequireWildcard(_utils);
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);
            if (value && value.configurable && obj[key] === undefined) {
                Object.defineProperty(obj, key, value);
            }
        }
        return obj;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
    }
    var ResourceStore = function (_EventEmitter) {
        _inherits(ResourceStore, _EventEmitter);
        function ResourceStore(data) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                ns: ['translation'],
                defaultNS: 'translation'
            };
            _classCallCheck(this, ResourceStore);
            var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
            _this.data = data || {};
            _this.options = options;
            if (_this.options.keySeparator === undefined) {
                _this.options.keySeparator = '.';
            }
            return _this;
        }
        ResourceStore.prototype.addNamespaces = function addNamespaces(ns) {
            if (this.options.ns.indexOf(ns) < 0) {
                this.options.ns.push(ns);
            }
        };
        ResourceStore.prototype.removeNamespaces = function removeNamespaces(ns) {
            var index = this.options.ns.indexOf(ns);
            if (index > -1) {
                this.options.ns.splice(index, 1);
            }
        };
        ResourceStore.prototype.getResource = function getResource(lng, ns, key) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            var path = [
                lng,
                ns
            ];
            if (key && typeof key !== 'string')
                path = path.concat(key);
            if (key && typeof key === 'string')
                path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
            }
            return utils.getPath(this.data, path);
        };
        ResourceStore.prototype.addResource = function addResource(lng, ns, key, value) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { silent: false };
            var keySeparator = this.options.keySeparator;
            if (keySeparator === undefined)
                keySeparator = '.';
            var path = [
                lng,
                ns
            ];
            if (key)
                path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                value = ns;
                ns = path[1];
            }
            this.addNamespaces(ns);
            utils.setPath(this.data, path, value);
            if (!options.silent)
                this.emit('added', lng, ns, key, value);
        };
        ResourceStore.prototype.addResources = function addResources(lng, ns, resources) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { silent: false };
            for (var m in resources) {
                if (typeof resources[m] === 'string')
                    this.addResource(lng, ns, m, resources[m], { silent: true });
            }
            if (!options.silent)
                this.emit('added', lng, ns, resources);
        };
        ResourceStore.prototype.addResourceBundle = function addResourceBundle(lng, ns, resources, deep, overwrite) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : { silent: false };
            var path = [
                lng,
                ns
            ];
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                deep = resources;
                resources = ns;
                ns = path[1];
            }
            this.addNamespaces(ns);
            var pack = utils.getPath(this.data, path) || {};
            if (deep) {
                utils.deepExtend(pack, resources, overwrite);
            } else {
                pack = _extends({}, pack, resources);
            }
            utils.setPath(this.data, path, pack);
            if (!options.silent)
                this.emit('added', lng, ns, resources);
        };
        ResourceStore.prototype.removeResourceBundle = function removeResourceBundle(lng, ns) {
            if (this.hasResourceBundle(lng, ns)) {
                delete this.data[lng][ns];
            }
            this.removeNamespaces(ns);
            this.emit('removed', lng, ns);
        };
        ResourceStore.prototype.hasResourceBundle = function hasResourceBundle(lng, ns) {
            return this.getResource(lng, ns) !== undefined;
        };
        ResourceStore.prototype.getResourceBundle = function getResourceBundle(lng, ns) {
            if (!ns)
                ns = this.options.defaultNS;
            if (this.options.compatibilityAPI === 'v1')
                return _extends({}, this.getResource(lng, ns));
            return this.getResource(lng, ns);
        };
        ResourceStore.prototype.toJSON = function toJSON() {
            return this.data;
        };
        return ResourceStore;
    }(_EventEmitter3.default);
    exports.default = ResourceStore;
});
/*i18next@11.4.0#dist/commonjs/postProcessor*/
define('i18next@11.4.0#dist/commonjs/postProcessor', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.default = {
        processors: {},
        addPostProcessor: function addPostProcessor(module) {
            this.processors[module.name] = module;
        },
        handle: function handle(processors, value, key, options, translator) {
            var _this = this;
            processors.forEach(function (processor) {
                if (_this.processors[processor])
                    value = _this.processors[processor].process(value, key, options, translator);
            });
            return value;
        }
    };
});
/*i18next@11.4.0#dist/commonjs/Translator*/
define('i18next@11.4.0#dist/commonjs/Translator', [
    'require',
    'exports',
    'module',
    './logger.js',
    './EventEmitter.js',
    './postProcessor.js',
    './utils.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    var _EventEmitter2 = require('./EventEmitter.js');
    var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
    var _postProcessor = require('./postProcessor.js');
    var _postProcessor2 = _interopRequireDefault(_postProcessor);
    var _utils = require('./utils.js');
    var utils = _interopRequireWildcard(_utils);
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);
            if (value && value.configurable && obj[key] === undefined) {
                Object.defineProperty(obj, key, value);
            }
        }
        return obj;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
    }
    var Translator = function (_EventEmitter) {
        _inherits(Translator, _EventEmitter);
        function Translator(services) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Translator);
            var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
            utils.copy([
                'resourceStore',
                'languageUtils',
                'pluralResolver',
                'interpolator',
                'backendConnector',
                'i18nFormat'
            ], services, _this);
            _this.options = options;
            if (_this.options.keySeparator === undefined) {
                _this.options.keySeparator = '.';
            }
            _this.logger = _logger2.default.create('translator');
            return _this;
        }
        Translator.prototype.changeLanguage = function changeLanguage(lng) {
            if (lng)
                this.language = lng;
        };
        Translator.prototype.exists = function exists(key) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { interpolation: {} };
            var resolved = this.resolve(key, options);
            return resolved && resolved.res !== undefined;
        };
        Translator.prototype.extractFromKey = function extractFromKey(key, options) {
            var nsSeparator = options.nsSeparator || this.options.nsSeparator;
            if (nsSeparator === undefined)
                nsSeparator = ':';
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            var namespaces = options.ns || this.options.defaultNS;
            if (nsSeparator && key.indexOf(nsSeparator) > -1) {
                var parts = key.split(nsSeparator);
                if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
                    namespaces = parts.shift();
                key = parts.join(keySeparator);
            }
            if (typeof namespaces === 'string')
                namespaces = [namespaces];
            return {
                key: key,
                namespaces: namespaces
            };
        };
        Translator.prototype.translate = function translate(keys, options) {
            var _this2 = this;
            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' && this.options.overloadTranslationOptionHandler) {
                options = this.options.overloadTranslationOptionHandler(arguments);
            }
            if (!options)
                options = {};
            if (keys === undefined || keys === null || keys === '')
                return '';
            if (typeof keys === 'number')
                keys = String(keys);
            if (typeof keys === 'string')
                keys = [keys];
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            var _extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _extractFromKey.key, namespaces = _extractFromKey.namespaces;
            var namespace = namespaces[namespaces.length - 1];
            var lng = options.lng || this.language;
            var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
            if (lng && lng.toLowerCase() === 'cimode') {
                if (appendNamespaceToCIMode) {
                    var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                    return namespace + nsSeparator + key;
                }
                return key;
            }
            var resolved = this.resolve(keys, options);
            var res = resolved && resolved.res;
            var resUsedKey = resolved && resolved.usedKey || key;
            var resType = Object.prototype.toString.apply(res);
            var noObject = [
                '[object Number]',
                '[object Function]',
                '[object RegExp]'
            ];
            var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
            var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
            if (res && handleAsObject && noObject.indexOf(resType) < 0 && !(joinArrays && resType === '[object Array]')) {
                if (!options.returnObjects && !this.options.returnObjects) {
                    this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                    return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : 'key \'' + key + ' (' + this.language + ')\' returned an object instead of string.';
                }
                if (keySeparator) {
                    var copy = resType === '[object Array]' ? [] : {};
                    for (var m in res) {
                        if (Object.prototype.hasOwnProperty.call(res, m)) {
                            var deepKey = '' + resUsedKey + keySeparator + m;
                            copy[m] = this.translate(deepKey, _extends({}, options, {
                                joinArrays: false,
                                ns: namespaces
                            }));
                            if (copy[m] === deepKey)
                                copy[m] = res[m];
                        }
                    }
                    res = copy;
                }
            } else if (joinArrays && resType === '[object Array]') {
                res = res.join(joinArrays);
                if (res)
                    res = this.extendTranslation(res, keys, options);
            } else {
                var usedDefault = false;
                var usedKey = false;
                if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
                    usedDefault = true;
                    res = options.defaultValue;
                }
                if (!this.isValidLookup(res)) {
                    usedKey = true;
                    res = key;
                }
                var updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;
                if (usedKey || usedDefault || updateMissing) {
                    this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? options.defaultValue : res);
                    var lngs = [];
                    var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                    if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                        for (var i = 0; i < fallbackLngs.length; i++) {
                            lngs.push(fallbackLngs[i]);
                        }
                    } else if (this.options.saveMissingTo === 'all') {
                        lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                    } else {
                        lngs.push(options.lng || this.language);
                    }
                    var send = function send(l, k) {
                        if (_this2.options.missingKeyHandler) {
                            _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
                        } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                            _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
                        }
                        _this2.emit('missingKey', l, namespace, k, res);
                    };
                    if (this.options.saveMissing) {
                        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                        if (this.options.saveMissingPlurals && needsPluralHandling) {
                            lngs.forEach(function (l) {
                                var plurals = _this2.pluralResolver.getPluralFormsOfKey(l, key);
                                plurals.forEach(function (p) {
                                    return send([l], p);
                                });
                            });
                        } else {
                            send(lngs, key);
                        }
                    }
                }
                res = this.extendTranslation(res, keys, options, resolved);
                if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
                    res = namespace + ':' + key;
                if (usedKey && this.options.parseMissingKeyHandler)
                    res = this.options.parseMissingKeyHandler(res);
            }
            return res;
        };
        Translator.prototype.extendTranslation = function extendTranslation(res, key, options, resolved) {
            var _this3 = this;
            if (this.i18nFormat && this.i18nFormat.parse) {
                res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, { resolved: resolved });
            } else if (!options.skipInterpolation) {
                if (options.interpolation)
                    this.interpolator.init(_extends({}, options, { interpolation: _extends({}, this.options.interpolation, options.interpolation) }));
                var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
                if (this.options.interpolation.defaultVariables)
                    data = _extends({}, this.options.interpolation.defaultVariables, data);
                res = this.interpolator.interpolate(res, data, options.lng || this.language);
                if (options.nest !== false)
                    res = this.interpolator.nest(res, function () {
                        return _this3.translate.apply(_this3, arguments);
                    }, options);
                if (options.interpolation)
                    this.interpolator.reset();
            }
            var postProcess = options.postProcess || this.options.postProcess;
            var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
            if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                res = _postProcessor2.default.handle(postProcessorNames, res, key, options, this);
            }
            return res;
        };
        Translator.prototype.resolve = function resolve(keys) {
            var _this4 = this;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var found = void 0;
            var usedKey = void 0;
            var usedLng = void 0;
            var usedNS = void 0;
            if (typeof keys === 'string')
                keys = [keys];
            keys.forEach(function (k) {
                if (_this4.isValidLookup(found))
                    return;
                var extracted = _this4.extractFromKey(k, options);
                var key = extracted.key;
                usedKey = key;
                var namespaces = extracted.namespaces;
                if (_this4.options.fallbackNS)
                    namespaces = namespaces.concat(_this4.options.fallbackNS);
                var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
                var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language);
                namespaces.forEach(function (ns) {
                    if (_this4.isValidLookup(found))
                        return;
                    usedNS = ns;
                    codes.forEach(function (code) {
                        if (_this4.isValidLookup(found))
                            return;
                        usedLng = code;
                        var finalKey = key;
                        var finalKeys = [finalKey];
                        if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                            _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                        } else {
                            var pluralSuffix = void 0;
                            if (needsPluralHandling)
                                pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
                            if (needsPluralHandling && needsContextHandling)
                                finalKeys.push(finalKey + pluralSuffix);
                            if (needsContextHandling)
                                finalKeys.push(finalKey += '' + _this4.options.contextSeparator + options.context);
                            if (needsPluralHandling)
                                finalKeys.push(finalKey += pluralSuffix);
                        }
                        var possibleKey = void 0;
                        while (possibleKey = finalKeys.pop()) {
                            if (!_this4.isValidLookup(found)) {
                                found = _this4.getResource(code, ns, possibleKey, options);
                            }
                        }
                    });
                });
            });
            return {
                res: found,
                usedKey: usedKey,
                usedLng: usedLng,
                usedNS: usedNS
            };
        };
        Translator.prototype.isValidLookup = function isValidLookup(res) {
            return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
        };
        Translator.prototype.getResource = function getResource(code, ns, key) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            return this.resourceStore.getResource(code, ns, key, options);
        };
        return Translator;
    }(_EventEmitter3.default);
    exports.default = Translator;
});
/*i18next@11.4.0#dist/commonjs/LanguageUtils*/
define('i18next@11.4.0#dist/commonjs/LanguageUtils', [
    'require',
    'exports',
    'module',
    './logger.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    var LanguageUtil = function () {
        function LanguageUtil(options) {
            _classCallCheck(this, LanguageUtil);
            this.options = options;
            this.whitelist = this.options.whitelist || false;
            this.logger = _logger2.default.create('languageUtils');
        }
        LanguageUtil.prototype.getScriptPartFromCode = function getScriptPartFromCode(code) {
            if (!code || code.indexOf('-') < 0)
                return null;
            var p = code.split('-');
            if (p.length === 2)
                return null;
            p.pop();
            return this.formatLanguageCode(p.join('-'));
        };
        LanguageUtil.prototype.getLanguagePartFromCode = function getLanguagePartFromCode(code) {
            if (!code || code.indexOf('-') < 0)
                return code;
            var p = code.split('-');
            return this.formatLanguageCode(p[0]);
        };
        LanguageUtil.prototype.formatLanguageCode = function formatLanguageCode(code) {
            if (typeof code === 'string' && code.indexOf('-') > -1) {
                var specialCases = [
                    'hans',
                    'hant',
                    'latn',
                    'cyrl',
                    'cans',
                    'mong',
                    'arab'
                ];
                var p = code.split('-');
                if (this.options.lowerCaseLng) {
                    p = p.map(function (part) {
                        return part.toLowerCase();
                    });
                } else if (p.length === 2) {
                    p[0] = p[0].toLowerCase();
                    p[1] = p[1].toUpperCase();
                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                        p[1] = capitalize(p[1].toLowerCase());
                } else if (p.length === 3) {
                    p[0] = p[0].toLowerCase();
                    if (p[1].length === 2)
                        p[1] = p[1].toUpperCase();
                    if (p[0] !== 'sgn' && p[2].length === 2)
                        p[2] = p[2].toUpperCase();
                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                        p[1] = capitalize(p[1].toLowerCase());
                    if (specialCases.indexOf(p[2].toLowerCase()) > -1)
                        p[2] = capitalize(p[2].toLowerCase());
                }
                return p.join('-');
            }
            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
        };
        LanguageUtil.prototype.isWhitelisted = function isWhitelisted(code) {
            if (this.options.load === 'languageOnly' || this.options.nonExplicitWhitelist) {
                code = this.getLanguagePartFromCode(code);
            }
            return !this.whitelist || !this.whitelist.length || this.whitelist.indexOf(code) > -1;
        };
        LanguageUtil.prototype.getFallbackCodes = function getFallbackCodes(fallbacks, code) {
            if (!fallbacks)
                return [];
            if (typeof fallbacks === 'string')
                fallbacks = [fallbacks];
            if (Object.prototype.toString.apply(fallbacks) === '[object Array]')
                return fallbacks;
            if (!code)
                return fallbacks.default || [];
            var found = fallbacks[code];
            if (!found)
                found = fallbacks[this.getScriptPartFromCode(code)];
            if (!found)
                found = fallbacks[this.formatLanguageCode(code)];
            if (!found)
                found = fallbacks.default;
            return found || [];
        };
        LanguageUtil.prototype.toResolveHierarchy = function toResolveHierarchy(code, fallbackCode) {
            var _this = this;
            var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
            var codes = [];
            var addCode = function addCode(c) {
                if (!c)
                    return;
                if (_this.isWhitelisted(c)) {
                    codes.push(c);
                } else {
                    _this.logger.warn('rejecting non-whitelisted language code: ' + c);
                }
            };
            if (typeof code === 'string' && code.indexOf('-') > -1) {
                if (this.options.load !== 'languageOnly')
                    addCode(this.formatLanguageCode(code));
                if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly')
                    addCode(this.getScriptPartFromCode(code));
                if (this.options.load !== 'currentOnly')
                    addCode(this.getLanguagePartFromCode(code));
            } else if (typeof code === 'string') {
                addCode(this.formatLanguageCode(code));
            }
            fallbackCodes.forEach(function (fc) {
                if (codes.indexOf(fc) < 0)
                    addCode(_this.formatLanguageCode(fc));
            });
            return codes;
        };
        return LanguageUtil;
    }();
    exports.default = LanguageUtil;
});
/*i18next@11.4.0#dist/commonjs/PluralResolver*/
define('i18next@11.4.0#dist/commonjs/PluralResolver', [
    'require',
    'exports',
    'module',
    './logger.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var sets = [
        {
            lngs: [
                'ach',
                'ak',
                'am',
                'arn',
                'br',
                'fil',
                'gun',
                'ln',
                'mfe',
                'mg',
                'mi',
                'oc',
                'pt',
                'pt-BR',
                'tg',
                'ti',
                'tr',
                'uz',
                'wa'
            ],
            nr: [
                1,
                2
            ],
            fc: 1
        },
        {
            lngs: [
                'af',
                'an',
                'ast',
                'az',
                'bg',
                'bn',
                'ca',
                'da',
                'de',
                'dev',
                'el',
                'en',
                'eo',
                'es',
                'et',
                'eu',
                'fi',
                'fo',
                'fur',
                'fy',
                'gl',
                'gu',
                'ha',
                'he',
                'hi',
                'hu',
                'hy',
                'ia',
                'it',
                'kn',
                'ku',
                'lb',
                'mai',
                'ml',
                'mn',
                'mr',
                'nah',
                'nap',
                'nb',
                'ne',
                'nl',
                'nn',
                'no',
                'nso',
                'pa',
                'pap',
                'pms',
                'ps',
                'pt-PT',
                'rm',
                'sco',
                'se',
                'si',
                'so',
                'son',
                'sq',
                'sv',
                'sw',
                'ta',
                'te',
                'tk',
                'ur',
                'yo'
            ],
            nr: [
                1,
                2
            ],
            fc: 2
        },
        {
            lngs: [
                'ay',
                'bo',
                'cgg',
                'fa',
                'id',
                'ja',
                'jbo',
                'ka',
                'kk',
                'km',
                'ko',
                'ky',
                'lo',
                'ms',
                'sah',
                'su',
                'th',
                'tt',
                'ug',
                'vi',
                'wo',
                'zh'
            ],
            nr: [1],
            fc: 3
        },
        {
            lngs: [
                'be',
                'bs',
                'dz',
                'hr',
                'ru',
                'sr',
                'uk'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 4
        },
        {
            lngs: ['ar'],
            nr: [
                0,
                1,
                2,
                3,
                11,
                100
            ],
            fc: 5
        },
        {
            lngs: [
                'cs',
                'sk'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 6
        },
        {
            lngs: [
                'csb',
                'pl'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 7
        },
        {
            lngs: ['cy'],
            nr: [
                1,
                2,
                3,
                8
            ],
            fc: 8
        },
        {
            lngs: ['fr'],
            nr: [
                1,
                2
            ],
            fc: 9
        },
        {
            lngs: ['ga'],
            nr: [
                1,
                2,
                3,
                7,
                11
            ],
            fc: 10
        },
        {
            lngs: ['gd'],
            nr: [
                1,
                2,
                3,
                20
            ],
            fc: 11
        },
        {
            lngs: ['is'],
            nr: [
                1,
                2
            ],
            fc: 12
        },
        {
            lngs: ['jv'],
            nr: [
                0,
                1
            ],
            fc: 13
        },
        {
            lngs: ['kw'],
            nr: [
                1,
                2,
                3,
                4
            ],
            fc: 14
        },
        {
            lngs: ['lt'],
            nr: [
                1,
                2,
                10
            ],
            fc: 15
        },
        {
            lngs: ['lv'],
            nr: [
                1,
                2,
                0
            ],
            fc: 16
        },
        {
            lngs: ['mk'],
            nr: [
                1,
                2
            ],
            fc: 17
        },
        {
            lngs: ['mnk'],
            nr: [
                0,
                1,
                2
            ],
            fc: 18
        },
        {
            lngs: ['mt'],
            nr: [
                1,
                2,
                11,
                20
            ],
            fc: 19
        },
        {
            lngs: ['or'],
            nr: [
                2,
                1
            ],
            fc: 2
        },
        {
            lngs: ['ro'],
            nr: [
                1,
                2,
                20
            ],
            fc: 20
        },
        {
            lngs: ['sl'],
            nr: [
                5,
                1,
                2,
                3
            ],
            fc: 21
        }
    ];
    var _rulesPluralsTypes = {
        1: function _(n) {
            return Number(n > 1);
        },
        2: function _(n) {
            return Number(n != 1);
        },
        3: function _(n) {
            return 0;
        },
        4: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        5: function _(n) {
            return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
        },
        6: function _(n) {
            return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
        },
        7: function _(n) {
            return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        8: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
        },
        9: function _(n) {
            return Number(n >= 2);
        },
        10: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
        },
        11: function _(n) {
            return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
        },
        12: function _(n) {
            return Number(n % 10 != 1 || n % 100 == 11);
        },
        13: function _(n) {
            return Number(n !== 0);
        },
        14: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
        },
        15: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        16: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
        },
        17: function _(n) {
            return Number(n == 1 || n % 10 == 1 ? 0 : 1);
        },
        18: function _(n) {
            return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
        },
        19: function _(n) {
            return Number(n == 1 ? 0 : n === 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
        },
        20: function _(n) {
            return Number(n == 1 ? 0 : n === 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
        },
        21: function _(n) {
            return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
        }
    };
    function createRules() {
        var rules = {};
        sets.forEach(function (set) {
            set.lngs.forEach(function (l) {
                rules[l] = {
                    numbers: set.nr,
                    plurals: _rulesPluralsTypes[set.fc]
                };
            });
        });
        return rules;
    }
    var PluralResolver = function () {
        function PluralResolver(languageUtils) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, PluralResolver);
            this.languageUtils = languageUtils;
            this.options = options;
            this.logger = _logger2.default.create('pluralResolver');
            this.rules = createRules();
        }
        PluralResolver.prototype.addRule = function addRule(lng, obj) {
            this.rules[lng] = obj;
        };
        PluralResolver.prototype.getRule = function getRule(code) {
            return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
        };
        PluralResolver.prototype.needsPlural = function needsPlural(code) {
            var rule = this.getRule(code);
            return rule && rule.numbers.length > 1;
        };
        PluralResolver.prototype.getPluralFormsOfKey = function getPluralFormsOfKey(code, key) {
            var _this = this;
            var ret = [];
            var rule = this.getRule(code);
            if (!rule)
                return ret;
            rule.numbers.forEach(function (n) {
                var suffix = _this.getSuffix(code, n);
                ret.push('' + key + suffix);
            });
            return ret;
        };
        PluralResolver.prototype.getSuffix = function getSuffix(code, count) {
            var _this2 = this;
            var rule = this.getRule(code);
            if (rule) {
                var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                var suffix = rule.numbers[idx];
                if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    if (suffix === 2) {
                        suffix = 'plural';
                    } else if (suffix === 1) {
                        suffix = '';
                    }
                }
                var returnSuffix = function returnSuffix() {
                    return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
                };
                if (this.options.compatibilityJSON === 'v1') {
                    if (suffix === 1)
                        return '';
                    if (typeof suffix === 'number')
                        return '_plural_' + suffix.toString();
                    return returnSuffix();
                } else if (this.options.compatibilityJSON === 'v2' && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    return returnSuffix();
                } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    return returnSuffix();
                }
                return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
            }
            this.logger.warn('no plural rule found for: ' + code);
            return '';
        };
        return PluralResolver;
    }();
    exports.default = PluralResolver;
});
/*i18next@11.4.0#dist/commonjs/Interpolator*/
define('i18next@11.4.0#dist/commonjs/Interpolator', [
    'require',
    'exports',
    'module',
    './utils.js',
    './logger.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _utils = require('./utils.js');
    var utils = _interopRequireWildcard(_utils);
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var Interpolator = function () {
        function Interpolator() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            _classCallCheck(this, Interpolator);
            this.logger = _logger2.default.create('interpolator');
            this.init(options, true);
        }
        Interpolator.prototype.init = function init() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var reset = arguments[1];
            if (reset) {
                this.options = options;
                this.format = options.interpolation && options.interpolation.format || function (value) {
                    return value;
                };
            }
            if (!options.interpolation)
                options.interpolation = { escapeValue: true };
            var iOpts = options.interpolation;
            this.escape = iOpts.escape !== undefined ? iOpts.escape : utils.escape;
            this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
            this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
            this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
            this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
            this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
            this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
            this.nestingPrefix = iOpts.nestingPrefix ? utils.regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || utils.regexEscape('$t(');
            this.nestingSuffix = iOpts.nestingSuffix ? utils.regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || utils.regexEscape(')');
            this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
            this.resetRegExp();
        };
        Interpolator.prototype.reset = function reset() {
            if (this.options)
                this.init(this.options);
        };
        Interpolator.prototype.resetRegExp = function resetRegExp() {
            var regexpStr = this.prefix + '(.+?)' + this.suffix;
            this.regexp = new RegExp(regexpStr, 'g');
            var regexpUnescapeStr = '' + this.prefix + this.unescapePrefix + '(.+?)' + this.unescapeSuffix + this.suffix;
            this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
            var nestingRegexpStr = this.nestingPrefix + '(.+?)' + this.nestingSuffix;
            this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
        };
        Interpolator.prototype.interpolate = function interpolate(str, data, lng) {
            var _this = this;
            var match = void 0;
            var value = void 0;
            var replaces = void 0;
            function regexSafe(val) {
                return val.replace(/\$/g, '$$$$');
            }
            var handleFormat = function handleFormat(key) {
                if (key.indexOf(_this.formatSeparator) < 0)
                    return utils.getPath(data, key);
                var p = key.split(_this.formatSeparator);
                var k = p.shift().trim();
                var f = p.join(_this.formatSeparator).trim();
                return _this.format(utils.getPath(data, k), f, lng);
            };
            this.resetRegExp();
            replaces = 0;
            while (match = this.regexpUnescape.exec(str)) {
                value = handleFormat(match[1].trim());
                str = str.replace(match[0], value);
                this.regexpUnescape.lastIndex = 0;
                replaces++;
                if (replaces >= this.maxReplaces) {
                    break;
                }
            }
            replaces = 0;
            while (match = this.regexp.exec(str)) {
                value = handleFormat(match[1].trim());
                if (value === undefined) {
                    if (typeof this.options.missingInterpolationHandler === 'function') {
                        var temp = this.options.missingInterpolationHandler(str, match);
                        value = typeof temp === 'string' ? temp : '';
                    } else {
                        this.logger.warn('missed to pass in variable ' + match[1] + ' for interpolating ' + str);
                        value = '';
                    }
                } else if (typeof value !== 'string' && !this.useRawValueToEscape) {
                    value = utils.makeString(value);
                }
                value = this.escapeValue ? regexSafe(this.escape(value)) : regexSafe(value);
                str = str.replace(match[0], value);
                this.regexp.lastIndex = 0;
                replaces++;
                if (replaces >= this.maxReplaces) {
                    break;
                }
            }
            return str;
        };
        Interpolator.prototype.nest = function nest(str, fc) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var match = void 0;
            var value = void 0;
            var clonedOptions = _extends({}, options);
            clonedOptions.applyPostProcessor = false;
            function handleHasOptions(key, inheritedOptions) {
                if (key.indexOf(',') < 0)
                    return key;
                var p = key.split(',');
                key = p.shift();
                var optionsString = p.join(',');
                optionsString = this.interpolate(optionsString, clonedOptions);
                optionsString = optionsString.replace(/'/g, '"');
                try {
                    clonedOptions = JSON.parse(optionsString);
                    if (inheritedOptions)
                        clonedOptions = _extends({}, inheritedOptions, clonedOptions);
                } catch (e) {
                    this.logger.error('failed parsing options string in nesting for key ' + key, e);
                }
                return key;
            }
            while (match = this.nestingRegexp.exec(str)) {
                value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                if (value && match[0] === str && typeof value !== 'string')
                    return value;
                if (typeof value !== 'string')
                    value = utils.makeString(value);
                if (!value) {
                    this.logger.warn('missed to resolve ' + match[1] + ' for nesting ' + str);
                    value = '';
                }
                str = str.replace(match[0], value);
                this.regexp.lastIndex = 0;
            }
            return str;
        };
        return Interpolator;
    }();
    exports.default = Interpolator;
});
/*i18next@11.4.0#dist/commonjs/BackendConnector*/
define('i18next@11.4.0#dist/commonjs/BackendConnector', [
    'require',
    'exports',
    'module',
    './utils.js',
    './logger.js',
    './EventEmitter.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i)
                        break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i['return'])
                        _i['return']();
                } finally {
                    if (_d)
                        throw _e;
                }
            }
            return _arr;
        }
        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError('Invalid attempt to destructure non-iterable instance');
            }
        };
    }();
    var _utils = require('./utils.js');
    var utils = _interopRequireWildcard(_utils);
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    var _EventEmitter2 = require('./EventEmitter.js');
    var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);
            if (value && value.configurable && obj[key] === undefined) {
                Object.defineProperty(obj, key, value);
            }
        }
        return obj;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
    }
    function remove(arr, what) {
        var found = arr.indexOf(what);
        while (found !== -1) {
            arr.splice(found, 1);
            found = arr.indexOf(what);
        }
    }
    var Connector = function (_EventEmitter) {
        _inherits(Connector, _EventEmitter);
        function Connector(backend, store, services) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            _classCallCheck(this, Connector);
            var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
            _this.backend = backend;
            _this.store = store;
            _this.languageUtils = services.languageUtils;
            _this.options = options;
            _this.logger = _logger2.default.create('backendConnector');
            _this.state = {};
            _this.queue = [];
            if (_this.backend && _this.backend.init) {
                _this.backend.init(services, options.backend, options);
            }
            return _this;
        }
        Connector.prototype.queueLoad = function queueLoad(languages, namespaces, callback) {
            var _this2 = this;
            var toLoad = [];
            var pending = [];
            var toLoadLanguages = [];
            var toLoadNamespaces = [];
            languages.forEach(function (lng) {
                var hasAllNamespaces = true;
                namespaces.forEach(function (ns) {
                    var name = lng + '|' + ns;
                    if (_this2.store.hasResourceBundle(lng, ns)) {
                        _this2.state[name] = 2;
                    } else if (_this2.state[name] < 0) {
                    } else if (_this2.state[name] === 1) {
                        if (pending.indexOf(name) < 0)
                            pending.push(name);
                    } else {
                        _this2.state[name] = 1;
                        hasAllNamespaces = false;
                        if (pending.indexOf(name) < 0)
                            pending.push(name);
                        if (toLoad.indexOf(name) < 0)
                            toLoad.push(name);
                        if (toLoadNamespaces.indexOf(ns) < 0)
                            toLoadNamespaces.push(ns);
                    }
                });
                if (!hasAllNamespaces)
                    toLoadLanguages.push(lng);
            });
            if (toLoad.length || pending.length) {
                this.queue.push({
                    pending: pending,
                    loaded: {},
                    errors: [],
                    callback: callback
                });
            }
            return {
                toLoad: toLoad,
                pending: pending,
                toLoadLanguages: toLoadLanguages,
                toLoadNamespaces: toLoadNamespaces
            };
        };
        Connector.prototype.loaded = function loaded(name, err, data) {
            var _name$split = name.split('|'), _name$split2 = _slicedToArray(_name$split, 2), lng = _name$split2[0], ns = _name$split2[1];
            if (err)
                this.emit('failedLoading', lng, ns, err);
            if (data) {
                this.store.addResourceBundle(lng, ns, data);
            }
            this.state[name] = err ? -1 : 2;
            var loaded = {};
            this.queue.forEach(function (q) {
                utils.pushPath(q.loaded, [lng], ns);
                remove(q.pending, name);
                if (err)
                    q.errors.push(err);
                if (q.pending.length === 0 && !q.done) {
                    Object.keys(q.loaded).forEach(function (l) {
                        if (!loaded[l])
                            loaded[l] = [];
                        if (q.loaded[l].length) {
                            q.loaded[l].forEach(function (ns) {
                                if (loaded[l].indexOf(ns) < 0)
                                    loaded[l].push(ns);
                            });
                        }
                    });
                    q.done = true;
                    if (q.errors.length) {
                        q.callback(q.errors);
                    } else {
                        q.callback();
                    }
                }
            });
            this.emit('loaded', loaded);
            this.queue = this.queue.filter(function (q) {
                return !q.done;
            });
        };
        Connector.prototype.read = function read(lng, ns, fcName) {
            var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var _this3 = this;
            var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 250;
            var callback = arguments[5];
            if (!lng.length)
                return callback(null, {});
            return this.backend[fcName](lng, ns, function (err, data) {
                if (err && data && tried < 5) {
                    setTimeout(function () {
                        _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                    }, wait);
                    return;
                }
                callback(err, data);
            });
        };
        Connector.prototype.load = function load(languages, namespaces, callback) {
            var _this4 = this;
            if (!this.backend) {
                this.logger.warn('No backend was added via i18next.use. Will not load resources.');
                return callback && callback();
            }
            if (typeof languages === 'string')
                languages = this.languageUtils.toResolveHierarchy(languages);
            if (typeof namespaces === 'string')
                namespaces = [namespaces];
            var toLoad = this.queueLoad(languages, namespaces, callback);
            if (!toLoad.toLoad.length) {
                if (!toLoad.pending.length)
                    callback();
                return null;
            }
            toLoad.toLoad.forEach(function (name) {
                _this4.loadOne(name);
            });
        };
        Connector.prototype.reload = function reload(languages, namespaces) {
            var _this5 = this;
            if (!this.backend) {
                this.logger.warn('No backend was added via i18next.use. Will not load resources.');
            }
            if (typeof languages === 'string')
                languages = this.languageUtils.toResolveHierarchy(languages);
            if (typeof namespaces === 'string')
                namespaces = [namespaces];
            languages.forEach(function (l) {
                namespaces.forEach(function (n) {
                    _this5.loadOne(l + '|' + n, 're');
                });
            });
        };
        Connector.prototype.loadOne = function loadOne(name) {
            var _this6 = this;
            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var _name$split3 = name.split('|'), _name$split4 = _slicedToArray(_name$split3, 2), lng = _name$split4[0], ns = _name$split4[1];
            this.read(lng, ns, 'read', null, null, function (err, data) {
                if (err)
                    _this6.logger.warn(prefix + 'loading namespace ' + ns + ' for language ' + lng + ' failed', err);
                if (!err && data)
                    _this6.logger.log(prefix + 'loaded namespace ' + ns + ' for language ' + lng, data);
                _this6.loaded(name, err, data);
            });
        };
        Connector.prototype.saveMissing = function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
            if (this.backend && this.backend.create) {
                this.backend.create(languages, namespace, key, fallbackValue, null, _extends({}, options, { isUpdate: isUpdate }));
            }
            if (!languages || !languages[0])
                return;
            this.store.addResource(languages[0], namespace, key, fallbackValue);
        };
        return Connector;
    }(_EventEmitter3.default);
    exports.default = Connector;
});
/*i18next@11.4.0#dist/commonjs/defaults*/
define('i18next@11.4.0#dist/commonjs/defaults', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.transformOptions = transformOptions;
    function get() {
        return {
            debug: false,
            initImmediate: true,
            ns: ['translation'],
            defaultNS: ['translation'],
            fallbackLng: ['dev'],
            fallbackNS: false,
            whitelist: false,
            nonExplicitWhitelist: false,
            load: 'all',
            preload: false,
            simplifyPluralSuffix: true,
            keySeparator: '.',
            nsSeparator: ':',
            pluralSeparator: '_',
            contextSeparator: '_',
            saveMissing: false,
            updateMissing: false,
            saveMissingTo: 'fallback',
            saveMissingPlurals: true,
            missingKeyHandler: false,
            missingInterpolationHandler: false,
            postProcess: false,
            returnNull: true,
            returnEmptyString: true,
            returnObjects: false,
            joinArrays: false,
            returnedObjectHandler: function returnedObjectHandler() {
            },
            parseMissingKeyHandler: false,
            appendNamespaceToMissingKey: false,
            appendNamespaceToCIMode: false,
            overloadTranslationOptionHandler: function handle(args) {
                var ret = {};
                if (args[1])
                    ret.defaultValue = args[1];
                if (args[2])
                    ret.tDescription = args[2];
                return ret;
            },
            interpolation: {
                escapeValue: true,
                format: function format(value, _format, lng) {
                    return value;
                },
                prefix: '{{',
                suffix: '}}',
                formatSeparator: ',',
                unescapePrefix: '-',
                nestingPrefix: '$t(',
                nestingSuffix: ')',
                maxReplaces: 1000
            }
        };
    }
    exports.get = get;
    function transformOptions(options) {
        if (typeof options.ns === 'string')
            options.ns = [options.ns];
        if (typeof options.fallbackLng === 'string')
            options.fallbackLng = [options.fallbackLng];
        if (typeof options.fallbackNS === 'string')
            options.fallbackNS = [options.fallbackNS];
        if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
            options.whitelist = options.whitelist.concat(['cimode']);
        }
        return options;
    }
});
/*i18next@11.4.0#dist/commonjs/i18next*/
define('i18next@11.4.0#dist/commonjs/i18next', [
    'require',
    'exports',
    'module',
    './logger.js',
    './EventEmitter.js',
    './ResourceStore.js',
    './Translator.js',
    './LanguageUtils.js',
    './PluralResolver.js',
    './Interpolator.js',
    './BackendConnector.js',
    './defaults.js',
    './postProcessor.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    var _logger = require('./logger.js');
    var _logger2 = _interopRequireDefault(_logger);
    var _EventEmitter2 = require('./EventEmitter.js');
    var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
    var _ResourceStore = require('./ResourceStore.js');
    var _ResourceStore2 = _interopRequireDefault(_ResourceStore);
    var _Translator = require('./Translator.js');
    var _Translator2 = _interopRequireDefault(_Translator);
    var _LanguageUtils = require('./LanguageUtils.js');
    var _LanguageUtils2 = _interopRequireDefault(_LanguageUtils);
    var _PluralResolver = require('./PluralResolver.js');
    var _PluralResolver2 = _interopRequireDefault(_PluralResolver);
    var _Interpolator = require('./Interpolator.js');
    var _Interpolator2 = _interopRequireDefault(_Interpolator);
    var _BackendConnector = require('./BackendConnector.js');
    var _BackendConnector2 = _interopRequireDefault(_BackendConnector);
    var _defaults2 = require('./defaults.js');
    var _postProcessor = require('./postProcessor.js');
    var _postProcessor2 = _interopRequireDefault(_postProcessor);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);
            if (value && value.configurable && obj[key] === undefined) {
                Object.defineProperty(obj, key, value);
            }
        }
        return obj;
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
    }
    function noop() {
    }
    var I18n = function (_EventEmitter) {
        _inherits(I18n, _EventEmitter);
        function I18n() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments[1];
            _classCallCheck(this, I18n);
            var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
            _this.options = (0, _defaults2.transformOptions)(options);
            _this.services = {};
            _this.logger = _logger2.default;
            _this.modules = { external: [] };
            if (callback && !_this.isInitialized && !options.isClone) {
                var _ret;
                if (!_this.options.initImmediate)
                    return _ret = _this.init(options, callback), _possibleConstructorReturn(_this, _ret);
                setTimeout(function () {
                    _this.init(options, callback);
                }, 0);
            }
            return _this;
        }
        I18n.prototype.init = function init() {
            var _this2 = this;
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments[1];
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            this.options = _extends({}, (0, _defaults2.get)(), this.options, (0, _defaults2.transformOptions)(options));
            this.format = this.options.interpolation.format;
            if (!callback)
                callback = noop;
            function createClassOnDemand(ClassOrObject) {
                if (!ClassOrObject)
                    return null;
                if (typeof ClassOrObject === 'function')
                    return new ClassOrObject();
                return ClassOrObject;
            }
            if (!this.options.isClone) {
                if (this.modules.logger) {
                    _logger2.default.init(createClassOnDemand(this.modules.logger), this.options);
                } else {
                    _logger2.default.init(null, this.options);
                }
                var lu = new _LanguageUtils2.default(this.options);
                this.store = new _ResourceStore2.default(this.options.resources, this.options);
                var s = this.services;
                s.logger = _logger2.default;
                s.resourceStore = this.store;
                s.languageUtils = lu;
                s.pluralResolver = new _PluralResolver2.default(lu, {
                    prepend: this.options.pluralSeparator,
                    compatibilityJSON: this.options.compatibilityJSON,
                    simplifyPluralSuffix: this.options.simplifyPluralSuffix
                });
                s.interpolator = new _Interpolator2.default(this.options);
                s.backendConnector = new _BackendConnector2.default(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                s.backendConnector.on('*', function (event) {
                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }
                    _this2.emit.apply(_this2, [event].concat(args));
                });
                if (this.modules.languageDetector) {
                    s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                    s.languageDetector.init(s, this.options.detection, this.options);
                }
                if (this.modules.i18nFormat) {
                    s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                    if (s.i18nFormat.init)
                        s.i18nFormat.init(this);
                }
                this.translator = new _Translator2.default(this.services, this.options);
                this.translator.on('*', function (event) {
                    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                        args[_key2 - 1] = arguments[_key2];
                    }
                    _this2.emit.apply(_this2, [event].concat(args));
                });
                this.modules.external.forEach(function (m) {
                    if (m.init)
                        m.init(_this2);
                });
            }
            var storeApi = [
                'getResource',
                'addResource',
                'addResources',
                'addResourceBundle',
                'removeResourceBundle',
                'hasResourceBundle',
                'getResourceBundle'
            ];
            storeApi.forEach(function (fcName) {
                _this2[fcName] = function () {
                    var _store;
                    return (_store = _this2.store)[fcName].apply(_store, arguments);
                };
            });
            var load = function load() {
                _this2.changeLanguage(_this2.options.lng, function (err, t) {
                    _this2.isInitialized = true;
                    _this2.logger.log('initialized', _this2.options);
                    _this2.emit('initialized', _this2.options);
                    callback(err, t);
                });
            };
            if (this.options.resources || !this.options.initImmediate) {
                load();
            } else {
                setTimeout(load, 0);
            }
            return this;
        };
        I18n.prototype.loadResources = function loadResources() {
            var _this3 = this;
            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
            if (!this.options.resources) {
                if (this.language && this.language.toLowerCase() === 'cimode')
                    return callback();
                var toLoad = [];
                var append = function append(lng) {
                    if (!lng)
                        return;
                    var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                    lngs.forEach(function (l) {
                        if (toLoad.indexOf(l) < 0)
                            toLoad.push(l);
                    });
                };
                if (!this.language) {
                    var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                    fallbacks.forEach(function (l) {
                        return append(l);
                    });
                } else {
                    append(this.language);
                }
                if (this.options.preload) {
                    this.options.preload.forEach(function (l) {
                        return append(l);
                    });
                }
                this.services.backendConnector.load(toLoad, this.options.ns, callback);
            } else {
                callback(null);
            }
        };
        I18n.prototype.reloadResources = function reloadResources(lngs, ns) {
            if (!lngs)
                lngs = this.languages;
            if (!ns)
                ns = this.options.ns;
            this.services.backendConnector.reload(lngs, ns);
        };
        I18n.prototype.use = function use(module) {
            if (module.type === 'backend') {
                this.modules.backend = module;
            }
            if (module.type === 'logger' || module.log && module.warn && module.error) {
                this.modules.logger = module;
            }
            if (module.type === 'languageDetector') {
                this.modules.languageDetector = module;
            }
            if (module.type === 'i18nFormat') {
                this.modules.i18nFormat = module;
            }
            if (module.type === 'postProcessor') {
                _postProcessor2.default.addPostProcessor(module);
            }
            if (module.type === '3rdParty') {
                this.modules.external.push(module);
            }
            return this;
        };
        I18n.prototype.changeLanguage = function changeLanguage(lng, callback) {
            var _this4 = this;
            var done = function done(err, l) {
                _this4.translator.changeLanguage(l);
                if (l) {
                    _this4.emit('languageChanged', l);
                    _this4.logger.log('languageChanged', l);
                }
                if (callback)
                    callback(err, function () {
                        return _this4.t.apply(_this4, arguments);
                    });
            };
            var setLng = function setLng(l) {
                if (l) {
                    _this4.language = l;
                    _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                    if (!_this4.translator.language)
                        _this4.translator.changeLanguage(l);
                    if (_this4.services.languageDetector)
                        _this4.services.languageDetector.cacheUserLanguage(l);
                }
                _this4.loadResources(function (err) {
                    done(err, l);
                });
            };
            if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                setLng(this.services.languageDetector.detect());
            } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                this.services.languageDetector.detect(setLng);
            } else {
                setLng(lng);
            }
        };
        I18n.prototype.getFixedT = function getFixedT(lng, ns) {
            var _this5 = this;
            var fixedT = function fixedT(key, opts) {
                for (var _len3 = arguments.length, rest = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                    rest[_key3 - 2] = arguments[_key3];
                }
                var options = _extends({}, opts);
                if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {
                    options = _this5.options.overloadTranslationOptionHandler([
                        key,
                        opts
                    ].concat(rest));
                }
                options.lng = options.lng || fixedT.lng;
                options.lngs = options.lngs || fixedT.lngs;
                options.ns = options.ns || fixedT.ns;
                return _this5.t(key, options);
            };
            if (typeof lng === 'string') {
                fixedT.lng = lng;
            } else {
                fixedT.lngs = lng;
            }
            fixedT.ns = ns;
            return fixedT;
        };
        I18n.prototype.t = function t() {
            var _translator;
            return this.translator && (_translator = this.translator).translate.apply(_translator, arguments);
        };
        I18n.prototype.exists = function exists() {
            var _translator2;
            return this.translator && (_translator2 = this.translator).exists.apply(_translator2, arguments);
        };
        I18n.prototype.setDefaultNamespace = function setDefaultNamespace(ns) {
            this.options.defaultNS = ns;
        };
        I18n.prototype.loadNamespaces = function loadNamespaces(ns, callback) {
            var _this6 = this;
            if (!this.options.ns)
                return callback && callback();
            if (typeof ns === 'string')
                ns = [ns];
            ns.forEach(function (n) {
                if (_this6.options.ns.indexOf(n) < 0)
                    _this6.options.ns.push(n);
            });
            this.loadResources(callback);
        };
        I18n.prototype.loadLanguages = function loadLanguages(lngs, callback) {
            if (typeof lngs === 'string')
                lngs = [lngs];
            var preloaded = this.options.preload || [];
            var newLngs = lngs.filter(function (lng) {
                return preloaded.indexOf(lng) < 0;
            });
            if (!newLngs.length)
                return callback();
            this.options.preload = preloaded.concat(newLngs);
            this.loadResources(callback);
        };
        I18n.prototype.dir = function dir(lng) {
            if (!lng)
                lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
            if (!lng)
                return 'rtl';
            var rtlLngs = [
                'ar',
                'shu',
                'sqr',
                'ssh',
                'xaa',
                'yhd',
                'yud',
                'aao',
                'abh',
                'abv',
                'acm',
                'acq',
                'acw',
                'acx',
                'acy',
                'adf',
                'ads',
                'aeb',
                'aec',
                'afb',
                'ajp',
                'apc',
                'apd',
                'arb',
                'arq',
                'ars',
                'ary',
                'arz',
                'auz',
                'avl',
                'ayh',
                'ayl',
                'ayn',
                'ayp',
                'bbz',
                'pga',
                'he',
                'iw',
                'ps',
                'pbt',
                'pbu',
                'pst',
                'prp',
                'prd',
                'ur',
                'ydd',
                'yds',
                'yih',
                'ji',
                'yi',
                'hbo',
                'men',
                'xmn',
                'fa',
                'jpr',
                'peo',
                'pes',
                'prs',
                'dv',
                'sam'
            ];
            return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
        };
        I18n.prototype.createInstance = function createInstance() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments[1];
            return new I18n(options, callback);
        };
        I18n.prototype.cloneInstance = function cloneInstance() {
            var _this7 = this;
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
            var mergedOptions = _extends({}, this.options, options, { isClone: true });
            var clone = new I18n(mergedOptions);
            var membersToCopy = [
                'store',
                'services',
                'language'
            ];
            membersToCopy.forEach(function (m) {
                clone[m] = _this7[m];
            });
            clone.translator = new _Translator2.default(clone.services, clone.options);
            clone.translator.on('*', function (event) {
                for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                    args[_key4 - 1] = arguments[_key4];
                }
                clone.emit.apply(clone, [event].concat(args));
            });
            clone.init(mergedOptions, callback);
            clone.translator.options = clone.options;
            return clone;
        };
        return I18n;
    }(_EventEmitter3.default);
    exports.default = new I18n();
});
/*i18next@11.4.0#dist/commonjs/index*/
define('i18next@11.4.0#dist/commonjs/index', [
    'require',
    'exports',
    'module',
    './i18next.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.use = exports.t = exports.setDefaultNamespace = exports.on = exports.off = exports.loadResources = exports.loadNamespaces = exports.loadLanguages = exports.init = exports.getFixedT = exports.exists = exports.dir = exports.createInstance = exports.cloneInstance = exports.changeLanguage = undefined;
    var _i18next = require('./i18next.js');
    var _i18next2 = _interopRequireDefault(_i18next);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = _i18next2.default;
    var changeLanguage = exports.changeLanguage = _i18next2.default.changeLanguage.bind(_i18next2.default);
    var cloneInstance = exports.cloneInstance = _i18next2.default.cloneInstance.bind(_i18next2.default);
    var createInstance = exports.createInstance = _i18next2.default.createInstance.bind(_i18next2.default);
    var dir = exports.dir = _i18next2.default.dir.bind(_i18next2.default);
    var exists = exports.exists = _i18next2.default.exists.bind(_i18next2.default);
    var getFixedT = exports.getFixedT = _i18next2.default.getFixedT.bind(_i18next2.default);
    var init = exports.init = _i18next2.default.init.bind(_i18next2.default);
    var loadLanguages = exports.loadLanguages = _i18next2.default.loadLanguages.bind(_i18next2.default);
    var loadNamespaces = exports.loadNamespaces = _i18next2.default.loadNamespaces.bind(_i18next2.default);
    var loadResources = exports.loadResources = _i18next2.default.loadResources.bind(_i18next2.default);
    var off = exports.off = _i18next2.default.off.bind(_i18next2.default);
    var on = exports.on = _i18next2.default.on.bind(_i18next2.default);
    var setDefaultNamespace = exports.setDefaultNamespace = _i18next2.default.setDefaultNamespace.bind(_i18next2.default);
    var t = exports.t = _i18next2.default.t.bind(_i18next2.default);
    var use = exports.use = _i18next2.default.use.bind(_i18next2.default);
});
/*i18next@11.4.0#index*/
define('i18next@11.4.0#index', [
    'require',
    'exports',
    'module',
    './dist/commonjs/index.js'
], function (require, exports, module) {
    module.exports = require('./dist/commonjs/index.js').default;
});
/*i18next-xhr-backend@1.5.1#dist/commonjs/utils*/
define('i18next-xhr-backend@1.5.1#dist/commonjs/utils', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaults = defaults;
    exports.extend = extend;
    var arr = [];
    var each = arr.forEach;
    var slice = arr.slice;
    function defaults(obj) {
        each.call(slice.call(arguments, 1), function (source) {
            if (source) {
                for (var prop in source) {
                    if (obj[prop] === undefined)
                        obj[prop] = source[prop];
                }
            }
        });
        return obj;
    }
    function extend(obj) {
        each.call(slice.call(arguments, 1), function (source) {
            if (source) {
                for (var prop in source) {
                    obj[prop] = source[prop];
                }
            }
        });
        return obj;
    }
});
/*i18next-xhr-backend@1.5.1#dist/commonjs/ajax*/
define('i18next-xhr-backend@1.5.1#dist/commonjs/ajax', function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    function addQueryString(url, params) {
        if (params && (typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
            var queryString = '', e = encodeURIComponent;
            for (var paramName in params) {
                queryString += '&' + e(paramName) + '=' + e(params[paramName]);
            }
            if (!queryString) {
                return url;
            }
            url = url + (url.indexOf('?') !== -1 ? '&' : '?') + queryString.slice(1);
        }
        return url;
    }
    function ajax(url, options, callback, data, cache) {
        if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
            if (!cache) {
                data['_t'] = new Date();
            }
            data = addQueryString('', data).slice(1);
        }
        if (options.queryStringParams) {
            url = addQueryString(url, options.queryStringParams);
        }
        try {
            var x;
            if (XMLHttpRequest) {
                x = new XMLHttpRequest();
            } else {
                x = new ActiveXObject('MSXML2.XMLHTTP.3.0');
            }
            x.open(data ? 'POST' : 'GET', url, 1);
            if (!options.crossDomain) {
                x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }
            x.withCredentials = !!options.withCredentials;
            if (data) {
                x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            }
            if (x.overrideMimeType) {
                x.overrideMimeType('application/json');
            }
            var h = options.customHeaders;
            if (h) {
                for (var i in h) {
                    x.setRequestHeader(i, h[i]);
                }
            }
            x.onreadystatechange = function () {
                x.readyState > 3 && callback && callback(x.responseText, x);
            };
            x.send(data);
        } catch (e) {
            console && console.log(e);
        }
    }
    exports.default = ajax;
});
/*i18next-xhr-backend@1.5.1#dist/commonjs/index*/
define('i18next-xhr-backend@1.5.1#dist/commonjs/index', [
    'require',
    'exports',
    'module',
    './utils.js',
    './ajax.js'
], function (require, exports, module) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var _utils = require('./utils.js');
    var utils = _interopRequireWildcard(_utils);
    var _ajax = require('./ajax.js');
    var _ajax2 = _interopRequireDefault(_ajax);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};
            if (obj != null) {
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                        newObj[key] = obj[key];
                }
            }
            newObj.default = obj;
            return newObj;
        }
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    function getDefaults() {
        return {
            loadPath: '/locales/{{lng}}/{{ns}}.json',
            addPath: '/locales/add/{{lng}}/{{ns}}',
            allowMultiLoading: false,
            parse: JSON.parse,
            crossDomain: false,
            ajax: _ajax2.default
        };
    }
    var Backend = function () {
        function Backend(services) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Backend);
            this.init(services, options);
            this.type = 'backend';
        }
        _createClass(Backend, [
            {
                key: 'init',
                value: function init(services) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    this.services = services;
                    this.options = utils.defaults(options, this.options || {}, getDefaults());
                }
            },
            {
                key: 'readMulti',
                value: function readMulti(languages, namespaces, callback) {
                    var loadPath = this.options.loadPath;
                    if (typeof this.options.loadPath === 'function') {
                        loadPath = this.options.loadPath(languages, namespaces);
                    }
                    var url = this.services.interpolator.interpolate(loadPath, {
                        lng: languages.join('+'),
                        ns: namespaces.join('+')
                    });
                    this.loadUrl(url, callback);
                }
            },
            {
                key: 'read',
                value: function read(language, namespace, callback) {
                    var loadPath = this.options.loadPath;
                    if (typeof this.options.loadPath === 'function') {
                        loadPath = this.options.loadPath([language], [namespace]);
                    }
                    var url = this.services.interpolator.interpolate(loadPath, {
                        lng: language,
                        ns: namespace
                    });
                    this.loadUrl(url, callback);
                }
            },
            {
                key: 'loadUrl',
                value: function loadUrl(url, callback) {
                    var _this = this;
                    this.options.ajax(url, this.options, function (data, xhr) {
                        if (xhr.status >= 500 && xhr.status < 600)
                            return callback('failed loading ' + url, true);
                        if (xhr.status >= 400 && xhr.status < 500)
                            return callback('failed loading ' + url, false);
                        var ret = void 0, err = void 0;
                        try {
                            ret = _this.options.parse(data, url);
                        } catch (e) {
                            err = 'failed parsing ' + url + ' to json';
                        }
                        if (err)
                            return callback(err, false);
                        callback(null, ret);
                    });
                }
            },
            {
                key: 'create',
                value: function create(languages, namespace, key, fallbackValue) {
                    var _this2 = this;
                    if (typeof languages === 'string')
                        languages = [languages];
                    var payload = {};
                    payload[key] = fallbackValue || '';
                    languages.forEach(function (lng) {
                        var url = _this2.services.interpolator.interpolate(_this2.options.addPath, {
                            lng: lng,
                            ns: namespace
                        });
                        _this2.options.ajax(url, _this2.options, function (data, xhr) {
                        }, payload);
                    });
                }
            }
        ]);
        return Backend;
    }();
    Backend.type = 'backend';
    exports.default = Backend;
});
/*i18next-xhr-backend@1.5.1#index*/
define('i18next-xhr-backend@1.5.1#index', [
    'require',
    'exports',
    'module',
    './dist/commonjs/index.js'
], function (require, exports, module) {
    module.exports = require('./dist/commonjs/index.js').default;
});
/*can-validate-validatejs@0.1.3#can-validate-validatejs*/
define('can-validate-validatejs@0.1.3#can-validate-validatejs', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'validate.js'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var validatejs = require('validate.js');
    var makeValidator = function (constraints) {
        return function (value) {
            return validatejs.single(value, constraints);
        };
    };
    makeValidator.many = function (constraints) {
        return function (values) {
            var rawErrors = validatejs(values, constraints, {
                format: 'detailed',
                fullMessages: false
            });
            var errors;
            if (rawErrors) {
                errors = [];
                canReflect.eachIndex(rawErrors, function (error) {
                    errors.push({
                        message: error.options.message || error.error,
                        related: [error.attribute]
                    });
                });
            }
            return errors;
        };
    };
    makeValidator.validatejs = validatejs;
    module.exports = makeValidator;
});
/*can-validate@1.2.0#can-validate*/
define('can-validate@1.2.0#can-validate', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var validate = {};
    var helpers = {
        'object': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? {} : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                canReflect.eachIndex(error.related, function (related) {
                    if (!errors[related]) {
                        errors[related] = [];
                    }
                    errors[related].push(error.message);
                });
            });
            return errors;
        },
        'flat': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? [] : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                errors.push(error.message);
            });
            return errors;
        },
        'errors': function (normalizedErrors) {
            return normalizedErrors.length > 0 ? normalizedErrors : undefined;
        },
        'errors-object': function (normalizedErrors) {
            var errors = normalizedErrors.length > 0 ? {} : undefined;
            canReflect.eachIndex(normalizedErrors, function (error) {
                canReflect.eachIndex(error.related, function (related) {
                    if (!errors[related]) {
                        errors[related] = [];
                    }
                    errors[related].push(error);
                });
            });
            return errors;
        }
    };
    var parseErrorItem = function (rawErrors) {
        var errors = [];
        if (typeof rawErrors === 'string') {
            errors.push({
                message: rawErrors,
                related: ['*']
            });
        }
        if (typeof rawErrors === 'object' && !Array.isArray(rawErrors)) {
            if (rawErrors.related) {
                if (!Array.isArray(rawErrors.related)) {
                    rawErrors.related = [rawErrors.related];
                }
            } else {
                rawErrors.related = '*';
            }
            errors.push(rawErrors);
        }
        if (Array.isArray(rawErrors)) {
            canReflect.eachIndex(rawErrors, function (error) {
                [].push.apply(errors, parseErrorItem(error));
            });
        }
        return errors;
    };
    var normalizeErrors = function (rawErrors) {
        var normalizedErrors = [];
        if (typeof rawErrors === 'string' || typeof rawErrors === 'object' && !Array.isArray(rawErrors)) {
            rawErrors = [rawErrors];
        }
        if (rawErrors != null) {
            canReflect.eachIndex(rawErrors, function (error) {
                [].push.apply(normalizedErrors, parseErrorItem(error));
            });
        }
        return normalizedErrors;
    };
    validate.formatErrors = function (errors, format) {
        var normalized = normalizeErrors(errors);
        if (format) {
            if (helpers[format]) {
                return helpers[format](normalized);
            } else {
                return normalized;
            }
        } else {
            return normalized;
        }
    };
    module.exports = validate;
});
/*can-dom-data@1.0.1#can-dom-data*/
define('can-dom-data@1.0.1#can-dom-data', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var data = new WeakMap();
    var deleteNode = function (node) {
        var nodeDeleted = false;
        if (data.has(node)) {
            nodeDeleted = true;
            data.delete(node);
        }
        return nodeDeleted;
    };
    var setData = function (node, name, value) {
        var store = data.get(node);
        if (store === undefined) {
            store = {};
            data.set(node, store);
        }
        if (name !== undefined) {
            store[name] = value;
        }
        return store;
    };
    var domData = {
        _data: data,
        get: function (node, key) {
            var store = data.get(node);
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (node, prop) {
            var itemData = data.get(node);
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode(node);
            }
        },
        delete: deleteNode
    };
    if (namespace.domData) {
        throw new Error('You can\'t have two versions of can-dom-data, check your dependencies');
    } else {
        module.exports = namespace.domData = domData;
    }
});
/*[steal-add-npm-packages]*/
if (steal && typeof steal.addNpmPackages === "function") {
    steal.addNpmPackages([
        {
            origFileUrl:
                "file:C:/development.github/shuttle/Shuttle.Abacus/Shuttle.Abacus.Site/package.json",
            fileUrl: "./package.json",
            name: "abacus",
            version: "1.0.0",
            description: "Shuttle.Abacus constraint-based calculation engine.",
            steal: {
                main: "main.js",
                directories: { lib: "src" },
                npmAlgorithm: "flat",
                plugins: ["steal-stache", "steal-css"],
                meta: { tempusdominus: { format: "global", deps: ["moment"] } },
                map: {
                    tempusdominus:
                        "tempusdominus-bootstrap-4/build/js/tempusdominus-bootstrap-4.js"
                },
                serviceBaseURL: "http://localhost:6300/api/",
                accessBaseURL: "http://localhost:5599/api/",
                debug: true,
                localeVersion: "1"
            },
            scripts: {
                test: 'echo "Error: no test specified" && exit 1',
                postinstall: "steal-tools bundle --deps --no-minify"
            },
            author: "Eben Roux",
            homepage: "https://github.com/Shuttle/Shuttle.Abacus",
            dependencies: {
                bootstrap: "^4.1.2",
                "can-component": "^4.3.0",
                "can-compute": "^4.1.0",
                "can-connect": "^3.0.1",
                "can-define": "^2.5.3",
                "can-define-validate-validatejs": "^1.1.0",
                "can-route": "^4.3.0",
                "can-route-pushstate": "^5.0.0",
                "can-set": "^1.6.0",
                "can-stache": "^4.5.10",
                "can-stache-bindings": "^4.3.1",
                "can-stache-route-helpers": "^1.1.0",
                "can-util": "^3.11.5",
                "can-validate-validatejs": "^1.0.0",
                i18next: "^11.4.0",
                "i18next-xhr-backend": "^1.5.1",
                jquery: "^3.3.1",
                moment: "^2.22.1",
                "popper.js": "^1.14.3",
                "shuttle-access": "^1.0.1",
                "shuttle-can-api": "^1.0.19",
                "shuttle-canstrap": "^1.0.60",
                "shuttle-guard": "^1.0.0",
                steal: "^2.0.0",
                "steal-css": "^1.3.2",
                "steal-stache": "^4.1.2",
                "tempusdominus-bootstrap-4": "^5.0.1",
                "validate.js": "^0.11.1"
            }
        },
        {
            name: "steal-stache",
            version: "4.1.2",
            origFileUrl: "./node_modules/steal-stache/package.json",
            fileUrl: "./node_modules/steal-stache/package.json",
            _from: "steal-stache@^4.1.2",
            _id: "steal-stache@4.1.2",
            _inBundle: false,
            _integrity:
                "sha512-RWA4jxVeFaaXwNBwQKYqdSo292hFEzjvtun7DiNGzFGJETHsv+zwy0vF7SFYR46FvbYReP6q+fHUr+N3n7zWLQ==",
            _location: "/steal-stache",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "steal-stache@^4.1.2",
                name: "steal-stache",
                escapedName: "steal-stache",
                rawSpec: "^4.1.2",
                saveSpec: null,
                fetchSpec: "^4.1.2"
            },
            _requiredBy: ["/", "/shuttle-canstrap/can-connect"],
            _resolved:
                "https://registry.npmjs.org/steal-stache/-/steal-stache-4.1.2.tgz",
            _shasum: "fea2246b9df86ed4e3a5320ea87af29d7aeaa7b7",
            _spec: "steal-stache@^4.1.2",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/steal-stache/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-stache": "^4.0.0",
                "can-stache-ast": "^1.0.0",
                "can-stache-bindings": "^4.0.0",
                "can-view-import": "^4.0.0",
                "steal-config-utils": "^1.0.0"
            },
            deprecated: false,
            description: "Load can-stache templates with StealJS",
            devDependencies: {
                "bit-docs": "0.0.7",
                "can-test-helpers": "^1.1.0",
                "can-view-callbacks": "^4.1.1",
                "can-view-nodelist": "^4.0.0",
                jshint: "^2.9.4",
                steal: "^1.7.0",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "stealjs", "donejs"],
            main: "steal-stache.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/steal-stache.git"
            },
            scripts: {
                jshint: "jshint ./*.js test/ --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: {
                main: "steal-stache",
                configDependencies: ["live-reload"],
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmAlgorithm: "flat",
                ext: { stache: "steal-stache" }
            },
            steal: {
                main: "steal-stache",
                configDependencies: ["live-reload"],
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmAlgorithm: "flat",
                ext: { stache: "steal-stache" }
            }
        },
        {
            name: "steal-css",
            version: "1.3.2",
            origFileUrl: "./node_modules/steal-css/package.json",
            fileUrl: "./node_modules/steal-css/package.json",
            _from: "steal-css@^1.3.2",
            _id: "steal-css@1.3.2",
            _inBundle: false,
            _integrity:
                "sha512-hT3j9+p+qxqu3Jh46zGoB31V/8SKYba/C9sRtGkryKRR8vf582UmLpcbo2s1FysSNZCISbCGi7jl/pZgvdIxbg==",
            _location: "/steal-css",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "steal-css@^1.3.2",
                name: "steal-css",
                escapedName: "steal-css",
                rawSpec: "^1.3.2",
                saveSpec: null,
                fetchSpec: "^1.3.2"
            },
            _requiredBy: ["/", "/shuttle-canstrap"],
            _resolved:
                "https://registry.npmjs.org/steal-css/-/steal-css-1.3.2.tgz",
            _shasum: "66aeac1cb88940cd740af57d51472d0380c45eb7",
            _spec: "steal-css@^1.3.2",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Bitovi" },
            "bit-docs": {
                dependencies: {
                    "bit-docs-glob-finder": "^0.0.5",
                    "bit-docs-dev": "^0.0.3",
                    "bit-docs-js": "^0.0.3",
                    "bit-docs-generate-readme": "^0.0.8"
                },
                glob: { pattern: "**/*.{js,md}", ignore: "node_modules/**/*" },
                readme: { apis: "./docs/apis.json" },
                parent: "steal-css"
            },
            bugs: { url: "https://github.com/stealjs/steal-css/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "CSS plugin for StealJS",
            devDependencies: {
                async: "^2.3.0",
                "bit-docs": "0.0.7",
                eslint: "^4.1.1",
                "http-server": "^0.10.0",
                qunitjs: "~2.4.0",
                saucelabs: "^1.4.0",
                steal: "^1.0.0",
                "steal-qunit": "^1.0.0",
                "steal-test-helpers": "^0.2.0",
                "steal-tools": "^1.0.0",
                "test-saucelabs": "0.0.2",
                testee: "^0.6.1",
                wd: "^1.2.0"
            },
            eslintConfig: {
                extends: "eslint:recommended",
                rules: {
                    "no-param-reassign": "error",
                    "no-useless-escape": "off"
                },
                env: { node: true, browser: true },
                globals: { doneSsr: true, Promise: true }
            },
            homepage: "https://github.com/stealjs/steal-css",
            keywords: ["StealJS", "CSS"],
            license: "MIT",
            main: "css.js",
            repository: {
                type: "git",
                url: "git+https://github.com/stealjs/steal-css.git"
            },
            scripts: {
                "build-1": "node test/css-paths/build.js",
                "build-2":
                    "steal-tools build --config test/css-before-js/stealconfig.js --main main --baseUrl test/css-before-js/ --minify false",
                "build-3": "node test/css-instantiated/build.js",
                document: "bit-docs",
                eslint: "eslint css.js",
                "http-server": "http-server -p 3000 --silent",
                "run-tests":
                    "testee test/test.html --browsers firefox --reporter Spec",
                saucelabs:
                    "npm run build-1 && npm run build-2 && npm run build-3 && node test/saucelabs",
                test:
                    "npm run eslint && npm run build-1 && npm run build-2 && npm run build-3 && npm run run-tests"
            },
            steal: {
                ext: { css: "steal-css" },
                map: { $css: "steal-css@1.3.2#css" }
            }
        },
        {
            name: "jquery",
            version: "3.3.1",
            origFileUrl: "./node_modules/jquery/package.json",
            fileUrl: "./node_modules/jquery/package.json",
            _from: "jquery@^3.3.1",
            _id: "jquery@3.3.1",
            _inBundle: false,
            _integrity:
                "sha512-Ubldcmxp5np52/ENotGxlLe6aGMvmF4R8S6tZjsP6Knsaxd/xp3Zrh50cG93lR6nPXyUFwzN3ZSOQI0wRJNdGg==",
            _location: "/jquery",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "jquery@^3.3.1",
                name: "jquery",
                escapedName: "jquery",
                rawSpec: "^3.3.1",
                saveSpec: null,
                fetchSpec: "^3.3.1"
            },
            _requiredBy: [
                "/",
                "/shuttle-access",
                "/shuttle-can-api",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved: "https://registry.npmjs.org/jquery/-/jquery-3.3.1.tgz",
            _shasum: "958ce29e81c9790f31be7792df5d4d95fc57fbca",
            _spec: "jquery@^3.3.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "JS Foundation and other contributors",
                url: "https://github.com/jquery/jquery/blob/3.3.1/AUTHORS.txt"
            },
            bugs: { url: "https://github.com/jquery/jquery/issues" },
            bundleDependencies: false,
            commitplease: {
                nohook: true,
                components: [
                    "Docs",
                    "Tests",
                    "Build",
                    "Support",
                    "Release",
                    "Core",
                    "Ajax",
                    "Attributes",
                    "Callbacks",
                    "CSS",
                    "Data",
                    "Deferred",
                    "Deprecated",
                    "Dimensions",
                    "Effects",
                    "Event",
                    "Manipulation",
                    "Offset",
                    "Queue",
                    "Selector",
                    "Serialize",
                    "Traversing",
                    "Wrap"
                ],
                markerPattern: "^((clos|fix|resolv)(e[sd]|ing))|^(refs?)",
                ticketPattern:
                    "^((Closes|Fixes) ([a-zA-Z]{2,}-)[0-9]+)|^(Refs? [^#])"
            },
            dependencies: {},
            deprecated: false,
            description: "JavaScript library for DOM operations",
            devDependencies: {
                "babel-core": "7.0.0-beta.0",
                "babel-plugin-transform-es2015-for-of": "7.0.0-beta.0",
                commitplease: "2.7.10",
                "core-js": "2.4.1",
                "eslint-config-jquery": "1.0.1",
                grunt: "1.0.1",
                "grunt-babel": "7.0.0",
                "grunt-cli": "1.2.0",
                "grunt-compare-size": "0.4.2",
                "grunt-contrib-uglify": "3.0.1",
                "grunt-contrib-watch": "1.0.0",
                "grunt-eslint": "20.0.0",
                "grunt-git-authors": "3.2.0",
                "grunt-jsonlint": "1.1.0",
                "grunt-karma": "2.0.0",
                "grunt-newer": "1.3.0",
                "grunt-npmcopy": "0.1.0",
                "gzip-js": "0.3.2",
                husky: "0.14.3",
                insight: "0.8.4",
                jsdom: "5.6.1",
                karma: "1.7.0",
                "karma-browserstack-launcher": "1.3.0",
                "karma-chrome-launcher": "2.2.0",
                "karma-firefox-launcher": "1.0.1",
                "karma-qunit": "1.2.1",
                "load-grunt-tasks": "3.5.2",
                "native-promise-only": "0.8.1",
                "promises-aplus-tests": "2.1.2",
                q: "1.5.0",
                "qunit-assert-step": "1.0.3",
                qunitjs: "1.23.1",
                "raw-body": "2.2.0",
                requirejs: "2.3.3",
                sinon: "2.3.7",
                sizzle: "2.3.3",
                "strip-json-comments": "2.0.1",
                testswarm: "1.1.0",
                "uglify-js": "3.3.4"
            },
            homepage: "https://jquery.com",
            keywords: ["jquery", "javascript", "browser", "library"],
            license: "MIT",
            main: "dist/jquery.js",
            repository: {
                type: "git",
                url: "git+https://github.com/jquery/jquery.git"
            },
            scripts: {
                build: "npm install && grunt",
                commitmsg: "node node_modules/commitplease",
                jenkins: "npm run test:browserless",
                precommit: "grunt lint:newer qunit_fixture",
                start: "grunt watch",
                test: "grunt && grunt test:slow && grunt karma:main",
                "test:browser": "grunt && grunt karma:main",
                "test:browserless": "grunt && grunt test:slow"
            },
            title: "jQuery"
        },
        {
            name: "popper.js",
            version: "1.14.3",
            origFileUrl: "./node_modules/popper.js/package.json",
            fileUrl: "./node_modules/popper.js/package.json",
            _from: "popper.js@^1.14.3",
            _id: "popper.js@1.14.3",
            _inBundle: false,
            _integrity: "sha1-FDj5jQRqz3tNeM1QK/QYrGTU8JU=",
            _location: "/popper.js",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "popper.js@^1.14.3",
                name: "popper.js",
                escapedName: "popper.js",
                rawSpec: "^1.14.3",
                saveSpec: null,
                fetchSpec: "^1.14.3"
            },
            _requiredBy: [
                "/",
                "/shuttle-canstrap",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved:
                "https://registry.npmjs.org/popper.js/-/popper.js-1.14.3.tgz",
            _shasum: "1438f98d046acf7b4d78cd502bf418ac64d4f095",
            _spec: "popper.js@^1.14.3",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Federico Zivolo",
                email: "federico.zivolo@gmail.com"
            },
            bugs: { url: "https://github.com/FezVrasta/popper.js/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Contributors",
                    url:
                        "https://github.com/FezVrasta/popper.js/graphs/contributors"
                }
            ],
            deprecated: false,
            description: "A kickass library to manage your poppers",
            devDependencies: {
                "@popperjs/bundle": "^1.0.2",
                "@popperjs/eslint-config-popper": "^1.0.0",
                "@popperjs/test": "^1.0.0",
                "@popperjs/test-utils": "^1.0.0",
                eslint: "^4.1.1",
                "nuget-publish": "^1.0.3",
                typescript: "^2.7.1"
            },
            homepage: "https://popper.js.org",
            keywords: [
                "popperjs",
                "component",
                "drop",
                "tooltip",
                "popover",
                "position",
                "attached"
            ],
            license: "MIT",
            main: "dist/umd/popper.js",
            module: "dist/esm/popper.js",
            repository: {
                type: "git",
                url: "git+https://github.com/FezVrasta/popper.js.git"
            },
            resolutions: { micromatch: "^3.0.3" },
            scripts: {
                build: "node bundle.js",
                coverage: "COVERAGE=true yarn test",
                lint: "eslint .",
                postpublish: "nuget-publish && ./bower-publish.sh",
                posttest: "tsc --project tests/types/tsconfig.json",
                prebuild: "yarn lint",
                prepare: "yarn build",
                pretest: "yarn lint",
                test: "popper-karma",
                "test:dev": "BROWSERS=Chrome NODE_ENV=development yarn test"
            },
            types: "index.d.ts"
        },
        {
            name: "bootstrap",
            version: "4.1.2",
            origFileUrl: "./node_modules/bootstrap/package.json",
            fileUrl: "./node_modules/bootstrap/package.json",
            _from: "bootstrap@^4.1.2",
            _id: "bootstrap@4.1.2",
            _inBundle: false,
            _integrity:
                "sha512-3bP609EdMc/8EwgGp8KgpN8HwnR4V4lZ9CTi5pImMrXNxpkw7dK1B05aMwQWpG1ZWmTLlBSN/uzkuz5GsmQNFA==",
            _location: "/bootstrap",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "bootstrap@^4.1.2",
                name: "bootstrap",
                escapedName: "bootstrap",
                rawSpec: "^4.1.2",
                saveSpec: null,
                fetchSpec: "^4.1.2"
            },
            _requiredBy: ["/", "/shuttle-canstrap"],
            _resolved:
                "https://registry.npmjs.org/bootstrap/-/bootstrap-4.1.2.tgz",
            _shasum: "aee2a93472e61c471fc79fb475531dcbc87de326",
            _spec: "bootstrap@^4.1.2",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "The Bootstrap Authors",
                url: "https://github.com/twbs/bootstrap/graphs/contributors"
            },
            browserslist: [
                ">= 1%",
                "last 1 major version",
                "not dead",
                "Chrome >= 45",
                "Firefox >= 38",
                "Edge >= 12",
                "Explorer >= 10",
                "iOS >= 9",
                "Safari >= 9",
                "Android >= 4.4",
                "Opera >= 30"
            ],
            bugs: { url: "https://github.com/twbs/bootstrap/issues" },
            bundleDependencies: false,
            bundlesize: [
                { path: "./dist/css/bootstrap-grid.css", maxSize: "5 kB" },
                { path: "./dist/css/bootstrap-grid.min.css", maxSize: "5 kB" },
                { path: "./dist/css/bootstrap-reboot.css", maxSize: "3 kB" },
                {
                    path: "./dist/css/bootstrap-reboot.min.css",
                    maxSize: "3 kB"
                },
                { path: "./dist/css/bootstrap.css", maxSize: "25 kB" },
                { path: "./dist/css/bootstrap.min.css", maxSize: "21 kB" },
                { path: "./dist/js/bootstrap.bundle.js", maxSize: "45 kB" },
                { path: "./dist/js/bootstrap.bundle.min.js", maxSize: "25 kB" },
                { path: "./dist/js/bootstrap.js", maxSize: "21 kB" },
                { path: "./dist/js/bootstrap.min.js", maxSize: "15 kB" }
            ],
            contributors: [{ name: "Twitter, Inc." }],
            dependencies: {},
            deprecated: false,
            description:
                "The most popular front-end framework for developing responsive, mobile first projects on the web.",
            devDependencies: {
                "@babel/cli": "7.0.0-beta.52",
                "@babel/core": "7.0.0-beta.52",
                "@babel/preset-env": "7.0.0-beta.52",
                autoprefixer: "^8.6.5",
                "babel-eslint": "^8.2.5",
                "babel-plugin-istanbul": "^4.1.6",
                "babel-plugin-transform-es2015-modules-strip": "^0.1.1",
                "broken-link-checker": "^0.7.8",
                bundlesize: "^0.15.3",
                "clean-css-cli": "^4.1.11",
                coveralls: "^3.0.2",
                "cross-env": "^5.2.0",
                eslint: "^5.0.1",
                "eslint-plugin-compat": "^2.4.0",
                glob: "^7.1.2",
                "htmllint-cli": "^0.0.7",
                "http-server": "^0.11.1",
                jsunitsaucelabs: "^1.3.2",
                karma: "^2.0.4",
                "karma-chrome-launcher": "^2.2.0",
                "karma-coverage-istanbul-reporter": "^2.0.1",
                "karma-detect-browsers": "^2.3.2",
                "karma-firefox-launcher": "^1.1.0",
                "karma-qunit": "^2.1.0",
                "karma-sinon": "^1.0.5",
                "node-sass": "^4.9.1",
                nodemon: "^1.17.5",
                "npm-run-all": "^4.1.3",
                "popper.js": "^1.14.3",
                "postcss-cli": "^5.0.1",
                qunit: "^2.6.1",
                rollup: "^0.62.0",
                "rollup-plugin-babel": "4.0.0-beta.5",
                "rollup-plugin-node-resolve": "^3.3.0",
                shelljs: "^0.8.2",
                shx: "^0.3.1",
                sinon: "^6.1.2",
                "sri-toolbox": "^0.2.0",
                stylelint: "^9.3.0",
                "stylelint-config-recommended-scss": "^3.2.0",
                "stylelint-config-standard": "^18.2.0",
                "stylelint-order": "^0.8.1",
                "stylelint-scss": "^3.1.3",
                "uglify-js": "^3.4.3",
                "vnu-jar": "^18.3.0",
                "workbox-build": "^3.3.1"
            },
            engines: { node: ">=6" },
            files: ["dist/", "js/{src,dist}/", "scss/"],
            homepage: "https://getbootstrap.com/",
            jspm: {
                registry: "npm",
                main: "js/bootstrap",
                directories: { lib: "dist" },
                shim: {
                    "js/bootstrap": {
                        deps: ["jquery", "popper.js"],
                        exports: "$"
                    }
                },
                dependencies: {},
                peerDependencies: {
                    jquery: "1.9.1 - 3",
                    "popper.js": "^1.14.1"
                }
            },
            keywords: [
                "css",
                "sass",
                "mobile-first",
                "responsive",
                "front-end",
                "framework",
                "web"
            ],
            license: "MIT",
            main: "dist/js/bootstrap",
            peerDependencies: { jquery: "1.9.1 - 3", "popper.js": "^1.14.3" },
            repository: {
                type: "git",
                url: "git+https://github.com/twbs/bootstrap.git"
            },
            sass: "scss/bootstrap.scss",
            scripts: {
                blc:
                    "blc --exclude-external --filter-level 3 --get --ordered --recursive --host-requests 4 --input http://localhost:3000/",
                bundlesize: "bundlesize",
                "check-broken-links":
                    'npm-run-all --parallel --race "http-server -- _gh_pages/" blc',
                coveralls: "shx cat js/coverage/lcov.info | coveralls",
                css:
                    "npm-run-all --parallel css-lint* css-compile* --sequential css-prefix* css-minify*",
                "css-compile":
                    "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap.scss dist/css/bootstrap.css && node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap-grid.scss dist/css/bootstrap-grid.css && node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 scss/bootstrap-reboot.scss dist/css/bootstrap-reboot.css",
                "css-compile-docs":
                    "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 site/docs/4.1/assets/scss/docs.scss site/docs/4.1/assets/css/docs.min.css",
                "css-copy":
                    "shx mkdir -p site/docs/4.1/dist/ && shx cp -r dist/css/ site/docs/4.1/dist/",
                "css-docs":
                    "npm-run-all --parallel css-lint-docs css-compile-docs --sequential css-prefix-docs css-minify-docs",
                "css-lint": 'stylelint --syntax scss "scss/**/*.scss"',
                "css-lint-docs":
                    'stylelint --syntax scss "site/docs/4.1/assets/scss/*.scss" && stylelint "docs/**/*.css"',
                "css-lint-vars":
                    "node build/lint-vars.js scss/ site/docs/4.1/assets/scss/",
                "css-main":
                    "npm-run-all --parallel css-lint css-compile --sequential css-prefix css-minify css-copy",
                "css-minify":
                    "cleancss --level 1 --source-map --source-map-inline-sources --output dist/css/bootstrap.min.css dist/css/bootstrap.css && cleancss --level 1 --source-map --source-map-inline-sources --output dist/css/bootstrap-grid.min.css dist/css/bootstrap-grid.css && cleancss --level 1 --source-map --source-map-inline-sources --output dist/css/bootstrap-reboot.min.css dist/css/bootstrap-reboot.css",
                "css-minify-docs":
                    "cleancss --level 1 --source-map --source-map-inline-sources --output site/docs/4.1/assets/css/docs.min.css site/docs/4.1/assets/css/docs.min.css",
                "css-prefix":
                    'postcss --config build/postcss.config.js --replace "dist/css/*.css" "!dist/css/*.min.css"',
                "css-prefix-docs":
                    'postcss --config build/postcss.config.js --replace "site/docs/4.1/assets/css/docs.min.css" "docs/**/*.css"',
                dist: "npm-run-all --parallel css-main js",
                docs:
                    "npm-run-all --parallel css-docs js-docs --sequential docs-compile docs-lint",
                "docs-compile": "bundle exec jekyll build",
                "docs-github":
                    'shx echo "github: true" > twbsconfig.yml && npm run docs-compile -- --config _config.yml,twbsconfig.yml && shx rm ./twbsconfig.yml',
                "docs-github-serve":
                    "npm run docs-serve -- --skip-initial-build --no-watch",
                "docs-lint": "npm-run-all docs-lint-*",
                "docs-lint-htmllint":
                    'htmllint --rc build/.htmllintrc "_gh_pages/**/*.html" "js/tests/**/*.html"',
                "docs-lint-vnu-jar": "node build/vnu-jar.js",
                "docs-serve": "bundle exec jekyll serve",
                "docs-workbox-precache": "node build/workbox.js",
                "http-server": "http-server --silent -p 3000",
                js: "npm-run-all js-lint* js-compile js-minify js-copy",
                "js-compile":
                    "npm-run-all --parallel js-compile-* --sequential js-copy",
                "js-compile-bundle":
                    "rollup --environment BUNDLE:true --config build/rollup.config.js --sourcemap",
                "js-compile-plugins":
                    "cross-env PLUGINS=true babel js/src/ --out-dir js/dist/ --source-maps",
                "js-compile-plugins-coverage":
                    "cross-env PLUGINS=true NODE_ENV=test babel js/src/ --out-dir js/coverage/dist/ --source-maps",
                "js-compile-standalone":
                    "rollup --environment BUNDLE:false --config build/rollup.config.js --sourcemap",
                "js-copy":
                    "shx mkdir -p site/docs/4.1/dist/ && shx cp -r dist/js/ site/docs/4.1/dist/",
                "js-docs": "npm-run-all js-lint-docs js-minify-docs",
                "js-lint": "eslint js/src js/tests build/",
                "js-lint-docs": "eslint site/docs/4.1/assets/js/ site/sw.js",
                "js-main": "npm-run-all js-lint js-compile js-minify",
                "js-minify": "npm-run-all --parallel js-minify-*",
                "js-minify-bundle":
                    'uglifyjs --compress typeofs=false --mangle --comments "/^!/" --source-map "content=dist/js/bootstrap.bundle.js.map,includeSources,url=bootstrap.bundle.min.js.map" --output dist/js/bootstrap.bundle.min.js dist/js/bootstrap.bundle.js',
                "js-minify-docs":
                    'uglifyjs --mangle --comments "/^!/" --output site/docs/4.1/assets/js/docs.min.js site/docs/4.1/assets/js/vendor/anchor.min.js site/docs/4.1/assets/js/vendor/clipboard.min.js site/docs/4.1/assets/js/vendor/holder.min.js "site/docs/4.1/assets/js/src/*.js"',
                "js-minify-standalone":
                    'uglifyjs --compress typeofs=false --mangle --comments "/^!/" --source-map "content=dist/js/bootstrap.js.map,includeSources,url=bootstrap.min.js.map" --output dist/js/bootstrap.min.js dist/js/bootstrap.js',
                "js-test": "npm-run-all js-test-karma*",
                "js-test-cloud":
                    "npm-run-all --parallel --race http-server saucelabs-test",
                "js-test-karma": "karma start js/tests/karma.conf.js",
                "js-test-karma-bundle":
                    "cross-env karma start js/tests/karma-bundle.conf.js",
                "js-test-karma-bundle-old":
                    "cross-env USE_OLD_JQUERY=true npm run js-test-karma-bundle",
                "js-test-karma-old":
                    "cross-env USE_OLD_JQUERY=true npm run js-test-karma",
                "maintenance-dependencies":
                    'ncu -a -x jquery && npm update && bundle update && shx echo "Manually update site/docs/4.1/assets/js/vendor/*, js/tests/vendor/* and .travis.yml"',
                "postdocs-compile": "npm run docs-workbox-precache",
                "release-sri": "node build/generate-sri.js",
                "release-version": "node build/change-version.js",
                "release-zip":
                    "cd dist/ && zip -r9 bootstrap-$npm_package_version-dist.zip * && shx mv bootstrap-$npm_package_version-dist.zip ..",
                "saucelabs-test": "node build/saucelabs-unit-test.js",
                start: "npm-run-all --parallel watch docs-serve",
                test:
                    "npm-run-all dist js-test docs-compile docs-lint bundlesize",
                watch: "npm-run-all --parallel watch-*",
                "watch-css-docs":
                    'nodemon --watch site/docs/4.1/assets/scss/ --ext scss --exec "npm run css-docs"',
                "watch-css-main":
                    'nodemon --watch scss/ --ext scss --exec "npm run css-main"',
                "watch-js-docs":
                    'nodemon --watch site/docs/4.1/assets/js/src/ --ext js --exec "npm run js-docs"',
                "watch-js-main":
                    'nodemon --watch js/src/ --ext js --exec "npm run js-compile"'
            },
            style: "dist/css/bootstrap.css"
        },
        {
            name: "moment",
            version: "2.22.2",
            origFileUrl: "./node_modules/moment/package.json",
            fileUrl: "./node_modules/moment/package.json",
            _from: "moment@^2.22.1",
            _id: "moment@2.22.2",
            _inBundle: false,
            _integrity: "sha1-PCV/mDn8DpP/UxSWMiOeuQeD/2Y=",
            _location: "/moment",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "moment@^2.22.1",
                name: "moment",
                escapedName: "moment",
                rawSpec: "^2.22.1",
                saveSpec: null,
                fetchSpec: "^2.22.1"
            },
            _requiredBy: [
                "/",
                "/moment-timezone",
                "/tempusdominus-bootstrap-4"
            ],
            _resolved: "https://registry.npmjs.org/moment/-/moment-2.22.2.tgz",
            _shasum: "3c257f9839fc0e93ff53149632239eb90783ff66",
            _spec: "moment@^2.22.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Iskren Ivov Chernev",
                email: "iskren.chernev@gmail.com",
                url: "https://github.com/ichernev"
            },
            bugs: { url: "https://github.com/moment/moment/issues" },
            bundleDependencies: false,
            contributors: [
                {
                    name: "Tim Wood",
                    email: "washwithcare@gmail.com",
                    url: "http://timwoodcreates.com/"
                },
                { name: "Rocky Meza", url: "http://rockymeza.com" },
                {
                    name: "Matt Johnson",
                    email: "mj1856@hotmail.com",
                    url: "http://codeofmatt.com"
                },
                {
                    name: "Isaac Cambron",
                    email: "isaac@isaaccambron.com",
                    url: "http://isaaccambron.com"
                },
                {
                    name: "Andre Polykanine",
                    email: "andre@oire.org",
                    url: "https://github.com/oire"
                }
            ],
            deprecated: false,
            description: "Parse, validate, manipulate, and display dates",
            devDependencies: {
                benchmark: "latest",
                coveralls: "^2.11.2",
                "es6-promise": "latest",
                grunt: "~0.4",
                "grunt-benchmark": "latest",
                "grunt-cli": "latest",
                "grunt-contrib-clean": "latest",
                "grunt-contrib-concat": "latest",
                "grunt-contrib-copy": "latest",
                "grunt-contrib-jshint": "latest",
                "grunt-contrib-uglify": "latest",
                "grunt-contrib-watch": "latest",
                "grunt-env": "latest",
                "grunt-exec": "latest",
                "grunt-jscs": "latest",
                "grunt-karma": "latest",
                "grunt-nuget": "latest",
                "grunt-string-replace": "latest",
                karma: "latest",
                "karma-chrome-launcher": "latest",
                "karma-firefox-launcher": "latest",
                "karma-qunit": "latest",
                "karma-sauce-launcher": "latest",
                "load-grunt-tasks": "~3.5.2",
                "node-qunit": "^1.0.0",
                nyc: "^2.1.4",
                qunit: "^2.6.0",
                rollup: "latest",
                spacejam: "latest",
                typescript: "^1.8.10",
                "uglify-js": "latest"
            },
            dojoBuild: "package.js",
            ender: "./ender.js",
            engines: { node: "*" },
            homepage: "http://momentjs.com",
            "jsnext:main": "./src/moment.js",
            jspm: {
                files: ["moment.js", "moment.d.ts", "locale"],
                map: { moment: "./moment" },
                buildConfig: { uglify: true }
            },
            keywords: [
                "moment",
                "date",
                "time",
                "parse",
                "format",
                "validate",
                "i18n",
                "l10n",
                "ender"
            ],
            license: "MIT",
            main: "./moment.js",
            repository: {
                type: "git",
                url: "git+https://github.com/moment/moment.git"
            },
            scripts: {
                coverage: "nyc npm test && nyc report",
                coveralls:
                    "nyc npm test && nyc report --reporter=text-lcov | coveralls",
                test: "grunt test",
                "typescript-test": "tsc --project typing-tests"
            },
            spm: { main: "moment.js", output: ["locale/*.js"] },
            typings: "./moment.d.ts"
        },
        {
            name: "tempusdominus-bootstrap-4",
            version: "5.0.1",
            origFileUrl:
                "./node_modules/tempusdominus-bootstrap-4/package.json",
            fileUrl: "./node_modules/tempusdominus-bootstrap-4/package.json",
            _from: "tempusdominus-bootstrap-4@^5.0.1",
            _id: "tempusdominus-bootstrap-4@5.0.1",
            _inBundle: false,
            _integrity:
                "sha512-5uDhTpWa2sX37go98ChKXD10yszLOh/0kDRsHxd/JXW+fnGyjlyYT25UEWS3NMluPjGnq+xamEvyeJpBm7vfOg==",
            _location: "/tempusdominus-bootstrap-4",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "tempusdominus-bootstrap-4@^5.0.1",
                name: "tempusdominus-bootstrap-4",
                escapedName: "tempusdominus-bootstrap-4",
                rawSpec: "^5.0.1",
                saveSpec: null,
                fetchSpec: "^5.0.1"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/tempusdominus-bootstrap-4/-/tempusdominus-bootstrap-4-5.0.1.tgz",
            _shasum: "713d5d1547caf7784e510e480e32997ccbe7e511",
            _spec: "tempusdominus-bootstrap-4@^5.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Jonathan Peterson" },
            bugs: {
                url: "https://github.com/tempusdominus/bootstrap-4/issues"
            },
            bundleDependencies: false,
            dependencies: {
                bootstrap: "4.0.0",
                jquery: "^3.0",
                moment: "^2.22.2",
                "moment-timezone": "^0.5.11",
                "popper.js": "^1.12.9"
            },
            deprecated: false,
            description:
                "A date/time picker component designed to work with Bootstrap 4 and Momentjs. For usage, installation and demos see Project Site on GitHub",
            devDependencies: {
                "babel-plugin-transform-es2015-modules-strip": "^0.1.0",
                "babel-preset-es2015": "^6.24.1",
                grunt: "^1.0.3",
                "grunt-babel": "6.0.0",
                "grunt-contrib-concat": "^1.0.1",
                "grunt-contrib-uglify": "latest",
                "grunt-contrib-watch": "^1.1.0",
                "grunt-eslint": "^19.0.0",
                "grunt-jscs": "latest",
                "grunt-mkdocs": "^0.2.3",
                "grunt-sass": "3.0.0",
                "grunt-stamp": "^0.3.0",
                "grunt-string-replace": "latest",
                "load-grunt-tasks": "latest",
                "node-sass": "^4.9.0",
                "tempusdominus-core": "^5.0.0",
                "uglify-js": "^2.7.5"
            },
            files: [
                "build",
                "src/js/**/*.js",
                "src/sass/**/*.scss",
                "Gruntfile.js"
            ],
            homepage: "https://tempusdominus.github.io/bootstrap-4/",
            keywords: [
                "bootstrap",
                "datepicker",
                "datetimepicker",
                "timepicker",
                "moment"
            ],
            license: "MIT",
            main: "build/js/tempusdominus-bootstrap-4.js",
            peerDependencies: {
                bootstrap: "4.0.0",
                jquery: "^3.0",
                "popper.js": "^1.12.9",
                moment: "^2.17",
                "moment-timezone": "^0.5.11",
                "tempusdominus-core": "5.0.0"
            },
            repository: {
                type: "git",
                url: "git+https://github.com/tempusdominus/bootstrap-4.git"
            },
            scripts: {
                "change-version": "node grunt/change-version.js",
                "clean-css":
                    "cleancss --skip-advanced --source-map --output dist/css/bootstrap.min.css dist/css/bootstrap.css && cleancss --skip-advanced --source-map --output dist/css/bootstrap-grid.min.css dist/css/bootstrap-grid.css && cleancss --skip-advanced --source-map --output dist/css/bootstrap-reboot.min.css dist/css/bootstrap-reboot.css",
                "clean-css-docs":
                    "cleancss --skip-advanced --source-map --output docs/assets/css/docs.min.css docs/assets/css/docs.min.css",
                eslint:
                    "eslint --ignore-path .eslintignore js && eslint --config js/tests/.eslintrc.json --env node grunt Gruntfile.js && eslint --config js/tests/.eslintrc.json docs/assets/js/src docs/assets/js/ie-emulation-modes-warning.js docs/assets/js/ie10-viewport-bug-workaround.js",
                htmlhint: "htmlhint --config docs/.htmlhintrc _gh_pages/",
                postcss:
                    "postcss --config grunt/postcss.js --replace dist/css/*.css",
                "postcss-docs":
                    "postcss --config grunt/postcss.js --no-map --replace docs/assets/css/docs.min.css && postcss --config grunt/postcss.js --no-map --replace docs/examples/**/*.css",
                "scss-lint":
                    "bundle exec scss-lint --config scss/.scss-lint.yml --exclude scss/_normalize.scss scss/*.scss",
                "scss-lint-docs":
                    "bundle exec scss-lint --config scss/.scss-lint.yml --exclude docs/assets/scss/docs.scss docs/assets/scss/*.scss",
                test: "npm run eslint && grunt test",
                uglify:
                    "uglifyjs --compress warnings=false --mangle --output build/js/tempusdominus-bootstrap-3.min.js build/js/tempusdominus-bootstrap-3.js",
                "uglify-docs":
                    "uglifyjs --compress warnings=false --mangle --comments '/^!/' --output docs/assets/js/docs.min.js docs/assets/js/vendor/*.js docs/assets/js/src/application.js",
                "update-shrinkwrap":
                    "npm shrinkwrap --dev && shx mv ./npm-shrinkwrap.json ./grunt/npm-shrinkwrap.json"
            }
        },
        {
            name: "can-stache-route-helpers",
            version: "1.1.0",
            origFileUrl: "./node_modules/can-stache-route-helpers/package.json",
            fileUrl: "./node_modules/can-stache-route-helpers/package.json",
            _from: "can-stache-route-helpers@^1.1.0",
            _id: "can-stache-route-helpers@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-sX1/sEUjPOtxt5LMdy/1pvCntrROFJYa5jhxkv8IGYrnmRDXTJdVr4dooVjTovJUDVGT6qpcEiZ21gMXiNu4Bg==",
            _location: "/can-stache-route-helpers",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-route-helpers@^1.1.0",
                name: "can-stache-route-helpers",
                escapedName: "can-stache-route-helpers",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/can-stache-route-helpers/-/can-stache-route-helpers-1.1.0.tgz",
            _shasum: "f93f28ca2480e513169fca0841270c65382657b9",
            _spec: "can-stache-route-helpers@^1.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "DoneJS Core",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-stache-route-helpers/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.16.3",
                "can-route": "^4.0.0",
                "can-stache": "^4.0.0"
            },
            deprecated: false,
            description: "stache helpers for can-route",
            devDependencies: {
                "can-map": "^4.1.1",
                "can-route-mock": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-stache-route-helpers.html",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-route-helpers",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-route-helpers.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "shuttle-can-api",
            version: "1.0.19",
            origFileUrl: "./node_modules/shuttle-can-api/package.json",
            fileUrl: "./node_modules/shuttle-can-api/package.json",
            _from: "shuttle-can-api@latest",
            _id: "shuttle-can-api@1.0.19",
            _inBundle: false,
            _integrity:
                "sha512-uy/r0gk/ugJpme+zEYYCGnfdYuCrX96mEbSiYo+L/sCPmqwOfKGv6TVQDCc5R2jKp+o2zV5KbZR8wVJfgC6TqA==",
            _location: "/shuttle-can-api",
            _phantomChildren: {},
            _requested: {
                type: "tag",
                registry: true,
                raw: "shuttle-can-api@latest",
                name: "shuttle-can-api",
                escapedName: "shuttle-can-api",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: ["#USER", "/", "/shuttle-access"],
            _resolved:
                "https://registry.npmjs.org/shuttle-can-api/-/shuttle-can-api-1.0.19.tgz",
            _shasum: "b807dc59bb14a2b806237a7de42a9882f8e55a53",
            _spec: "shuttle-can-api@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-can-api/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-define": "^2.0.3",
                "can-util": "^3.11.3",
                jquery: "^3.3.1",
                "shuttle-guard": "^1.0.0"
            },
            deprecated: false,
            description: "Simple web-api client for use with CanJS.",
            devDependencies: {
                "can-fixture": "^2.0.3",
                chai: "^4.1.2",
                mocha: "^5.0.1",
                steal: "^1.7.0",
                "steal-mocha": "^1.0.0"
            },
            homepage: "https://github.com/shuttle-npm/shuttle-can-api#readme",
            keywords: ["canjs", "api"],
            license: "ISC",
            main: "shuttle-can-api.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-can-api.git"
            },
            scripts: { test: 'echo "Error: no test specified" && exit 1' }
        },
        {
            name: "shuttle-canstrap",
            version: "1.0.60",
            origFileUrl: "./node_modules/shuttle-canstrap/package.json",
            fileUrl: "./node_modules/shuttle-canstrap/package.json",
            _from: "shuttle-canstrap@latest",
            _id: "shuttle-canstrap@1.0.60",
            _inBundle: false,
            _integrity:
                "sha512-Ag0GL5qs5+Fr+42oyG483iENhsTki+TI1hx7Ch3WVDQ0i8/LtH927s3EqhoBYB1FUohDbN8CaS0/kkzcqvajzA==",
            _location: "/shuttle-canstrap",
            _phantomChildren: {
                "can-construct": "3.5.0",
                "can-define": "2.5.3",
                "can-dom-events": "1.3.0",
                "can-dom-mutate": "1.1.0",
                "can-event-queue": "1.1.0",
                "can-globals": "1.2.0",
                "can-key-tree": "1.2.0",
                "can-list": "4.1.0",
                "can-make-rest": "0.1.3",
                "can-map": "4.1.2",
                "can-namespace": "1.0.0",
                "can-observation": "4.1.0",
                "can-observation-recorder": "1.2.0",
                "can-param": "1.1.0",
                "can-parse-uri": "1.2.0",
                "can-queues": "1.1.2",
                "can-reflect": "1.17.0",
                "can-route": "4.3.0",
                "can-set": "1.6.0",
                "can-simple-observable": "2.2.0",
                "can-stache": "4.10.0",
                "can-stache-bindings": "4.3.1",
                "can-types": "1.4.0",
                "can-util": "3.12.0",
                "can-validate-interface": "1.0.2",
                "can-view-callbacks": "4.3.0",
                "can-view-import": "4.2.0",
                "can-view-nodelist": "4.3.2",
                "steal-stache": "4.1.2"
            },
            _requested: {
                type: "tag",
                registry: true,
                raw: "shuttle-canstrap@latest",
                name: "shuttle-canstrap",
                escapedName: "shuttle-canstrap",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: ["#USER", "/", "/shuttle-access"],
            _resolved:
                "https://registry.npmjs.org/shuttle-canstrap/-/shuttle-canstrap-1.0.60.tgz",
            _shasum: "4d2813151300dcb263e5091e86e7872c4bce55da",
            _spec: "shuttle-canstrap@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-canstrap/issues"
            },
            bundleDependencies: false,
            dependencies: {
                bootstrap: "^4.1.1",
                "can-component": "^4.2.0",
                "can-compute": "^4.0.3",
                "can-connect": "^2.0.6",
                "can-define": "^2.3.5",
                "can-route": "^4.1.2",
                "can-route-pushstate": "^4.0.5",
                "can-set": "^1.5.2",
                "can-stache": "^4.9.0",
                "can-stache-bindings": "^4.3.0",
                "font-awesome": "^4.7.0",
                "popper.js": "^1.14.3",
                "shuttle-guard": "^1.0.0",
                steal: "^1.12.4",
                "steal-css": "^1.3.2",
                tether: "^1.4.4"
            },
            deprecated: false,
            description: "CanJS components using Bootstrap v4",
            devDependencies: { "sync-glob": "^1.3.8" },
            homepage: "https://github.com/shuttle-npm/shuttle-canstrap#readme",
            keywords: ["shuttle", "canjs", "bootstrap"],
            license: "ISC",
            main: "shuttle-canstrap.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-canstrap.git"
            },
            scripts: {
                "sync-samples":
                    'node .\\node_modules\\sync-glob\\bin\\sync-glob.js --watch "**/*" "!node_modules/**/*" ..\\shuttle-canstrap-samples\\node_modules\\shuttle-canstrap\\'
            }
        },
        {
            name: "shuttle-access",
            version: "1.0.1",
            origFileUrl: "./node_modules/shuttle-access/package.json",
            fileUrl: "./node_modules/shuttle-access/package.json",
            _from: "shuttle-access@^1.0.1",
            _id: "shuttle-access@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-AIaYVYLPQkVv16Ji5T4WA5AL5U4W5NVf1Q9xJTTmdhFt2T0I4ztjj+eGBc4yI45HYt8b8G+H2h08HY1PoHBV6A==",
            _location: "/shuttle-access",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "shuttle-access@^1.0.1",
                name: "shuttle-access",
                escapedName: "shuttle-access",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/shuttle-access/-/shuttle-access-1.0.1.tgz",
            _shasum: "573b1c1623d551fd341061fdfbb2419dc3024c89",
            _spec: "shuttle-access@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-access/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-define": "^2.0.3",
                "can-util": "^3.11.5",
                jquery: "^3.3.1",
                "shuttle-can-api": "^1.0.15",
                "shuttle-canstrap": "^1.0.37",
                "shuttle-guard": "^1.0.0"
            },
            deprecated: false,
            description:
                "Shuttle.Access components for use in shuttle-canstrap applications (CanJS / Bootstrap).",
            devDependencies: {
                "can-fixture": "^2.0.3",
                chai: "^4.1.2",
                "chai-as-promised": "^7.1.1",
                mocha: "^5.0.4",
                steal: "^1.9.1",
                "steal-mocha": "^1.0.0"
            },
            homepage: "https://github.com/shuttle-npm/shuttle-access#readme",
            keywords: [
                "shuttle",
                "shuttle-access",
                "identity",
                "access-control"
            ],
            license: "ISC",
            main: "shuttle-access.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-access.git"
            },
            scripts: { test: "mocha" }
        },
        {
            name: "validate.js",
            version: "0.11.1",
            origFileUrl: "./node_modules/validate.js/package.json",
            fileUrl: "./node_modules/validate.js/package.json",
            _from: "validate.js@^0.11.1",
            _id: "validate.js@0.11.1",
            _inBundle: false,
            _integrity: "sha1-9Rw8bEpW5jgKIKfrEEJFA38qVA0=",
            _location: "/validate.js",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "validate.js@^0.11.1",
                name: "validate.js",
                escapedName: "validate.js",
                rawSpec: "^0.11.1",
                saveSpec: null,
                fetchSpec: "^0.11.1"
            },
            _requiredBy: [
                "/",
                "/can-define-validate-validatejs/can-validate-validatejs",
                "/can-validate-validatejs"
            ],
            _resolved:
                "https://registry.npmjs.org/validate.js/-/validate.js-0.11.1.tgz",
            _shasum: "f51c3c6c4a56e6380a20a7eb104245037f2a540d",
            _spec: "validate.js@^0.11.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Nicklas Ansman", email: "nicklas@ansman.se" },
            bugs: { url: "https://github.com/ansman/validate.js/issues" },
            bundleDependencies: false,
            deprecated: false,
            description: "Declarative validations for JavaScript",
            devDependencies: {
                coveralls: "2.11.9",
                grunt: "1.0.1",
                "grunt-contrib-jasmine": "1.0.3",
                "grunt-contrib-jshint": "1.0.0",
                "grunt-contrib-uglify": "1.0.1",
                "grunt-contrib-watch": "1.0.0",
                "grunt-docco": "0.4.0",
                "grunt-notify": "0.4.5",
                "grunt-template-jasmine-istanbul": "0.4.0"
            },
            homepage: "http://validatejs.org",
            keywords: ["validation", "validate", "server", "client"],
            license: "MIT",
            main: "validate.js",
            repository: {
                type: "git",
                url: "git+https://github.com/ansman/validate.js.git"
            },
            scripts: {
                build: "grunt build",
                docs: "grunt docco",
                test: "grunt test",
                watch: "grunt watch"
            },
            typings: "validate.d.ts"
        },
        {
            name: "font-awesome",
            version: "4.7.0",
            origFileUrl: "./node_modules/font-awesome/package.json",
            fileUrl: "./node_modules/font-awesome/package.json",
            _from: "font-awesome@^4.7.0",
            _id: "font-awesome@4.7.0",
            _inBundle: false,
            _integrity: "sha1-j6jPBBGhoxr9B7BtKQK7n8gVoTM=",
            _location: "/font-awesome",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "font-awesome@^4.7.0",
                name: "font-awesome",
                escapedName: "font-awesome",
                rawSpec: "^4.7.0",
                saveSpec: null,
                fetchSpec: "^4.7.0"
            },
            _requiredBy: ["/shuttle-canstrap"],
            _resolved:
                "https://registry.npmjs.org/font-awesome/-/font-awesome-4.7.0.tgz",
            _shasum: "8fa8cf0411a1a31afd07b06d2902bb9fc815a133",
            _spec: "font-awesome@^4.7.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\shuttle-canstrap",
            author: {
                name: "Dave Gandy",
                email: "dave@fontawesome.io",
                url: "http://twitter.com/davegandy"
            },
            bugs: { url: "http://github.com/FortAwesome/Font-Awesome/issues" },
            bundleDependencies: false,
            contributors: [
                { name: "Brian Talbot", url: "http://twitter.com/talbs" },
                {
                    name: "Travis Chase",
                    url: "http://twitter.com/supercodepoet"
                },
                { name: "Rob Madole", url: "http://twitter.com/robmadole" },
                {
                    name: "Geremia Taglialatela",
                    url: "http://twitter.com/gtagliala"
                }
            ],
            dependencies: {},
            deprecated: false,
            description: "The iconic font and CSS framework",
            engines: { node: ">=0.10.3" },
            homepage: "http://fontawesome.io/",
            keywords: [
                "font",
                "awesome",
                "fontawesome",
                "icon",
                "font",
                "bootstrap"
            ],
            license: "(OFL-1.1 AND MIT)",
            repository: {
                type: "git",
                url: "git+https://github.com/FortAwesome/Font-Awesome.git"
            },
            style: "css/font-awesome.css"
        },
        {
            name: "shuttle-guard",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/shuttle-can-api/node_modules/shuttle-guard/package.json",
            origFileUrl: "./node_modules/shuttle-guard/package.json",
            fileUrl: "./node_modules/shuttle-guard/package.json",
            _from: "shuttle-guard@^1.0.0",
            _id: "shuttle-guard@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-8ghDgPpykaH8qDfb7zn8ii7R2jlkZEkLDgxlEH8MlG9jEArM6f+2sJirynjp2EMxPHpK5Sp7aybT0fMGh3HWkw==",
            _location: "/shuttle-guard",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "shuttle-guard@^1.0.0",
                name: "shuttle-guard",
                escapedName: "shuttle-guard",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/",
                "/shuttle-access",
                "/shuttle-can-api",
                "/shuttle-canstrap"
            ],
            _resolved:
                "https://registry.npmjs.org/shuttle-guard/-/shuttle-guard-1.0.0.tgz",
            _shasum: "2603352e1ad4962fba75b69a76d0a3b7ed42201b",
            _spec: "shuttle-guard@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Eben Roux" },
            bugs: {
                url: "https://github.com/shuttle-npm/shuttle-guard/issues"
            },
            bundleDependencies: false,
            deprecated: false,
            description: "Guard methods.",
            homepage: "https://github.com/shuttle-npm/shuttle-guard#readme",
            keywords: ["guard"],
            license: "BSD-3-Clause",
            main: "shuttle-guard.js",
            repository: {
                type: "git",
                url: "git+https://github.com/shuttle-npm/shuttle-guard.git"
            },
            scripts: { test: 'echo "Error: no test specified" && exit 1' }
        },
        {
            name: "can-define",
            version: "2.5.3",
            nestedFileUrl:
                "./node_modules/shuttle-can-api/node_modules/can-define/package.json",
            origFileUrl: "./node_modules/can-define/package.json",
            fileUrl: "./node_modules/can-define/package.json",
            _from: "can-define@latest",
            _id: "can-define@2.5.3",
            _inBundle: false,
            _integrity:
                "sha512-N08fw8F6wkPqE1k1HXwykQtuTM54W3KINdpNS0CpB2Y2XWWZAxU850lB4I5J3/KzsNBHncLadiZQVo8KYg7PvA==",
            _location: "/can-define",
            _phantomChildren: {},
            _requested: {
                type: "tag",
                registry: true,
                raw: "can-define@latest",
                name: "can-define",
                escapedName: "can-define",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: [
                "#USER",
                "/",
                "/can-component",
                "/can-connect",
                "/can-define-validate-validatejs",
                "/shuttle-access",
                "/shuttle-can-api",
                "/shuttle-canstrap",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-define/-/can-define-2.5.3.tgz",
            _shasum: "3b7319b455e8c772f3a8b8e6c0e97968a9b09d75",
            _spec: "can-define@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Bitovi" },
            bugs: { url: "https://github.com/canjs/can-define/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.2.0",
                "can-data-types": "<2.0.0",
                "can-define-lazy-value": "^1.0.0",
                "can-diff": "^1.0.0",
                "can-event-queue": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.15.0",
                "can-simple-observable": "^2.0.5",
                "can-single-reference": "^1.0.0",
                "can-string-to-any": "^1.0.1",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description:
                "Create observable objects with JS dot operator compatibility",
            devDependencies: {
                "can-reflect-tests": "<2.0.0",
                "can-test-helpers": "^1.1.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                serve: "^9.0.0",
                steal: "^1.0.7",
                "steal-qunit": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-define",
            keywords: ["CanJS"],
            license: "MIT",
            main: "can-define.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-define.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint:
                    "jshint --config .jshintrc --exclude ./node_modules,./dist .",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                start: "serve -p 8080",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-util",
            version: "3.12.0",
            nestedFileUrl:
                "./node_modules/shuttle-can-api/node_modules/can-util/package.json",
            origFileUrl: "./node_modules/can-util/package.json",
            fileUrl: "./node_modules/can-util/package.json",
            _from: "can-util@^3.11.5",
            _id: "can-util@3.12.0",
            _inBundle: false,
            _integrity:
                "sha512-xpviYXwKQrLIC1vMrxqvrs1nnhGxgH9pJniJKNziPCRBWrmzpSF0fMxazZ8VOZHHHuxmVLW/PBTBxXsUN9Jlzw==",
            _location: "/can-util",
            _phantomChildren: {
                "can-cid": "1.3.0",
                "can-dom-events": "1.3.0",
                "can-globals": "1.2.0",
                "can-namespace": "1.0.0",
                "can-param": "1.1.0",
                "can-parse-uri": "1.2.0",
                "can-reflect": "1.17.0"
            },
            _requested: {
                type: "range",
                registry: true,
                raw: "can-util@^3.11.5",
                name: "can-util",
                escapedName: "can-util",
                rawSpec: "^3.11.5",
                saveSpec: null,
                fetchSpec: "^3.11.5"
            },
            _requiredBy: [
                "/",
                "/can-make-rest",
                "/can-route-pushstate",
                "/can-set",
                "/shuttle-access",
                "/shuttle-can-api",
                "/shuttle-canstrap/can-connect",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-util/-/can-util-3.12.0.tgz",
            _shasum: "8dd093239aa6e368138d972ff76522e774534607",
            _spec: "can-util@^3.11.5",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-util/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-ajax": "^1.0.0",
                "can-assign": "^1.0.0",
                "can-cid": "^1.1.0",
                "can-deparam": "^1.0.0",
                "can-dom-data-state": "^0.2.0",
                "can-event-dom-enter": "^1.0.4",
                "can-event-dom-radiochange": "^1.0.4",
                "can-globals": "^1.1.1",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-param": "^1.0.0",
                "can-parse-uri": "^1.0.0",
                "can-reflect": "^1.2.0",
                "can-symbol": "^1.0.0",
                "can-types": "^1.1.0"
            },
            deprecated: false,
            description: "Common utilities for CanJS projects",
            devDependencies: {
                async: "^2.2.0",
                "can-vdom": "^3.2.3",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                qunitjs: "^2.4.0",
                saucelabs: "^1.4.0",
                steal: "^1.11.4",
                "steal-css": "^1.2.5",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.4.1",
                "test-saucelabs": "0.0.3",
                testee: "^0.8.0",
                wd: "^1.1.3",
                xmlhttprequest2: "^1.0.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-util",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-util.git"
            },
            scripts: {
                build: "node build.js",
                ci:
                    "npm run build && npm run test && node test/test-sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint dom/. js/. *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run test:server && npm run testee",
                "test:server": "TEST=qunit qunit test/node.js",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-stache",
            version: "4.10.0",
            origFileUrl: "./node_modules/can-stache/package.json",
            fileUrl: "./node_modules/can-stache/package.json",
            _from: "can-stache@^4.5.10",
            _id: "can-stache@4.10.0",
            _inBundle: false,
            _integrity:
                "sha512-CGWxBDSn74TJCsc8WP2BVQzg7GZ2t2thUu1uqcqmSmzRT0JmhCt6OMy/9UzNb94CxLBbb01bOc4cqXcWleR8XQ==",
            _location: "/can-stache",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache@^4.5.10",
                name: "can-stache",
                escapedName: "can-stache",
                rawSpec: "^4.5.10",
                saveSpec: null,
                fetchSpec: "^4.5.10"
            },
            _requiredBy: [
                "/",
                "/can-component",
                "/can-stache-bindings",
                "/can-stache-route-helpers",
                "/shuttle-canstrap",
                "/shuttle-canstrap/can-connect",
                "/steal-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache/-/can-stache-4.10.0.tgz",
            _shasum: "40b2d17f4f4294010015a28635c31662573f1060",
            _spec: "can-stache@^4.5.10",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-attribute-encoder": "^1.0.0",
                "can-child-nodes": "^1.0.0",
                "can-define-lazy-value": "^1.0.2",
                "can-dom-data": "^1.0.1",
                "can-dom-data-state": "^1.0.0",
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-globals": "^1.1.1",
                "can-import-module": "^1.0.0",
                "can-join-uris": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.16.4",
                "can-simple-observable": "^2.0.3",
                "can-stache-ast": "^1.0.0",
                "can-stache-helpers": "^1.0.0",
                "can-stache-key": "^1.3.1",
                "can-string": "<2.0.0",
                "can-symbol": "^1.0.0",
                "can-view-callbacks": "^4.2.0",
                "can-view-live": "^4.2.0",
                "can-view-nodelist": "^4.2.0",
                "can-view-parser": "^4.0.0",
                "can-view-scope": "^4.7.0",
                "can-view-target": "^4.0.0"
            },
            deprecated: false,
            description: "Live binding handlebars templates",
            devDependencies: {
                "can-define": "^2.0.4",
                "can-queues": "^1.0.0",
                "can-simple-map": "^4.0.0",
                "can-test-helpers": "^1.1.0",
                "can-vdom": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.4",
                steal: "^1.0.5",
                "steal-benchmark": "^0.0.1",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-stache.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-stache",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint . --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "i18next",
            version: "11.4.0",
            origFileUrl: "./node_modules/i18next/package.json",
            fileUrl: "./node_modules/i18next/package.json",
            _from: "i18next@latest",
            _id: "i18next@11.4.0",
            _inBundle: false,
            _integrity:
                "sha512-QGDemlpt0rtCyAyCIddzRgEcP6/2iaXLmzXzWU2Nd3gBBioonxk+bLQ2ZIpZYkpQXX8S2e7lFXRafF9eh8JS6Q==",
            _location: "/i18next",
            _phantomChildren: {},
            _requested: {
                type: "tag",
                registry: true,
                raw: "i18next@latest",
                name: "i18next",
                escapedName: "i18next",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: ["#USER", "/"],
            _resolved:
                "https://registry.npmjs.org/i18next/-/i18next-11.4.0.tgz",
            _shasum: "9179bc27b74158d773893356f19b039bedbc355a",
            _spec: "i18next@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Jan Mühlemann",
                email: "jan.muehlemann@gmail.com",
                url: "https://github.com/jamuhl"
            },
            bugs: { url: "https://github.com/i18next/i18next/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "i18next internationalization framework",
            devDependencies: {
                "babel-cli": "6.22.2",
                "babel-core": "6.22.1",
                "babel-eslint": "7.1.1",
                "babel-plugin-external-helpers": "6.22.0",
                "babel-plugin-transform-es2015-classes": "6.22.0",
                "babel-plugin-transform-proto-to-assign": "6.22.0",
                "babel-preset-es2015": "6.22.0",
                "babel-preset-stage-0": "6.22.0",
                babelify: "7.3.0",
                browserify: "14.0.0",
                "browserify-istanbul": "2.0.0",
                chai: "3.5.0",
                coveralls: "2.11.16",
                eslint: "3.15.0",
                "eslint-config-airbnb": "14.1.0",
                "eslint-plugin-import": "2.2.0",
                "eslint-plugin-jsx-a11y": "4.0.0",
                "eslint-plugin-react": "6.9.0",
                "i18next-browser-languagedetector": "1.0.1",
                "i18next-localstorage-cache": "0.3.0",
                "i18next-sprintf-postprocessor": "0.2.2",
                "i18next-xhr-backend": "1.3.0",
                istanbul: "github:gotwarlost/istanbul#source-map",
                karma: "1.4.1",
                "karma-browserify": "5.1.1",
                "karma-chai": "0.1.0",
                "karma-chrome-launcher": "2.0.0",
                "karma-cli": "1.0.1",
                "karma-coverage": "github:douglasduteil/karma-coverage#next",
                "karma-coveralls": "1.1.2",
                "karma-expect": "1.1.3",
                "karma-mocha": "1.3.0",
                "karma-phantomjs-launcher": "1.0.2",
                "karma-rollup-preprocessor": "3.0.3",
                "karma-sinon": "1.0.5",
                "karma-spec-reporter": "0.0.26",
                mkdirp: "0.5.1",
                mocha: "3.2.0",
                "phantomjs-prebuilt": "2.1.14",
                rimraf: "2.5.4",
                rollup: "0.41.4",
                "rollup-plugin-babel": "2.7.1",
                "rollup-plugin-node-resolve": "2.0.0",
                "rollup-plugin-uglify": "1.0.1",
                sinon: "1.17.7",
                watchify: "3.9.0",
                yargs: "6.6.0"
            },
            homepage: "http://i18next.com",
            "jsnext:main": "dist/es/index.js",
            keywords: [
                "i18next",
                "internationalization",
                "i18n",
                "translation",
                "localization",
                "l10n",
                "globalization",
                "gettext"
            ],
            license: "MIT",
            main: "./index.js",
            module: "dist/es/index.js",
            repository: {
                type: "git",
                url: "git+https://github.com/i18next/i18next.git"
            },
            scripts: {
                build:
                    "npm run clean && npm run build:cjs && npm run build:es && npm run build:umd && npm run copy",
                "build:amd":
                    "rollup -c rollup.config.js --format amd && rollup -c rollup.config.js --format umd --uglify",
                "build:cjs": "babel src --out-dir dist/commonjs",
                "build:es": "BABEL_ENV=jsnext babel src --out-dir dist/es",
                "build:iife":
                    "rollup -c rollup.config.js --format iife && rollup -c rollup.config.js --format iife --uglify",
                "build:umd":
                    "rollup -c rollup.config.js --format umd && rollup -c rollup.config.js --format umd --uglify",
                clean: "rimraf dist && mkdirp dist",
                copy:
                    "cp ./dist/umd/i18next.min.js ./i18next.min.js && cp ./dist/umd/i18next.js ./i18next.js",
                postversion: "git push && git push --tags",
                preversion: "npm run test && npm run build && git push",
                tdd: "karma start karma.conf.js",
                "tdd:compat": "karma start karma.backward.conf.js",
                test: "npm run test:new && npm run test:compat",
                "test:compat": "karma start karma.backward.conf.js --singleRun",
                "test:new": "karma start karma.conf.js --singleRun"
            }
        },
        {
            name: "i18next-xhr-backend",
            version: "1.5.1",
            origFileUrl: "./node_modules/i18next-xhr-backend/package.json",
            fileUrl: "./node_modules/i18next-xhr-backend/package.json",
            _from: "i18next-xhr-backend@^1.5.1",
            _id: "i18next-xhr-backend@1.5.1",
            _inBundle: false,
            _integrity:
                "sha512-9OLdC/9YxDvTFcgsH5t2BHCODHEotHCa6h7Ly0EUlUC7Y2GS09UeoHOGj3gWKQ3HCqXz8NlH4gOrK3NNc9vPuw==",
            _location: "/i18next-xhr-backend",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "i18next-xhr-backend@^1.5.1",
                name: "i18next-xhr-backend",
                escapedName: "i18next-xhr-backend",
                rawSpec: "^1.5.1",
                saveSpec: null,
                fetchSpec: "^1.5.1"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/i18next-xhr-backend/-/i18next-xhr-backend-1.5.1.tgz",
            _shasum: "50282610780c6a696d880dfa7f4ac1d01e8c3ad5",
            _spec: "i18next-xhr-backend@^1.5.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Jan Mühlemann",
                email: "jan.muehlemann@gmail.com",
                url: "https://github.com/jamuhl"
            },
            bugs: {
                url: "https://github.com/i18next/i18next-xhr-backend/issues"
            },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "backend layer for i18next using browsers xhr",
            devDependencies: {
                "babel-cli": "6.18.0",
                "babel-core": "6.21.0",
                "babel-eslint": "7.1.1",
                "babel-preset-es2015": "6.18.0",
                "babel-preset-stage-0": "6.16.0",
                babelify: "7.3.0",
                browserify: "13.3.0",
                "browserify-istanbul": "2.0.0",
                chai: "3.5.0",
                coveralls: "2.11.15",
                eslint: "3.13.0",
                "eslint-config-airbnb": "13.0.0",
                i18next: "4.1.4",
                istanbul: "github:gotwarlost/istanbul#source-map",
                json5: "0.5.1",
                karma: "1.3.0",
                "karma-browserify": "5.1.0",
                "karma-chai": "0.1.0",
                "karma-chrome-launcher": "2.0.0",
                "karma-cli": "1.0.1",
                "karma-coverage": "github:douglasduteil/karma-coverage#next",
                "karma-coveralls": "1.1.2",
                "karma-expect": "1.1.3",
                "karma-mocha": "1.3.0",
                "karma-phantomjs-launcher": "1.0.2",
                "karma-rollup-preprocessor": "3.0.3",
                "karma-sinon": "1.0.5",
                "karma-spec-reporter": "0.0.26",
                mkdirp: "0.5.1",
                mocha: "3.2.0",
                "phantomjs-prebuilt": "2.1.14",
                rimraf: "2.5.4",
                rollup: "0.41.1",
                "rollup-plugin-babel": "2.7.1",
                "rollup-plugin-node-resolve": "2.0.0",
                "rollup-plugin-uglify": "1.0.1",
                sinon: "1.17.7",
                yargs: "6.6.0"
            },
            homepage: "https://github.com/i18next/i18next-xhr-backend",
            "jsnext:main": "dist/es/index.js",
            keywords: ["i18next", "i18next-backend"],
            license: "MIT",
            lock: false,
            main: "./index.js",
            repository: {
                type: "git",
                url: "git+https://github.com/i18next/i18next-xhr-backend.git"
            },
            scripts: {
                build:
                    "npm run clean && npm run build:cjs && npm run build:es && npm run build:umd && npm run copy",
                "build-win":
                    "npm run clean && npm run build:cjs && npm run build:es-win && npm run build:umd && npm run copy-win",
                "build:amd":
                    "rollup -c rollup.config.js --format amd && rollup -c rollup.config.js --format umd --uglify",
                "build:cjs": "babel src --out-dir dist/commonjs",
                "build:es": "BABEL_ENV=jsnext babel src --out-dir dist/es",
                "build:es-win":
                    "SET BABEL_ENV=jsnext babel src --out-dir dist/es",
                "build:iife":
                    "rollup -c rollup.config.js --format iife && rollup -c rollup.config.js --format iife --uglify",
                "build:umd":
                    "rollup -c rollup.config.js --format umd && rollup -c rollup.config.js --format umd --uglify",
                clean: "rimraf dist && mkdirp dist",
                copy:
                    "cp ./dist/umd/i18nextXHRBackend.min.js ./i18nextXHRBackend.min.js && cp ./dist/umd/i18nextXHRBackend.js ./i18nextXHRBackend.js",
                "copy-win":
                    "xcopy .\\dist\\umd\\i18nextXHRBackend.min.js .\\i18nextXHRBackend.min.js /y && xcopy .\\dist\\umd\\i18nextXHRBackend.js .\\i18nextXHRBackend.js /y",
                postversion: "git push && git push --tags",
                preversion: "npm run test && npm run build && git push",
                tdd: "karma start karma.conf.js",
                test: "karma start karma.conf.js --singleRun"
            }
        },
        {
            name: "can-route",
            version: "4.3.0",
            origFileUrl: "./node_modules/can-route/package.json",
            fileUrl: "./node_modules/can-route/package.json",
            _from: "can-route@^4.3.0",
            _id: "can-route@4.3.0",
            _inBundle: false,
            _integrity:
                "sha512-slTR26k04ZUixiaavOqaiBSOC/TZ24C95Am8WofmxcsestFWRqT6qctpIMgPRMMXQVB0RyWLPY9srE6cwE1O4w==",
            _location: "/can-route",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-route@^4.3.0",
                name: "can-route",
                escapedName: "can-route",
                rawSpec: "^4.3.0",
                saveSpec: null,
                fetchSpec: "^4.3.0"
            },
            _requiredBy: [
                "/",
                "/can-route-pushstate",
                "/can-stache-route-helpers",
                "/shuttle-canstrap",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-route/-/can-route-4.3.0.tgz",
            _shasum: "7b7bf2df8c773f76d60524cfd937b281e93642a0",
            _spec: "can-route@^4.3.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-route/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-bind": "<2.0.0",
                "can-deparam": "^1.0.1",
                "can-diff": "^1.0.4",
                "can-dom-events": "^1.1.0",
                "can-event-queue": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-key-tree": "<2.0.0",
                "can-log": "<2.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "<2.0.0",
                "can-param": "^1.0.1",
                "can-queues": "<2.0.0",
                "can-reflect": "^1.16.7",
                "can-route-hash": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Observable front-end application routing for CanJS.",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-map": "^4.0.0",
                "can-observe": "^2.0.0",
                "can-route-mock": "<2.0.0",
                "can-stache-key": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^2.0.0",
                jshint: "^2.9.1",
                steal: "^1.2.9",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-route.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-route",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-route.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-component",
            version: "4.3.0",
            origFileUrl: "./node_modules/can-component/package.json",
            fileUrl: "./node_modules/can-component/package.json",
            _from: "can-component@latest",
            _id: "can-component@4.3.0",
            _inBundle: false,
            _integrity:
                "sha512-Qz0Gi/WTTl61irTUJ7px+iZzuEwHjBip9oItrwkhDgI6HpmjsnMk0jYQtr+aRUyocNsXeqODqaWJGAOhmhcnWA==",
            _location: "/can-component",
            _phantomChildren: {},
            _requested: {
                type: "tag",
                registry: true,
                raw: "can-component@latest",
                name: "can-component",
                escapedName: "can-component",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: ["#USER", "/", "/shuttle-canstrap"],
            _resolved:
                "https://registry.npmjs.org/can-component/-/can-component-4.3.0.tgz",
            _shasum: "88dcc4fc91603dacc4fce8fae83bc6d6f1bb164b",
            _spec: "can-component@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-component/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-bind": "<2.0.0",
                "can-child-nodes": "^1.0.0",
                "can-construct": "^3.2.0",
                "can-control": "^4.0.0",
                "can-define": "^2.0.0",
                "can-dom-data-state": "^1.0.1",
                "can-dom-events": "^1.1.0",
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-simple-map": "^4.1.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.10.0",
                "can-stache-bindings": "^4.2.6",
                "can-stache-key": "^1.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.4.1",
                "can-view-callbacks": "^4.2.0",
                "can-view-model": "^4.0.0",
                "can-view-nodelist": "^4.1.0",
                "can-view-scope": "^4.7.0"
            },
            deprecated: false,
            description: "Custom elements for CanJS",
            devDependencies: {
                "can-observe": "^2.0.0",
                "can-test-helpers": "^1.1.2",
                "can-value": "<2.0.0",
                "can-vdom": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^2.0.0",
                jshint: "^2.9.1",
                steal: "^1.0.0",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-component.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-component",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-component.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: {},
            steal: {}
        },
        {
            name: "can-define-validate-validatejs",
            version: "1.1.0",
            origFileUrl:
                "./node_modules/can-define-validate-validatejs/package.json",
            fileUrl:
                "./node_modules/can-define-validate-validatejs/package.json",
            _from: "can-define-validate-validatejs@^1.1.0",
            _id: "can-define-validate-validatejs@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-LGMFP14SqCDVCO/+Whpm9oc48lSCLWdMENZ1gl5Bh6Z18xGigfaEmETSz8psiS7bXXrZ4jiteauq3303EWFXHw==",
            _location: "/can-define-validate-validatejs",
            _phantomChildren: {
                "can-reflect": "1.17.0",
                "validate.js": "0.11.1"
            },
            _requested: {
                type: "range",
                registry: true,
                raw: "can-define-validate-validatejs@^1.1.0",
                name: "can-define-validate-validatejs",
                escapedName: "can-define-validate-validatejs",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/can-define-validate-validatejs/-/can-define-validate-validatejs-1.1.0.tgz",
            _shasum: "4f1743bff9be0664526ab82c7bc8d59a4317acb3",
            _spec: "can-define-validate-validatejs@^1.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Bitovi" },
            browser: {},
            bugs: {
                url:
                    "https://github.com/canjs/can-define-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-define": "^2.0.0",
                "can-reflect": "^1.11.1",
                "can-validate": "^1.1.0",
                "can-validate-validatejs": "^0.1.0"
            },
            deprecated: false,
            description: "Validation helpers for can-define maps and lists.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "can-compute": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.5",
                steal: "^1.5.14",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.9.0",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-define-validate-validatejs",
            keywords: ["Validate", "plugin", "canjs"],
            license: "MIT",
            main: "can-define-validate-validatejs.js",
            repository: {
                type: "git",
                url:
                    "git+https://github.com/canjs/can-define-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout - && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true }
            }
        },
        {
            name: "can-reflect",
            version: "1.17.0",
            nestedFileUrl:
                "./node_modules/can-stache-route-helpers/node_modules/can-reflect/package.json",
            origFileUrl: "./node_modules/can-reflect/package.json",
            fileUrl: "./node_modules/can-reflect/package.json",
            _from: "can-reflect@^1.6.0",
            _id: "can-reflect@1.17.0",
            _inBundle: false,
            _integrity:
                "sha512-IWBWkvw/LAn4Y/NbxiFfLhGZAZk8hj5ZsvQVSCR2hgxJDEQI5vfmHYBNqk08ZdjPhtSqGfc3ZqlS3wqOHjm2bQ==",
            _location: "/can-reflect",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-reflect@^1.6.0",
                name: "can-reflect",
                escapedName: "can-reflect",
                rawSpec: "^1.6.0",
                saveSpec: null,
                fetchSpec: "^1.6.0"
            },
            _requiredBy: [
                "/can-ajax",
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-data-types",
                "/can-define",
                "/can-define-validate-validatejs",
                "/can-define-validate-validatejs/can-validate-validatejs",
                "/can-diff",
                "/can-dom-events",
                "/can-event-queue",
                "/can-fragment",
                "/can-globals",
                "/can-key",
                "/can-key-tree",
                "/can-list",
                "/can-local-store",
                "/can-map",
                "/can-memory-store",
                "/can-observation",
                "/can-query-logic",
                "/can-reflect-dependencies",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-sort-object",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-key",
                "/can-stache-route-helpers",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-validate",
                "/can-validate-validatejs",
                "/can-view-callbacks",
                "/can-view-live",
                "/can-view-model",
                "/can-view-scope",
                "/shuttle-canstrap/can-ajax",
                "/shuttle-canstrap/can-connect",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-reflect/-/can-reflect-1.17.0.tgz",
            _shasum: "430843a04306d2d1c7b145049302955b41d6000d",
            _spec: "can-reflect@^1.6.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "DoneJS core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-reflect/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0", "can-symbol": "^1.3.0" },
            deprecated: false,
            description: "reflection on unknown data types",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.1",
                steal: "^1.0.5",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                "test-saucelabs": "0.0.3",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["donejs"],
            main: "can-reflect",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-reflect.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm run build && npm run test && node test-saucelabs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-symbol",
            version: "1.6.1",
            nestedFileUrl:
                "./node_modules/can-util/node_modules/can-symbol/package.json",
            origFileUrl: "./node_modules/can-symbol/package.json",
            fileUrl: "./node_modules/can-symbol/package.json",
            _from: "can-symbol@^1.4.1",
            _id: "can-symbol@1.6.1",
            _inBundle: false,
            _integrity:
                "sha512-C2xIYJcVQ+FW/RrXXKQOoZXnEFqKM28qsPPrmDiV5Bx+kSqms8cnRMqt4SoZ7+89OMv5PSReRJ7fKDE06MdSCg==",
            _location: "/can-symbol",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-symbol@^1.4.1",
                name: "can-symbol",
                escapedName: "can-symbol",
                rawSpec: "^1.4.1",
                saveSpec: null,
                fetchSpec: "^1.4.1"
            },
            _requiredBy: [
                "/can-bind",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-control",
                "/can-define",
                "/can-event-queue",
                "/can-globals",
                "/can-key",
                "/can-list",
                "/can-map",
                "/can-observation",
                "/can-observation-recorder",
                "/can-query-logic",
                "/can-reflect",
                "/can-reflect-dependencies",
                "/can-reflect-promise",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-key",
                "/can-types",
                "/can-util",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live",
                "/can-view-model",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-symbol/-/can-symbol-1.6.1.tgz",
            _shasum: "06d50399f980e31736a25f2f6417d0adcd5685c3",
            _spec: "can-symbol@^1.4.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-symbol/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description:
                "Well known symbols used to detail how to operate on different objects",
            devDependencies: {
                "bit-docs": "0.0.7",
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.0.0-alpha.0",
                "donejs-cli": "^1.0.0-alpha.2",
                "generator-donejs": "^1.0.0-alpha.0",
                jshint: "^2.9.1",
                steal: "^1.0.5",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.3.0"
            },
            homepage: "http://canjs.com",
            keywords: ["Done", "JS"],
            main: "can-symbol",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-symbol.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            system: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-symbol"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-symbol"
            }
        },
        {
            name: "can-namespace",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-util/node_modules/can-namespace/package.json",
            origFileUrl: "./node_modules/can-namespace/package.json",
            fileUrl: "./node_modules/can-namespace/package.json",
            _from: "can-namespace@1.0.0",
            _id: "can-namespace@1.0.0",
            _inBundle: false,
            _integrity: "sha1-C4+vr7sRNSuerUIi/+OCJAW0Ppk=",
            _location: "/can-namespace",
            _phantomChildren: {},
            _requested: {
                type: "version",
                registry: true,
                raw: "can-namespace@1.0.0",
                name: "can-namespace",
                escapedName: "can-namespace",
                rawSpec: "1.0.0",
                saveSpec: null,
                fetchSpec: "1.0.0"
            },
            _requiredBy: [
                "/can-ajax",
                "/can-assign",
                "/can-attribute-encoder",
                "/can-bind",
                "/can-child-nodes",
                "/can-cid",
                "/can-component",
                "/can-compute",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-data-types",
                "/can-define",
                "/can-deparam",
                "/can-dom-data",
                "/can-dom-data-state",
                "/can-dom-events",
                "/can-event-dom-enter/can-dom-data-state",
                "/can-event-dom-radiochange",
                "/can-fragment",
                "/can-globals",
                "/can-import-module",
                "/can-join-uris",
                "/can-key",
                "/can-list",
                "/can-local-store",
                "/can-map",
                "/can-memory-store",
                "/can-observation",
                "/can-observation-recorder",
                "/can-param",
                "/can-parse-uri",
                "/can-queues",
                "/can-reflect",
                "/can-route",
                "/can-set",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-helpers",
                "/can-stache-key",
                "/can-symbol",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-util/can-dom-data-state",
                "/can-view-callbacks",
                "/can-view-model",
                "/can-view-nodelist",
                "/can-view-parser",
                "/can-view-scope",
                "/can-view-target",
                "/shuttle-canstrap/can-ajax",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-namespace/-/can-namespace-1.0.0.tgz",
            _shasum: "0b8fafafbb11352b9ead4222ffe3822405b43e99",
            _spec: "can-namespace@1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-namespace/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Namespace where can-* packages are registered",
            devDependencies: {},
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-namespace",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-namespace.git"
            },
            scripts: {},
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-construct",
            version: "3.5.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-construct/package.json",
            origFileUrl: "./node_modules/can-construct/package.json",
            fileUrl: "./node_modules/can-construct/package.json",
            _from: "can-construct@^3.2.0",
            _id: "can-construct@3.5.0",
            _inBundle: false,
            _integrity:
                "sha512-56fMLcDGJhOyHjF1pQ6OorZr7x7BNZ0mSEmQnsqh8noPr386UTGnhyqMphAbUTArCLg42I/LkKNqUF+Dy14x+g==",
            _location: "/can-construct",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-construct@^3.2.0",
                name: "can-construct",
                escapedName: "can-construct",
                rawSpec: "^3.2.0",
                saveSpec: null,
                fetchSpec: "^3.2.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-connect",
                "/can-control",
                "/can-define",
                "/can-list",
                "/can-map",
                "/can-simple-map",
                "/can-view-scope",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-construct/-/can-construct-3.5.0.tgz",
            _shasum: "893f362ec17f6ad44306b675b5815757b815acbc",
            _spec: "can-construct@^3.2.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-construct/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.16.1",
                "can-string": "<2.0.0"
            },
            deprecated: false,
            description: "easy constructor functions",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-construct",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-construct.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint *.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre": "npm version prerelease && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-observation-recorder",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-observation-recorder/package.json",
            origFileUrl: "./node_modules/can-observation-recorder/package.json",
            fileUrl: "./node_modules/can-observation-recorder/package.json",
            _from: "can-observation-recorder@^1.0.0",
            _id: "can-observation-recorder@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-9a4rlW1rMUQPt8XVg8gOQB8owdH3l9Ju5kyXtKodz6+henNEipIfv4J9W0yOyhxC3FxIl2hHwBmsVERs6W1ZHg==",
            _location: "/can-observation-recorder",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-observation-recorder@^1.0.0",
                name: "can-observation-recorder",
                escapedName: "can-observation-recorder",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-compute",
                "/can-connect",
                "/can-define",
                "/can-list",
                "/can-map",
                "/can-observation",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-key",
                "/can-view-callbacks",
                "/can-view-scope",
                "/shuttle-canstrap/can-connect",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-observation-recorder/-/can-observation-recorder-1.2.0.tgz",
            _shasum: "d4614ed0a915057d0b96640649245a09fcedfc87",
            _spec: "can-observation-recorder@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-observation",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-observation-recorder/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0", "can-symbol": "^1.6.1" },
            deprecated: false,
            description: "Records observations between two points in time",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "./can-observation-recorder.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-observation-recorder.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-log",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-log/package.json",
            origFileUrl: "./node_modules/can-log/package.json",
            fileUrl: "./node_modules/can-log/package.json",
            _from: "can-log@^1.0.0",
            _id: "can-log@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-5W1zw0jxwVnzRKJJtV6jtxWgobl80rhSVMX0aMQS7QB5GyYL+xbE+3IpARugWlOEutEKmWGXlOkD3LdCL/zyAg==",
            _location: "/can-log",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-log@^1.0.0",
                name: "can-log",
                escapedName: "can-log",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-encoder",
                "/can-component",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-define",
                "/can-event-queue",
                "/can-map",
                "/can-observation",
                "/can-queues",
                "/can-reflect-promise",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-stache-bindings",
                "/can-stache-key",
                "/can-types",
                "/can-util",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-parser",
                "/can-view-scope"
            ],
            _resolved: "https://registry.npmjs.org/can-log/-/can-log-1.0.0.tgz",
            _shasum: "844b20c9c8db7cc8b771cc67b7e84730206379ec",
            _spec: "can-log@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-log/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Utilities for logging to the console.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "dist/cjs/can-log",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-log.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-log"
            }
        },
        {
            name: "can-queues",
            version: "1.1.2",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-queues/package.json",
            origFileUrl: "./node_modules/can-queues/package.json",
            fileUrl: "./node_modules/can-queues/package.json",
            _from: "can-queues@^1.0.0",
            _id: "can-queues@1.1.2",
            _inBundle: false,
            _integrity:
                "sha512-6bQ4ftww/ZFRljEAAXlcZabzo3EVcyg1Ho8FXZZjBL/3HRQspRtX5DTy8PmfGDki+MNtbs3lTdsP+wWz6zp98Q==",
            _location: "/can-queues",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-queues@^1.0.0",
                name: "can-queues",
                escapedName: "can-queues",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-bind",
                "/can-component",
                "/can-connect",
                "/can-define",
                "/can-diff",
                "/can-event-queue",
                "/can-list",
                "/can-map",
                "/can-observation",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-live",
                "/can-view-scope",
                "/shuttle-canstrap/can-connect",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-queues/-/can-queues-1.1.2.tgz",
            _shasum: "08d9b9bbbef95cc31632401056678fffde46572f",
            _spec: "can-queues@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-queues/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.1",
                "can-log": "^1.0.0",
                "can-namespace": "^1.0.0"
            },
            deprecated: false,
            description: "A light weight JavaScript task queue",
            devDependencies: {
                docco: "^0.7.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://github.com/canjs/can-queues#readme",
            keywords: ["canjs"],
            license: "MIT",
            main: "./can-queues.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-queues.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                docco:
                    "docco can-queues.js queue.js queue-state.js completion-queue.js priority-queue.js",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push && make",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-queues"
            }
        },
        {
            name: "can-event-queue",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-event-queue/package.json",
            origFileUrl: "./node_modules/can-event-queue/package.json",
            fileUrl: "./node_modules/can-event-queue/package.json",
            _from: "can-event-queue@<2.0.0",
            _id: "can-event-queue@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-DDV4M4hgiFBZTvGAeUQ2oWjm+5/dUdizG4EtIWNIaaexG4KB9scaw72mv74vb2mvVOepmBM3FdKBCk6OFVuQHw==",
            _location: "/can-event-queue",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-event-queue@<2.0.0",
                name: "can-event-queue",
                escapedName: "can-event-queue",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: [
                "/can-compute",
                "/can-connect",
                "/can-control",
                "/can-define",
                "/can-list",
                "/can-map",
                "/can-observation",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-scope",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-event-queue/-/can-event-queue-1.1.0.tgz",
            _shasum: "49919bc2a0072fcad6796b1ad9dcd3b367ea4f1d",
            _spec: "can-event-queue@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-control",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "http://canjs.com"
            },
            bugs: { url: "https://github.com/canjs/can-event-queue/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-define-lazy-value": "^1.0.1",
                "can-dom-events": "^1.0.0",
                "can-key-tree": "^1.1.0",
                "can-log": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.2",
                "can-symbol": "^1.2.0"
            },
            deprecated: false,
            description: "A event mixin that uses queues to dispatch handlers",
            devDependencies: {
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://github.com/canjs/can-event-queue#readme",
            keywords: ["canjs"],
            license: "MIT",
            main: "./can-event-queue.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-event-queue.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint:
                    "jshint ./*.js map/**/*.js type/*.js value/*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"]
            }
        },
        {
            name: "can-assign",
            version: "1.3.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-assign/package.json",
            origFileUrl: "./node_modules/can-assign/package.json",
            fileUrl: "./node_modules/can-assign/package.json",
            _from: "can-assign@^1.1.1",
            _id: "can-assign@1.3.0",
            _inBundle: false,
            _integrity:
                "sha512-lqT4aPSS51VVqQbZLSDPWttJ3bb6vsIqSmI23n9/KdkocMFMyDCZg5hQFfrrR8slzfNS6h6Q5udfCMEcVziaTg==",
            _location: "/can-assign",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-assign@^1.1.1",
                name: "can-assign",
                escapedName: "can-assign",
                rawSpec: "^1.1.1",
                saveSpec: null,
                fetchSpec: "^1.1.1"
            },
            _requiredBy: [
                "/can-component",
                "/can-compute",
                "/can-control",
                "/can-define",
                "/can-define-validate-validatejs",
                "/can-list",
                "/can-map",
                "/can-query-logic",
                "/can-queues",
                "/can-set",
                "/can-stache",
                "/can-stache-bindings",
                "/can-util",
                "/can-view-import",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-assign/-/can-assign-1.3.0.tgz",
            _shasum: "5a3877ff8f9f0e7fedd537441183da381c39bc12",
            _spec: "can-assign@^1.1.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-assign/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description:
                "A simplified version of Object.assign, which only accepts a single source argument.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "object", "assign"],
            main: "dist/cjs/can-assign",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-assign.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-assign"
            }
        },
        {
            name: "can-diff",
            version: "1.4.1",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-diff/package.json",
            origFileUrl: "./node_modules/can-diff/package.json",
            fileUrl: "./node_modules/can-diff/package.json",
            _from: "can-diff@^1.0.0",
            _id: "can-diff@1.4.1",
            _inBundle: false,
            _integrity:
                "sha512-m36TfWNS+jCwKI8nt91vDDsQXvsXZ/Wyfmd/WVrQZvvWNqN5AnK7DgbItp4ONHddc4JC+mg1sQkZ/FJwyD0ejQ==",
            _location: "/can-diff",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-diff@^1.0.0",
                name: "can-diff",
                escapedName: "can-diff",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-connect",
                "/can-define",
                "/can-local-store",
                "/can-memory-store",
                "/can-route",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-diff/-/can-diff-1.4.1.tgz",
            _shasum: "e3c1f8fad70f26735b82b21202f2b3135f48cafd",
            _spec: "can-diff@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-diff/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-key-tree": "^1.0.2",
                "can-queues": "^1.0.1",
                "can-reflect": "^1.14.1"
            },
            deprecated: false,
            description: "Diffing helpers for can-reflect",
            devDependencies: {
                "can-define": "^2.1.0",
                "can-key": "<2.0.0",
                "can-simple-observable": "^2.0.4",
                "can-symbol": "^1.6.1",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-diff",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-diff.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { main: "can-diff" }
        },
        {
            name: "can-single-reference",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-single-reference/package.json",
            origFileUrl: "./node_modules/can-single-reference/package.json",
            fileUrl: "./node_modules/can-single-reference/package.json",
            _from: "can-single-reference@^1.0.0",
            _id: "can-single-reference@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-V8vfyVYQeaKUI7uDbtS3LY1qTsM9yzqSWikwxpjYXUL5FEXuSvWv4J2tAYLLQ7XlIPwKi7Q/3/XCgRA+a5VGwA==",
            _location: "/can-single-reference",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-single-reference@^1.0.0",
                name: "can-single-reference",
                escapedName: "can-single-reference",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-compute",
                "/can-define",
                "/can-map",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-single-reference/-/can-single-reference-1.2.0.tgz",
            _shasum: "c715049f055e6081499feb7eeefede04ea8796c7",
            _spec: "can-single-reference@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define",
            author: {
                name: "DoneJS Contributors",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-single-reference/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-cid": "^1.1.2" },
            deprecated: false,
            description:
                "Assign a value to a function that can be collected later",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-single-reference",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-single-reference.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-view-parser",
            version: "4.1.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-parser/package.json",
            origFileUrl: "./node_modules/can-view-parser/package.json",
            fileUrl: "./node_modules/can-view-parser/package.json",
            _from: "can-view-parser@^4.0.0",
            _id: "can-view-parser@4.1.0",
            _inBundle: false,
            _integrity:
                "sha512-8IWYBT6c0QUPCbutmVFiMerOF+1+YnsfPz/sFltt139Vb1zFJ4fH7VGm3P1+WvKpTG8qjWraiwd2+RyF8zqz6g==",
            _location: "/can-view-parser",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-parser@^4.0.0",
                name: "can-view-parser",
                escapedName: "can-view-parser",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: ["/can-stache", "/can-stache-ast", "/can-view-live"],
            _resolved:
                "https://registry.npmjs.org/can-view-parser/-/can-view-parser-4.1.0.tgz",
            _shasum: "578ddedcd55750c18b94a29097d1ccf609341176",
            _spec: "can-view-parser@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-parser/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-attribute-encoder": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Parses html and magic tags",
            devDependencies: {
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-parser",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-parser.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-view-callbacks",
            version: "4.3.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-callbacks/package.json",
            origFileUrl: "./node_modules/can-view-callbacks/package.json",
            fileUrl: "./node_modules/can-view-callbacks/package.json",
            _from: "can-view-callbacks@^4.2.0",
            _id: "can-view-callbacks@4.3.0",
            _inBundle: false,
            _integrity:
                "sha512-dtIK7SF2vYaJRNFNhx/PT1PeZyTLGKo/gdpZx/vTszr0gg7f9ydwFXDYJQpAdiN/SGkHr20h8v36swKGGDFL6A==",
            _location: "/can-view-callbacks",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-callbacks@^4.2.0",
                name: "can-view-callbacks",
                escapedName: "can-view-callbacks",
                rawSpec: "^4.2.0",
                saveSpec: null,
                fetchSpec: "^4.2.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-import",
                "/can-view-live",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-callbacks/-/can-view-callbacks-4.3.0.tgz",
            _shasum: "66b16bb31a7fcaa0878eda0be268cdb468c6773f",
            _spec: "can-view-callbacks@^4.2.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-callbacks/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.16.7",
                "can-symbol": "^1.6.1",
                "can-view-nodelist": "^4.0.0"
            },
            deprecated: false,
            description: "Registered callbacks for behaviors",
            devDependencies: {
                "can-test-helpers": "^1.0.1",
                "can-view-scope": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.5.6",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.4.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-view-callbacks.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-callbacks",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-callbacks.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-stache-ast",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-stache-ast/package.json",
            origFileUrl: "./node_modules/can-stache-ast/package.json",
            fileUrl: "./node_modules/can-stache-ast/package.json",
            _from: "can-stache-ast@^1.0.0",
            _id: "can-stache-ast@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-kJmhL1GV3GjHyhJEdn+D0ITRyR8eZ4jQwfIMB+MxMsdgxRxmWEteYi9M2Kd9pXQtA1Unkm4ZUAVd2WXbeA5mAQ==",
            _location: "/can-stache-ast",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-ast@^1.0.0",
                name: "can-stache-ast",
                escapedName: "can-stache-ast",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache", "/steal-stache"],
            _resolved:
                "https://registry.npmjs.org/can-stache-ast/-/can-stache-ast-1.0.0.tgz",
            _shasum: "474d32b3d7902f18021a5026457bde9bc92baabd",
            _spec: "can-stache-ast@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: { name: "Bitovi", email: "contact@bitovi.com" },
            bugs: { url: "https://github.com/canjs/can-stache-ast/issues" },
            bundleDependencies: false,
            dependencies: { "can-view-parser": "^4.0.2" },
            deprecated: false,
            description:
                "[![Build Status](https://travis-ci.org/canjs/can-stache-ast.svg?branch=master)](https://travis-ci.org/canjs/can-stache-ast)",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-stache-ast#readme",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-ast.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-ast.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release'
            }
        },
        {
            name: "can-attribute-encoder",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-attribute-encoder/package.json",
            origFileUrl: "./node_modules/can-attribute-encoder/package.json",
            fileUrl: "./node_modules/can-attribute-encoder/package.json",
            _from: "can-attribute-encoder@^1.0.0",
            _id: "can-attribute-encoder@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-uVw3LfwiL7ofqNedtfl1oP2Lm26MmKd6qOCpKp+1zzPfIR+n6HYoHA8vc1SODpQOVHvZfxQF1r3k7JYl9MQ++w==",
            _location: "/can-attribute-encoder",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-attribute-encoder@^1.0.0",
                name: "can-attribute-encoder",
                escapedName: "can-attribute-encoder",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-parser"
            ],
            _resolved:
                "https://registry.npmjs.org/can-attribute-encoder/-/can-attribute-encoder-1.1.0.tgz",
            _shasum: "a60c81e7d327236405f8a1c52d3604131fc52f22",
            _spec: "can-attribute-encoder@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-attribute-encoder/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-log": "^1.0.0", "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Encode / decode attributes for DOM elements",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.5",
                steal: "^1.5.6",
                "steal-qunit": "^1.0.1",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs"],
            license: "MIT",
            main: "can-attribute-encoder",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-attribute-encoder.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-attribute-encoder"
            }
        },
        {
            name: "can-globals",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-globals/package.json",
            origFileUrl: "./node_modules/can-globals/package.json",
            fileUrl: "./node_modules/can-globals/package.json",
            _from: "can-globals@^1.0.0",
            _id: "can-globals@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-FTzANPGBE6k3sJrxzx8NQP28LaFto0AEp/aMVwDGKwOs6lHN+RvRH4sBijAxVMK+4WzALlSVNPSqUyp0xyEk0Q==",
            _location: "/can-globals",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-globals@^1.0.0",
                name: "can-globals",
                escapedName: "can-globals",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-ajax",
                "/can-attribute-observable",
                "/can-component",
                "/can-connect",
                "/can-dom-events",
                "/can-dom-mutate",
                "/can-event-dom-radiochange",
                "/can-fragment",
                "/can-import-module",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-stache",
                "/can-types",
                "/can-util",
                "/can-util/can-ajax",
                "/can-util/can-event-dom-radiochange",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-model",
                "/can-view-target",
                "/shuttle-canstrap/can-ajax",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-globals/-/can-globals-1.2.0.tgz",
            _shasum: "cc526602807df386485b59d3ffb3cfcfc9b1eea2",
            _spec: "can-globals@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-globals/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.2.6",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description:
                "This module provides a dependency injection container. Modules may define a key and specify a default value (which can be static, cached lazy, or dynamic lazy), but other code can set and reset the value as needed. There is also an event system, for alerting on value changes, both specific to a key and for any key.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.5",
                qunitjs: "^2.4.0",
                steal: "^1.5.6",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.7.0",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-globals#readme",
            keywords: [
                "canjs",
                "can-globals",
                "globals",
                "dependancy",
                "injection"
            ],
            license: "MIT",
            main: "can-globals.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-globals.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                document: "bit-docs",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-import-module",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-import-module/package.json",
            origFileUrl: "./node_modules/can-import-module/package.json",
            fileUrl: "./node_modules/can-import-module/package.json",
            _from: "can-import-module@^1.0.0",
            _id: "can-import-module@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-IG98g1BUm7o7OGVXWkBegID2H2lRVDMaN153OuoEf48jpgM57HPwFPKgblxHpX72qUhi+Ejqlb6PUvQQpcxczQ==",
            _location: "/can-import-module",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-import-module@^1.0.0",
                name: "can-import-module",
                escapedName: "can-import-module",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache", "/can-view-import"],
            _resolved:
                "https://registry.npmjs.org/can-import-module/-/can-import-module-1.2.0.tgz",
            _shasum: "af1d56a27c8773aaf7c90d35d6257a811f844378",
            _spec: "can-import-module@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: "",
            bugs: { url: "https://github.com/canjs/can-import-module/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0"
            },
            deprecated: false,
            description:
                "[![Build Status](https://travis-ci.org/canjs/can-import-module.svg?branch=master)](https://travis-ci.org/canjs/can-import-module)",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-import-module#readme",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-import-module.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-import-module.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-view-scope",
            version: "4.7.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-scope/package.json",
            origFileUrl: "./node_modules/can-view-scope/package.json",
            fileUrl: "./node_modules/can-view-scope/package.json",
            _from: "can-view-scope@^4.0.0",
            _id: "can-view-scope@4.7.0",
            _inBundle: false,
            _integrity:
                "sha512-WOPvBx0XwSmMLcBNnxRwypSoqMUHGU7cvDLX0rt7BtkJvk4HNsfG8zEG37309skZB/q7LQVQDHAPFVGEoZPI0w==",
            _location: "/can-view-scope",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-scope@^4.0.0",
                name: "can-view-scope",
                escapedName: "can-view-scope",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-stache",
                "/can-stache-bindings"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-scope/-/can-view-scope-4.7.0.tgz",
            _shasum: "904321ae49f8641a437058eab4b8f3143dcc58d7",
            _spec: "can-view-scope@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-scope/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.2.0",
                "can-define-lazy-value": "^1.0.0",
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-reflect-dependencies": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-single-reference": "^1.0.0",
                "can-stache-helpers": "^1.0.0",
                "can-stache-key": "^1.3.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Observable scopes",
            devDependencies: {
                "can-simple-observable": "^2.0.0",
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.12.0",
                "steal-qunit": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-view-scope.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-scope",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-scope.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee:
                    "testee test/test.html test/test-production.html --browsers firefox"
            }
        },
        {
            name: "can-view-target",
            version: "4.1.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-target/package.json",
            origFileUrl: "./node_modules/can-view-target/package.json",
            fileUrl: "./node_modules/can-view-target/package.json",
            _from: "can-view-target@^4.0.0",
            _id: "can-view-target@4.1.0",
            _inBundle: false,
            _integrity:
                "sha512-NPcM3+va/UG4qeiC4f6tiFbnz7aArUZJpyi4yaTo9W+Z1umLrChF672V1v8b+r2yO1KwdVAgZOXoXuClLnYR9g==",
            _location: "/can-view-target",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-target@^4.0.0",
                name: "can-view-target",
                escapedName: "can-view-target",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: ["/can-stache", "/can-view-live"],
            _resolved:
                "https://registry.npmjs.org/can-view-target/-/can-view-target-4.1.0.tgz",
            _shasum: "758dfbf51ae6f01fe50af278d98964aadfe8526f",
            _spec: "can-view-target@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-target/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.0",
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Fast cloning micro templates",
            devDependencies: {
                "can-simple-dom": "^1.0.2",
                "detect-cyclic-packages": "^1.1.0",
                "donejs-cli": "^0.9.5",
                "generator-donejs": "^1.0.7",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-target",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-target.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-view-nodelist",
            version: "4.3.2",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-nodelist/package.json",
            origFileUrl: "./node_modules/can-view-nodelist/package.json",
            fileUrl: "./node_modules/can-view-nodelist/package.json",
            _from: "can-view-nodelist@^4.1.0",
            _id: "can-view-nodelist@4.3.2",
            _inBundle: false,
            _integrity:
                "sha512-CevC12Ved41m8lGFrNzJuTmjsl4Qgc0Z0Qmf43qkBNwlKU31r07PV2yquCHMk2Tl/p/wE013m42OS4/lQIZh1Q==",
            _location: "/can-view-nodelist",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-nodelist@^4.1.0",
                name: "can-view-nodelist",
                escapedName: "can-view-nodelist",
                rawSpec: "^4.1.0",
                saveSpec: null,
                fetchSpec: "^4.1.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-stache",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-view-nodelist/-/can-view-nodelist-4.3.2.tgz",
            _shasum: "b973dc8741147f74ba997b551301e3e3d95d7467",
            _spec: "can-view-nodelist@^4.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-nodelist/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "<2.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Adds nesting of text nodes",
            devDependencies: {
                "can-fragment": "^1.0.0",
                "can-reflect": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-view-nodelist.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-view-nodelist",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-nodelist.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-bind",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-bind/package.json",
            origFileUrl: "./node_modules/can-bind/package.json",
            fileUrl: "./node_modules/can-bind/package.json",
            _from: "can-bind@<2.0.0",
            _id: "can-bind@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-BsqHPLLRNuR2LSDrexEbPNgbX+xKHMYCyhHxj8XyxURmpeUu09yZPpvWiP14cIpMDe+Rq4wBLrKkmxAePFcX8w==",
            _location: "/can-bind",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-bind@<2.0.0",
                name: "can-bind",
                escapedName: "can-bind",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-route",
                "/can-stache-bindings"
            ],
            _resolved:
                "https://registry.npmjs.org/can-bind/-/can-bind-1.0.0.tgz",
            _shasum: "84d095cb3d0a6781ef7941b6c7bdfc76048093fb",
            _spec: "can-bind@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "core@donejs.com",
                url: "https://canjs.com/"
            },
            bugs: { url: "https://github.com/canjs/can-bind/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.15.0",
                "can-reflect-dependencies": "^1.0.0",
                "can-symbol": "^1.6.0"
            },
            deprecated: false,
            description:
                "Updates one observable value with the value of another observable.",
            devDependencies: {
                "can-observation": "^4.0.1",
                "can-simple-map": "^4.0.1",
                "can-simple-observable": "^2.0.4",
                "can-test-helpers": "^1.1.2",
                "can-value": "<2.0.0",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-bind.html",
            license: "MIT",
            main: "can-bind",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-bind.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint ./*.js ./test/*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: { "steal-tools": true, testee: true },
                main: "can-bind"
            }
        },
        {
            name: "can-observation",
            version: "4.1.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-observation/package.json",
            origFileUrl: "./node_modules/can-observation/package.json",
            fileUrl: "./node_modules/can-observation/package.json",
            _from: "can-observation@^4.0.0",
            _id: "can-observation@4.1.0",
            _inBundle: false,
            _integrity:
                "sha512-hFoPfq0S1mTyrD/MA0eQLOgvtv+QphwmVtu9ad61dqhxB/nAFxltlKpQZ351jJrlEK8OesoXRYZSU7M+TDnYHg==",
            _location: "/can-observation",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-observation@^4.0.0",
                name: "can-observation",
                escapedName: "can-observation",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-component",
                "/can-compute",
                "/can-control",
                "/can-define",
                "/can-list",
                "/can-reflect-promise",
                "/can-route",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-stache",
                "/can-view-live",
                "/can-view-scope",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-observation/-/can-observation-4.1.0.tgz",
            _shasum: "576bdae39275d0734a0d032d5db725da121ab5ce",
            _spec: "can-observation@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-observation/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.7.0",
                "can-symbol": "^1.4.2"
            },
            deprecated: false,
            description: "Core observable indicators",
            devDependencies: {
                "bit-docs": "^0.0.7",
                "can-cid": "^1.0.0",
                "detect-cyclic-packages": "^1.1.0",
                docco: "^0.7.0",
                "done-serve": "^2.0.0",
                jshint: "^2.9.1",
                steal: "^1.2.3",
                "steal-benchmark": "0.0.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            main: "can-observation",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-observation.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                docco:
                    "docco can-observation.js recorder-dependency-helpers.js temporarily-bind.js",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-simple-observable",
            version: "2.2.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-simple-observable/package.json",
            origFileUrl: "./node_modules/can-simple-observable/package.json",
            fileUrl: "./node_modules/can-simple-observable/package.json",
            _from: "can-simple-observable@^2.0.0",
            _id: "can-simple-observable@2.2.0",
            _inBundle: false,
            _integrity:
                "sha512-JIO7N6UbIa0Mtdc93SXpsnwU2e/n30JXeoI3hj5nvwSYV0Wgz15Z1xJPiHPhcnYGt0qznK1fkuqEgFnwICJUaw==",
            _location: "/can-simple-observable",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-simple-observable@^2.0.0",
                name: "can-simple-observable",
                escapedName: "can-simple-observable",
                rawSpec: "^2.0.0",
                saveSpec: null,
                fetchSpec: "^2.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-component",
                "/can-compute",
                "/can-define",
                "/can-list",
                "/can-map",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-live",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-simple-observable/-/can-simple-observable-2.2.0.tgz",
            _shasum: "fd58c61aca2ab6e5fd26a6313959fef7dcb7f538",
            _spec: "can-simple-observable@^2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: {
                url: "https://github.com/canjs/can-simple-observable/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-event-queue": "^1.0.0",
                "can-key": "<2.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.1.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.1",
                "can-reflect-dependencies": "^1.0.0",
                "can-symbol": "^1.4.2"
            },
            deprecated: false,
            description: "Create an observable value.",
            devDependencies: {
                "can-simple-map": "^4.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/doc/can-simple-observable.html",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-simple-observable",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-simple-observable.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { npmIgnore: { testee: true, "steal-tools": true } }
        },
        {
            name: "can-simple-map",
            version: "4.2.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-simple-map/package.json",
            origFileUrl: "./node_modules/can-simple-map/package.json",
            fileUrl: "./node_modules/can-simple-map/package.json",
            _from: "can-simple-map@^4.1.0",
            _id: "can-simple-map@4.2.0",
            _inBundle: false,
            _integrity:
                "sha512-CKJ0RR1PCpq5kACloUwjpHDmLKZRlqM0i4KRF0zZWlJk0aISvylUAKiZExV9vfxYTK/XTxfycp7NW030N6KjWg==",
            _location: "/can-simple-map",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-simple-map@^4.1.0",
                name: "can-simple-map",
                escapedName: "can-simple-map",
                rawSpec: "^4.1.0",
                saveSpec: null,
                fetchSpec: "^4.1.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-route",
                "/can-stache-bindings",
                "/can-view-model",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-simple-map/-/can-simple-map-4.2.0.tgz",
            _shasum: "0994ba8ef6ae25e76386c7d1b6f1aa88e344085e",
            _spec: "can-simple-map@^4.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-simple-map/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-construct": "^3.2.0",
                "can-event-queue": "^1.0.0",
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.2.1",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "A performant live-bound map",
            devDependencies: {
                "can-reflect-tests": "<2.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.9",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-simple-map.html",
            keywords: [],
            main: "can-simple-map",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-simple-map.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-simple-map"
            }
        },
        {
            name: "can-route-hash",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-route-hash/package.json",
            origFileUrl: "./node_modules/can-route-hash/package.json",
            fileUrl: "./node_modules/can-route-hash/package.json",
            _from: "can-route-hash@<2.0.0",
            _id: "can-route-hash@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-WzS2toh9GzFRuWI+L783IV9C1wxGY1zbearHSOhZk/xjVwR166EWswMRuJaQQWc9Wwb4mSz+127/VDy3oN6DXQ==",
            _location: "/can-route-hash",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-route-hash@<2.0.0",
                name: "can-route-hash",
                escapedName: "can-route-hash",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: ["/can-route"],
            _resolved:
                "https://registry.npmjs.org/can-route-hash/-/can-route-hash-1.0.0.tgz",
            _shasum: "f0df2f18ef5d45e7be39d3f218c8c09eece842ea",
            _spec: "can-route-hash@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-route",
            author: "",
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "^1.2.0",
                "can-globals": "^1.1.1",
                "can-key-tree": "^1.1.0",
                "can-observation-recorder": "^1.1.2",
                "can-queues": "^1.1.2",
                "can-reflect": "^1.16.7",
                "can-simple-observable": "^2.1.1"
            },
            deprecated: false,
            description:
                "[![Build Status](https://travis-ci.org//can-route-hash.svg?branch=master)](https://travis-ci.org//can-route-hash)",
            devDependencies: {
                "can-observation": "^4.0.1",
                jshint: "^2.9.5",
                steal: "^1.12.4",
                "steal-qunit": "^1.0.2",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "",
            keywords: ["donejs-plugin"],
            license: "MIT",
            main: "./can-route-hash.js",
            repository: {
                type: "git",
                url: "git://github.com//can-route-hash.git"
            },
            scripts: {
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version: 'git commit -am "Update version number"'
            }
        },
        {
            name: "can-stache-bindings",
            version: "4.3.1",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-stache-bindings/package.json",
            origFileUrl: "./node_modules/can-stache-bindings/package.json",
            fileUrl: "./node_modules/can-stache-bindings/package.json",
            _from: "can-stache-bindings@latest",
            _id: "can-stache-bindings@4.3.1",
            _inBundle: false,
            _integrity:
                "sha512-NGYsKabYvkhb1v6aSRdYNP0fnbbdCrxupSwP0I2ouPAT8/YywX5Ohm07lqglG4bysJE6omUjARppQg1WROmSiA==",
            _location: "/can-stache-bindings",
            _phantomChildren: {},
            _requested: {
                type: "tag",
                registry: true,
                raw: "can-stache-bindings@latest",
                name: "can-stache-bindings",
                escapedName: "can-stache-bindings",
                rawSpec: "latest",
                saveSpec: null,
                fetchSpec: "latest"
            },
            _requiredBy: [
                "#USER",
                "/",
                "/can-component",
                "/shuttle-canstrap",
                "/shuttle-canstrap/can-connect",
                "/steal-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache-bindings/-/can-stache-bindings-4.3.1.tgz",
            _shasum: "34fe21927898df35e414d8c056d42044b7733df8",
            _spec: "can-stache-bindings@latest",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-attribute-encoder": "^1.0.0",
                "can-attribute-observable": "<2.0.0",
                "can-bind": "<2.0.0",
                "can-dom-data-state": "^1.0.0",
                "can-dom-events": "^1.1.1",
                "can-dom-mutate": "^1.0.1",
                "can-event-queue": "^1.0.0",
                "can-log": "^1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.6.0",
                "can-reflect-dependencies": "^1.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.0.2",
                "can-stache-key": "^1.0.0",
                "can-symbol": "^1.0.0",
                "can-view-callbacks": "^4.2.0",
                "can-view-live": "^4.0.5",
                "can-view-model": "^4.0.0",
                "can-view-scope": "^4.0.0"
            },
            deprecated: false,
            description: "Default binding syntaxes for can-stache",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-event-dom-enter": "^2.0.0",
                "can-globals": "^1.0.0",
                "can-test-helpers": "^1.1.0",
                "can-vdom": "^4.0.0",
                "can-view-nodelist": "^4.0.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.9",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com/doc/can-stache-bindings.html",
            keywords: ["canjs", "donejs"],
            main: "can-stache-bindings",
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint test/ ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: { main: "can-stache-bindings" }
        },
        {
            name: "can-stache-key",
            version: "1.4.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-stache-key/package.json",
            origFileUrl: "./node_modules/can-stache-key/package.json",
            fileUrl: "./node_modules/can-stache-key/package.json",
            _from: "can-stache-key@^1.0.0",
            _id: "can-stache-key@1.4.0",
            _inBundle: false,
            _integrity:
                "sha512-miRbfafY+jLzdzE5RxON7pIhlTgk5GOLWvhpk4P4MSfP8K7AprMBt5T0SIE4TIWRII5TX4qlG2QtaIx5U+lQgQ==",
            _location: "/can-stache-key",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-key@^1.0.0",
                name: "can-stache-key",
                escapedName: "can-stache-key",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-compute",
                "/can-control",
                "/can-list",
                "/can-map",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-stache-key/-/can-stache-key-1.4.0.tgz",
            _shasum: "7173a7144b871d00b52c917f22921b4f4ac03aac",
            _spec: "can-stache-key@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "DoneJS Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache-key/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-reflect": "^1.16.4",
                "can-reflect-promise": "^2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Read and write keys on a value",
            devDependencies: {
                "can-event-queue": "<2.0.0",
                "can-observation": "^4.0.0-pre.2",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0-pre.11",
                "can-test-helpers": "^1.1.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com",
            keywords: ["DoneJS", "CanJS"],
            license: "MIT",
            main: "can-stache-key",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-key.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-stache-key"
            }
        },
        {
            name: "can-view-model",
            version: "4.0.1",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-view-model/package.json",
            origFileUrl: "./node_modules/can-view-model/package.json",
            fileUrl: "./node_modules/can-view-model/package.json",
            _from: "can-view-model@^4.0.0",
            _id: "can-view-model@4.0.1",
            _inBundle: false,
            _integrity:
                "sha512-GTGF0TcOeoJwLb6UwsPDdiWmQZXRbJWeWjwWDcuu7+5B8DvWSQuWpa2u0SWcapvGVm/MasbNvjxYVrUgmsJttw==",
            _location: "/can-view-model",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-model@^4.0.0",
                name: "can-view-model",
                escapedName: "can-view-model",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: ["/can-component", "/can-stache-bindings"],
            _resolved:
                "https://registry.npmjs.org/can-view-model/-/can-view-model-4.0.1.tgz",
            _shasum: "13f6d87e670aadf6d50d0f48368fd3d6d6173419",
            _spec: "can-view-model@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-reflect": "^1.2.1",
                "can-simple-map": "^4.0.0",
                "can-symbol": "^1.5.0"
            },
            deprecated: false,
            description: "Gets or sets the view model of an element.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.0.1",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com/doc/can-view-model.html",
            keywords: ["canjs", "donejs"],
            main: "can-view-model",
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-dom-data-state",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-dom-data-state/package.json",
            origFileUrl: "./node_modules/can-dom-data-state/package.json",
            fileUrl: "./node_modules/can-dom-data-state/package.json",
            _from: "can-dom-data-state@^1.0.1",
            _id: "can-dom-data-state@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-TM9tk3TrR6Uom4plcmqPzDDYckcYUfQ0+WyUuoFxaDmO0BQr3q38ndePkJSn8203I0mXRZJ6od/cn4OuWheN5A==",
            _location: "/can-dom-data-state",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-dom-data-state@^1.0.1",
                name: "can-dom-data-state",
                escapedName: "can-dom-data-state",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-component",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-import"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-data-state/-/can-dom-data-state-1.0.1.tgz",
            _shasum: "b2fb9cbad67dffea4b77259aea900db6bfb0964e",
            _spec: "can-dom-data-state@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-dom-data-state/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-cid": "^1.1.0",
                "can-dom-mutate": "^1.0.0",
                "can-namespace": "^1.0.0"
            },
            deprecated: false,
            description:
                "A key/value store useful for associating data with DOM Nodes.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.5.13",
                "steal-qunit": "^1.0.1",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "data", "dom", "donejs-plugin"],
            license: "MIT",
            main: "can-dom-data-state.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-data-state.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre": "npm version prerelease && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-dom-data-state"
            }
        },
        {
            name: "can-child-nodes",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-child-nodes/package.json",
            origFileUrl: "./node_modules/can-child-nodes/package.json",
            fileUrl: "./node_modules/can-child-nodes/package.json",
            _from: "can-child-nodes@^1.0.0",
            _id: "can-child-nodes@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-OFrdwLKy1CaXWaMRR4Xy2uvUJbCUIrI/noXWakk5La7H+OUkQ53ritbjasCLTTubPqX0aaNzIZ8HcdajUhv94w==",
            _location: "/can-child-nodes",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-child-nodes@^1.0.0",
                name: "can-child-nodes",
                escapedName: "can-child-nodes",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-fragment",
                "/can-stache",
                "/can-view-import",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-child-nodes/-/can-child-nodes-1.2.0.tgz",
            _shasum: "bafb11310815ef6737e715f3823b92854c8e3257",
            _spec: "can-child-nodes@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "donejs core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-child-nodes/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Read child nodes from elements",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-child-nodes",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-child-nodes.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-string",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-string/package.json",
            origFileUrl: "./node_modules/can-string/package.json",
            fileUrl: "./node_modules/can-string/package.json",
            _from: "can-string@<2.0.0",
            _id: "can-string@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-ZbaYBQ51WYSCanuxrUzXgOdOfzZGq8qKvX1JTKiPUa0IOSOQGkbViq4n8sj1jEGUQ8P/8NOnQu5ThBuM9B9/Bg==",
            _location: "/can-string",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-string@<2.0.0",
                name: "can-string",
                escapedName: "can-string",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-connect",
                "/can-construct",
                "/can-control",
                "/can-route",
                "/can-stache"
            ],
            _resolved:
                "https://registry.npmjs.org/can-string/-/can-string-1.0.0.tgz",
            _shasum: "cd461d136e635a2224c55fb1c692a0de51cc72b9",
            _spec: "can-string@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-string/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "String helpers",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-string",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-string.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"]
            }
        },
        {
            name: "can-dom-events",
            version: "1.3.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-dom-events/package.json",
            origFileUrl: "./node_modules/can-dom-events/package.json",
            fileUrl: "./node_modules/can-dom-events/package.json",
            _from: "can-dom-events@^1.1.0",
            _id: "can-dom-events@1.3.0",
            _inBundle: false,
            _integrity:
                "sha512-QpJsekj/bqRFJUZoLOpm793MepLGEIkVbWFTqXfIEIM4+Zcljlz8EbLBTphfv1YcM8gHfXauGrscDMFzG+Xh8g==",
            _location: "/can-dom-events",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-dom-events@^1.1.0",
                name: "can-dom-events",
                escapedName: "can-dom-events",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-component",
                "/can-control",
                "/can-event-dom-enter",
                "/can-event-dom-radiochange",
                "/can-event-queue",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-stache-bindings",
                "/can-util/can-event-dom-radiochange",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-events/-/can-dom-events-1.3.0.tgz",
            _shasum: "8d639f4712839cf763cb5a2b78dcacd2d9cc08f6",
            _spec: "can-dom-events@^1.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Chris Andrejewski",
                email: "core@donejs.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-dom-events/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-globals": "<2.0.0",
                "can-key-tree": "^1.0.0",
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.11.1"
            },
            deprecated: false,
            description: "Listen for native and custom DOM events",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                jquery: "^3.2.1",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-dom-events",
            keywords: ["canjs", "custom", "dom", "events", "listener"],
            license: "MIT",
            main: "can-dom-events",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-events.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                jshint: "jshint ./*.js ./helpers/*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test && npm run build",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-dom-mutate",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-dom-mutate/package.json",
            origFileUrl: "./node_modules/can-dom-mutate/package.json",
            fileUrl: "./node_modules/can-dom-mutate/package.json",
            _from: "can-dom-mutate@^1.0.0",
            _id: "can-dom-mutate@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-zuk3FouBmgi0+zu6KIdMulxlmOgKrAHigObX7a5lveqkCMnwvZWaICDUGH6YjJN0cmnjOdnLRcEp74msW/lGVw==",
            _location: "/can-dom-mutate",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-dom-mutate@^1.0.0",
                name: "can-dom-mutate",
                escapedName: "can-dom-mutate",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-component",
                "/can-connect",
                "/can-control",
                "/can-dom-data",
                "/can-dom-data-state",
                "/can-stache",
                "/can-stache-bindings",
                "/can-view-callbacks",
                "/can-view-import",
                "/can-view-live",
                "/can-view-nodelist",
                "/can-view-target",
                "/shuttle-canstrap/can-connect"
            ],
            _resolved:
                "https://registry.npmjs.org/can-dom-mutate/-/can-dom-mutate-1.1.0.tgz",
            _shasum: "b2f66b916483889534c7df280734706d77ab2251",
            _spec: "can-dom-mutate@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "DoneJS Team",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-dom-mutate/issues" },
            bundleDependencies: false,
            dependencies: { "can-globals": "^1.0.0" },
            deprecated: false,
            description: "Dispatch and listen for DOM mutations",
            devDependencies: {
                fixpack: "^2.3.1",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-dom-mutate",
            keywords: ["canjs", "mutation", "mutationobserver", "observer"],
            license: "MIT",
            main: "can-dom-mutate",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-mutate.git"
            },
            scripts: {
                jshint: "jshint ./*.js ./test/*.js --config",
                lint: "fixpack && npm run jshint",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: { main: "can-dom-mutate" }
        },
        {
            name: "can-validate-validatejs",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            origFileUrl: "./node_modules/can-validate-validatejs/package.json",
            fileUrl: "./node_modules/can-validate-validatejs/package.json",
            _from: "can-validate-validatejs@^1.0.0",
            _id: "can-validate-validatejs@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-EKIJey6c5qWbLOE+nKSSXZLfiRO3ajbxc+QNTNRTWv3UgEB3rvI0Np0dhHApj3qY75qTFwqzlrYp24ebS0929g==",
            _location: "/can-validate-validatejs",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-validate-validatejs@^1.0.0",
                name: "can-validate-validatejs",
                escapedName: "can-validate-validatejs",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/"],
            _resolved:
                "https://registry.npmjs.org/can-validate-validatejs/-/can-validate-validatejs-1.0.0.tgz",
            _shasum: "27117d33941cf224bee1b7bd7dc2fff8c8ce9c26",
            _spec: "can-validate-validatejs@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.11.1",
                "validate.js": "^0.11.1"
            },
            deprecated: false,
            description:
                "Create validator functions that use ValidateJS to validate values.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-validate-validatejs#readme",
            keywords: [
                "Validate",
                "Validate.js",
                "can-validate",
                "plugin",
                "canjs"
            ],
            license: "MIT",
            main: "can-validate-validatejs.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: ["bit-docs", "testee", "steal-tools"],
                npmDependencies: ["steal-qunit"],
                paths: {
                    "validate.js": "./node_modules/validate.js/validate.js"
                }
            }
        },
        {
            name: "can-validate",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate/package.json",
            origFileUrl: "./node_modules/can-validate/package.json",
            fileUrl: "./node_modules/can-validate/package.json",
            _from: "can-validate@^1.1.0",
            _id: "can-validate@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-rB+n/EC5OnStQ92RpHTGbBqG9bGSEdYZnmwZ3vUHJg3ja2IMs20ufueLj2j/tkas97x1oShxjxvdz+wt7b2Yng==",
            _location: "/can-validate",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-validate@^1.1.0",
                name: "can-validate",
                escapedName: "can-validate",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: ["/can-define-validate-validatejs"],
            _resolved:
                "https://registry.npmjs.org/can-validate/-/can-validate-1.2.0.tgz",
            _shasum: "6c90bc9a275d1ef18ebd3bfef5dc1657fab5fa56",
            _spec: "can-validate@^1.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define-validate-validatejs",
            author: { name: "Bitovi" },
            browser: {},
            bugs: { url: "https://github.com/canjs/can-validate/issues" },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.11.1" },
            deprecated: false,
            description: "Validation plugin for CanJS.",
            devDependencies: {
                "bit-docs": "0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.11.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.8.0"
            },
            homepage: "https://github.com/canjs/can-validate",
            keywords: ["Validate", "plugin", "canjs"],
            license: "MIT",
            main: "can-validate.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true }
            }
        },
        {
            name: "can-view-live",
            version: "4.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-view-live/package.json",
            origFileUrl: "./node_modules/can-view-live/package.json",
            fileUrl: "./node_modules/can-view-live/package.json",
            _from: "can-view-live@^4.2.0",
            _id: "can-view-live@4.2.0",
            _inBundle: false,
            _integrity:
                "sha512-8BCkWoQ/eVaDgVMeIof1ptljMTVH3RY6R+jkTE3i9hLbh4pSEGlA6uMXczuwnsEQmQSxU7mJyCeIVcpcHPo28Q==",
            _location: "/can-view-live",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-live@^4.2.0",
                name: "can-view-live",
                escapedName: "can-view-live",
                rawSpec: "^4.2.0",
                saveSpec: null,
                fetchSpec: "^4.2.0"
            },
            _requiredBy: ["/can-stache", "/can-stache-bindings"],
            _resolved:
                "https://registry.npmjs.org/can-view-live/-/can-view-live-4.2.0.tgz",
            _shasum: "b3fd840eb8b508d754d97c0111aba2d601c88e27",
            _spec: "can-view-live@^4.2.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-live/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-attribute-observable": "<2.0.0",
                "can-child-nodes": "^1.0.0",
                "can-diff": "^1.0.1",
                "can-dom-mutate": "^1.0.0",
                "can-fragment": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.10.2",
                "can-reflect-dependencies": "^1.0.0",
                "can-simple-observable": "^2.0.0",
                "can-symbol": "^1.4.1",
                "can-view-callbacks": "^4.0.0",
                "can-view-nodelist": "^4.2.0",
                "can-view-parser": "^4.0.0",
                "can-view-target": "^4.0.0"
            },
            deprecated: false,
            description:
                "[![Sauce Labs Test Status](https://saucelabs.com/browser-matrix/can-view-live.svg)](https://saucelabs.com/u/can-view-live)",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-simple-map": "^4.0.0",
                "can-test-helpers": "^1.1.0",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                steal: "^1.2.10",
                "steal-qunit": "^1.0.1",
                "test-saucelabs": "0.0.3",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-view-live.html",
            keywords: ["CanJS", "DoneJS"],
            main: "can-view-live",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-live.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm test && node test/sauce-labs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint test/*.js lib/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    documentjs: true,
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-view-live"
            }
        },
        {
            name: "can-join-uris",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-join-uris/package.json",
            origFileUrl: "./node_modules/can-join-uris/package.json",
            fileUrl: "./node_modules/can-join-uris/package.json",
            _from: "can-join-uris@^1.0.0",
            _id: "can-join-uris@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-zW1U5yL3lQ3VzQtIPx5ZMb4P3mU7jAzWTn1slN2gGiR50KvWV16KZELTy88m3vFn9y1pj1PaQjOKioU5SV+log==",
            _location: "/can-join-uris",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-join-uris@^1.0.0",
                name: "can-join-uris",
                escapedName: "can-join-uris",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache"],
            _resolved:
                "https://registry.npmjs.org/can-join-uris/-/can-join-uris-1.2.0.tgz",
            _shasum: "a858262996fd13c744ec806a5a456225f357f052",
            _spec: "can-join-uris@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-join-uris/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-parse-uri": "^1.1.0"
            },
            deprecated: false,
            description: "Join uris together",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-join-uris",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-join-uris.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {}
        },
        {
            name: "can-dom-data",
            version: "1.0.1",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-dom-data/package.json",
            origFileUrl: "./node_modules/can-dom-data/package.json",
            fileUrl: "./node_modules/can-dom-data/package.json",
            _from: "can-dom-data@^1.0.1",
            _id: "can-dom-data@1.0.1",
            _inBundle: false,
            _integrity:
                "sha512-ydbZ8HYwGIl2fRPxBLtiNzaFzMBX0s0CFOq+/EhMWFX08IBLSdrykfvmYxzfBOoF58R3eFiCSj3KMwNwvdXYWw==",
            _location: "/can-dom-data",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-dom-data@^1.0.1",
                name: "can-dom-data",
                escapedName: "can-dom-data",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: ["/can-stache"],
            _resolved:
                "https://registry.npmjs.org/can-dom-data/-/can-dom-data-1.0.1.tgz",
            _shasum: "b4a0f93a14a2e3138f042cd968e16fa34968e918",
            _spec: "can-dom-data@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-dom-data/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-dom-mutate": "^1.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description:
                "A key/value store (based on WeakMap) for associating data with DOM nodes.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.5.13",
                "steal-qunit": "^1.0.1",
                testee: "^0.7.0"
            },
            homepage: "https://canjs.com/doc/can-dom-data.html",
            keywords: ["canjs", "data", "dom"],
            license: "MIT",
            main: "can-dom-data.js",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-dom-data.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre": "npm version prerelease && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { "steal-tools": true, testee: true },
                main: "can-dom-data"
            }
        },
        {
            name: "can-stache-helpers",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-stache-helpers/package.json",
            origFileUrl: "./node_modules/can-stache-helpers/package.json",
            fileUrl: "./node_modules/can-stache-helpers/package.json",
            _from: "can-stache-helpers@^1.0.0",
            _id: "can-stache-helpers@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-pQwmrei25IXih92JOVGXH0uMsP75/77I0+Mnc44n0lOQSow2GW8ySUH2ov27YovWemEww2hPf/LRQHmchchk5w==",
            _location: "/can-stache-helpers",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-stache-helpers@^1.0.0",
                name: "can-stache-helpers",
                escapedName: "can-stache-helpers",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-stache", "/can-view-scope"],
            _resolved:
                "https://registry.npmjs.org/can-stache-helpers/-/can-stache-helpers-1.2.0.tgz",
            _shasum: "936e293fbac17f87b8b4e98d9aa2feca0b47c553",
            _spec: "can-stache-helpers@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-stache-helpers/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Helper functions for can-stache",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/doc/can-stache-helpers.html",
            keywords: ["canjs", "canjs-plugin", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-stache-helpers",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-stache-helpers.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js ./src/ --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-validate-validatejs",
            version: "0.1.3",
            nestedFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            origFileUrl: "./node_modules/can-validate-validatejs/package.json",
            __crawledNestedPosition: true,
            nextFileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            fileUrl:
                "./node_modules/can-define-validate-validatejs/node_modules/can-validate-validatejs/package.json",
            _from: "can-validate-validatejs@^0.1.0",
            _id: "can-validate-validatejs@0.1.3",
            _inBundle: false,
            _integrity:
                "sha512-01+CRMtAYpokG6YE01hh7/C+uaUnKW1QLXTyL7XUvUNIA7SvyrvPX64694YF1/X+UauYoXy9+ARQCInP3Qsmtg==",
            _location:
                "/can-define-validate-validatejs/can-validate-validatejs",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-validate-validatejs@^0.1.0",
                name: "can-validate-validatejs",
                escapedName: "can-validate-validatejs",
                rawSpec: "^0.1.0",
                saveSpec: null,
                fetchSpec: "^0.1.0"
            },
            _requiredBy: ["/can-define-validate-validatejs"],
            _resolved:
                "https://registry.npmjs.org/can-validate-validatejs/-/can-validate-validatejs-0.1.3.tgz",
            _shasum: "561f2a3f93595d0551f6f7679b5b2a8ec09059e8",
            _spec: "can-validate-validatejs@^0.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define-validate-validatejs",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-validate-validatejs/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-reflect": "^1.11.1",
                "validate.js": "^0.11.1"
            },
            deprecated: false,
            description:
                "Create validator functions that use ValidateJS to validate values.",
            devDependencies: {
                "bit-docs": "^0.0.8",
                "detect-cyclic-packages": "^1.1.0",
                "http-server": "^0.10.0",
                jshint: "^2.9.4",
                steal: "^1.0.8",
                "steal-qunit": "^1.0.0",
                "steal-tools": "^1.0.1",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-validate-validatejs#readme",
            keywords: [
                "Validate",
                "Validate.js",
                "can-validate",
                "plugin",
                "canjs"
            ],
            license: "MIT",
            main: "can-validate-validatejs.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-validate-validatejs.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "http-server -c-1",
                jshint: "jshint . --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major":
                    "npm version major && npm run build && npm publish",
                "release:minor":
                    "npm version minor && npm run build && npm publish",
                "release:patch":
                    "npm version patch && npm run build && npm publish",
                "release:pre":
                    "npm version prerelease && npm run build && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            },
            steal: {
                ignoreBrowser: true,
                npmIgnore: {
                    "bit-docs": true,
                    testee: true,
                    "steal-tools": true
                },
                npmDependencies: { "steal-qunit": true },
                paths: {
                    "validate.js@0.11.1#validate":
                        "./node_modules/validate.js/validate.js"
                }
            }
        },
        {
            name: "can-define-lazy-value",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-define-lazy-value/package.json",
            origFileUrl: "./node_modules/can-define-lazy-value/package.json",
            fileUrl: "./node_modules/can-define-lazy-value/package.json",
            _from: "can-define-lazy-value@^1.0.1",
            _id: "can-define-lazy-value@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-jkx2fBG9zz5p3G34+zVc1uyzzm0lesWmanKZBriRvmBXx724s7okiK8DViATrzAWX64RSAdEyv+wXLzwmDoOrA==",
            _location: "/can-define-lazy-value",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-define-lazy-value@^1.0.1",
                name: "can-define-lazy-value",
                escapedName: "can-define-lazy-value",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: [
                "/can-define",
                "/can-event-queue",
                "/can-query-logic",
                "/can-stache",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-define-lazy-value/-/can-define-lazy-value-1.1.0.tgz",
            _shasum: "a90478b6d8e35446fcf1aab9f0c6ba01ed20782c",
            _spec: "can-define-lazy-value@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-event-queue",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-define-lazy-value/issues"
            },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description:
                "Define properties with lazy values using Object.defineProperty",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "define-lazy-value",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-define-lazy-value.git"
            },
            scripts: {
                build: "node build.js",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: { npmIgnore: { testee: true, "steal-tools": true } }
        },
        {
            name: "can-string-to-any",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-string-to-any/package.json",
            origFileUrl: "./node_modules/can-string-to-any/package.json",
            fileUrl: "./node_modules/can-string-to-any/package.json",
            _from: "can-string-to-any@^1.0.1",
            _id: "can-string-to-any@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-rO1metfb0RoK4X1uYYtQwcWqv4a6bhvmTqYSS8srRVfJBsB/slPK0L+ypv3VRYfcYQeMfp8bBvRGcxF1v3Fogw==",
            _location: "/can-string-to-any",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-string-to-any@^1.0.1",
                name: "can-string-to-any",
                escapedName: "can-string-to-any",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: ["/can-define"],
            _resolved:
                "https://registry.npmjs.org/can-string-to-any/-/can-string-to-any-1.2.0.tgz",
            _shasum: "b10043aeec9d3d0623fd4388d692b803b4577085",
            _spec: "can-string-to-any@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-string-to-any/issues" },
            bundleDependencies: false,
            dependencies: {},
            deprecated: false,
            description: "Convert strings to equivalent JavaScript values",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-string-to-any",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-string-to-any.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-string-to-any"
            }
        },
        {
            name: "can-data-types",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-define/node_modules/can-data-types/package.json",
            origFileUrl: "./node_modules/can-data-types/package.json",
            fileUrl: "./node_modules/can-data-types/package.json",
            _from: "can-data-types@<2.0.0",
            _id: "can-data-types@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-uP6i/uY/9omVik+gM2ewI1xNTVwCEttC+ITSFr/KNin9JPNcD2tII348MVGzTQykmQ0etyjZRCSXTckhUhODRQ==",
            _location: "/can-data-types",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-data-types@<2.0.0",
                name: "can-data-types",
                escapedName: "can-data-types",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: ["/can-define"],
            _resolved:
                "https://registry.npmjs.org/can-data-types/-/can-data-types-1.2.0.tgz",
            _shasum: "816cc72ae61865bc4545d5c2e5681885b7693d8a",
            _spec: "can-data-types@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-define",
            author: {
                name: "DoneJS Contributors",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-data-types/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.16.1"
            },
            deprecated: false,
            description: "Reusable special data types",
            devDependencies: {
                "can-symbol": "^1.6.1",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "https://github.com/canjs/can-data-types#readme",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-data-types",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-data-types.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-data-types"
            }
        },
        {
            name: "can-key-tree",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-event-queue/node_modules/can-key-tree/package.json",
            origFileUrl: "./node_modules/can-key-tree/package.json",
            fileUrl: "./node_modules/can-key-tree/package.json",
            _from: "can-key-tree@^1.0.0",
            _id: "can-key-tree@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-zvv46l0iTwe3qGNcqg3tLuUSbMJeNQjN26DtXSeTWfPdGdgGK1yITE6LoJ3Sux9RpvzZdGJBJ6oXTnfv1NGYXg==",
            _location: "/can-key-tree",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-key-tree@^1.0.0",
                name: "can-key-tree",
                escapedName: "can-key-tree",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-diff",
                "/can-dom-events",
                "/can-event-queue",
                "/can-observation",
                "/can-reflect-promise",
                "/can-route",
                "/can-route-hash",
                "/can-route-pushstate",
                "/can-simple-map",
                "/can-simple-observable",
                "/can-view-scope",
                "/shuttle-canstrap/can-route-pushstate"
            ],
            _resolved:
                "https://registry.npmjs.org/can-key-tree/-/can-key-tree-1.2.0.tgz",
            _shasum: "dfe90821971dcbd1619b0eda78bb1a88a2b05912",
            _spec: "can-key-tree@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-dom-events",
            author: {
                name: "DoneJS Core Team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-key-tree/issues" },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.4.0" },
            deprecated: false,
            description: "Add and remove items to a tree",
            devDependencies: {
                docco: "^0.7.0",
                "done-serve": "^1.0.0",
                "donejs-cli": "^1.0.0",
                "generator-donejs": "^1.0.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://github.com/canjs/can-key-tree#readme",
            keywords: ["CanJS", "DoneJS", "donejs-plugin"],
            license: "MIT",
            main: "dist/cjs/can-key-tree",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-key-tree.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-key-tree"
            }
        },
        {
            name: "can-cid",
            version: "1.3.0",
            nestedFileUrl:
                "./node_modules/can-single-reference/node_modules/can-cid/package.json",
            origFileUrl: "./node_modules/can-cid/package.json",
            fileUrl: "./node_modules/can-cid/package.json",
            _from: "can-cid@^1.1.2",
            _id: "can-cid@1.3.0",
            _inBundle: false,
            _integrity:
                "sha512-sbm/Jgo/eTMTDT/r3SQlUX5cQr9CTc4dJ5n+qcxF5/4glbMkXI6Kpjeo2PnSC5KoHmLqsmzVnEickx26F+YLDw==",
            _location: "/can-cid",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-cid@^1.1.2",
                name: "can-cid",
                escapedName: "can-cid",
                rawSpec: "^1.1.2",
                saveSpec: null,
                fetchSpec: "^1.1.2"
            },
            _requiredBy: [
                "/can-dom-data-state",
                "/can-event-dom-enter",
                "/can-event-dom-enter/can-dom-data-state",
                "/can-list",
                "/can-map",
                "/can-single-reference",
                "/can-util",
                "/can-util/can-dom-data-state",
                "/can-util/can-event-dom-radiochange"
            ],
            _resolved: "https://registry.npmjs.org/can-cid/-/can-cid-1.3.0.tgz",
            _shasum: "ad26ea6f70bd18661ea845d85ab7b98e295a78f9",
            _spec: "can-cid@^1.1.2",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-single-reference",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-cid/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description:
                "Utility for getting a unique identifier for an object",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                documentjs: "^0.4.2",
                "http-server": "^0.10.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                "test-saucelabs": "0.0.3",
                testee: "^0.3.1"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "canjs", "plugin", "donejs"],
            main: "can-cid",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-cid.git"
            },
            scripts: {
                build: "node build.js",
                ci: "npm run build && npm run test && node test-saucelabs.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "http-server": "http-server -p 3000 --silent",
                jshint: "jshint ./*.js --config",
                postversion:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update dist for release" && git checkout -b release && git add -f dist/'
            }
        },
        {
            name: "can-fragment",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-stache/node_modules/can-fragment/package.json",
            origFileUrl: "./node_modules/can-fragment/package.json",
            fileUrl: "./node_modules/can-fragment/package.json",
            _from: "can-fragment@^1.0.0",
            _id: "can-fragment@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-zwf4grr1kGNevgi7svu+QYxmRg9aH7z90Fx14hI/pHoYqUlQqC9469p3dZSUDMMDgreOGYL8MC1C6GJNCTXuFg==",
            _location: "/can-fragment",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-fragment@^1.0.0",
                name: "can-fragment",
                escapedName: "can-fragment",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-component",
                "/can-stache",
                "/can-view-callbacks",
                "/can-view-live"
            ],
            _resolved:
                "https://registry.npmjs.org/can-fragment/-/can-fragment-1.2.0.tgz",
            _shasum: "0dc8575810d2f4e175ad13d1f0ea3bfffa5c4de7",
            _spec: "can-fragment@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "donejs core team",
                email: "core@donejs.com",
                url: "http://donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-fragment/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-child-nodes": "^1.0.0",
                "can-globals": "^1.0.1",
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.16.1"
            },
            deprecated: false,
            description: "Create a fragment from lots of stuff",
            devDependencies: {
                "can-vdom": "^4.0.1",
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs",
            keywords: ["canjs", "donejs", "donejs-plugin"],
            license: "MIT",
            main: "can-fragment",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-fragment.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-reflect-dependencies",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-bind/node_modules/can-reflect-dependencies/package.json",
            origFileUrl: "./node_modules/can-reflect-dependencies/package.json",
            fileUrl: "./node_modules/can-reflect-dependencies/package.json",
            _from: "can-reflect-dependencies@^1.0.0",
            _id: "can-reflect-dependencies@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-2ui/eB0rpSIC9oHYwlDlQfSGIZbWUsTg5epygCcRaqTUgvxZJ2jHZD5pbW6b5t9hKDjaluVb7SdUrRuCaT9wig==",
            _location: "/can-reflect-dependencies",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-reflect-dependencies@^1.0.0",
                name: "can-reflect-dependencies",
                escapedName: "can-reflect-dependencies",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: [
                "/can-attribute-observable",
                "/can-bind",
                "/can-simple-observable",
                "/can-stache-bindings",
                "/can-view-live",
                "/can-view-scope"
            ],
            _resolved:
                "https://registry.npmjs.org/can-reflect-dependencies/-/can-reflect-dependencies-1.1.0.tgz",
            _shasum: "142b72bafddc00f740f9fecea9349c1edb6e9405",
            _spec: "can-reflect-dependencies@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-bind",
            author: { name: "Bitovi" },
            bugs: {
                url: "https://github.com/canjs/can-reflect-dependencies/issues"
            },
            bundleDependencies: false,
            dependencies: { "can-reflect": "^1.10.0", "can-symbol": "^1.4.1" },
            deprecated: false,
            description: "Keep track of external observable dependendecies",
            devDependencies: {
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                jshint: "^2.9.5",
                steal: "^1.5.15",
                "steal-qunit": "^1.0.1",
                testee: "^0.8.0"
            },
            homepage:
                "https://github.com/canjs/can-reflect-dependencies#readme",
            keywords: ["canjs", "can-reflect"],
            license: "MIT",
            main: "can-reflect-dependencies.js",
            repository: {
                type: "git",
                url: "git+https://github.com/canjs/can-reflect-dependencies.git"
            },
            scripts: {
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox"
            }
        },
        {
            name: "can-param",
            version: "1.1.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-param/package.json",
            origFileUrl: "./node_modules/can-param/package.json",
            fileUrl: "./node_modules/can-param/package.json",
            _from: "can-param@^1.0.1",
            _id: "can-param@1.1.0",
            _inBundle: false,
            _integrity:
                "sha512-mS0rsckBqJwBEXOTP1Ygo9YS909+lw9l9yerJBl8Sc1sMEUvfnEwXCCVbBAdchqsqI9NQPIuP/xz592Iz6z8JA==",
            _location: "/can-param",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-param@^1.0.1",
                name: "can-param",
                escapedName: "can-param",
                rawSpec: "^1.0.1",
                saveSpec: null,
                fetchSpec: "^1.0.1"
            },
            _requiredBy: [
                "/can-ajax",
                "/can-route",
                "/can-util",
                "/can-util/can-ajax",
                "/shuttle-canstrap/can-ajax"
            ],
            _resolved:
                "https://registry.npmjs.org/can-param/-/can-param-1.1.0.tgz",
            _shasum: "20d48fbd14174eafa6833118a65845eb61de0d5d",
            _spec: "can-param@^1.0.1",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-ajax",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-param/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Serialize an array or object into a query string.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/doc/can-param.html",
            keywords: ["canjs", "parameter", "query string"],
            main: "can-param",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-param.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-deparam",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-route/node_modules/can-deparam/package.json",
            origFileUrl: "./node_modules/can-deparam/package.json",
            fileUrl: "./node_modules/can-deparam/package.json",
            _from: "can-deparam@^1.0.0",
            _id: "can-deparam@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-Qq1wkHTv7rUFrJ6YEC9LU5O1sahwoGUt7EStUTh19cKyISFI33dae4aEGcy4+ztPkCLGLS6EpAeTyau7TWdbig==",
            _location: "/can-deparam",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-deparam@^1.0.0",
                name: "can-deparam",
                escapedName: "can-deparam",
                rawSpec: "^1.0.0",
                saveSpec: null,
                fetchSpec: "^1.0.0"
            },
            _requiredBy: ["/can-route", "/can-util"],
            _resolved:
                "https://registry.npmjs.org/can-deparam/-/can-deparam-1.2.0.tgz",
            _shasum: "57bb7d7b35cdc2bc626f7d2042ca72f08471004f",
            _spec: "can-deparam@^1.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-util",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-deparam/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "1.0.0" },
            deprecated: false,
            description: "Deserialize a query string into an array or object.",
            devDependencies: {
                "can-string-to-any": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/doc/can-deparam.html",
            keywords: ["canjs", "query string"],
            main: "can-deparam",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-deparam.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                }
            }
        },
        {
            name: "can-attribute-observable",
            version: "1.0.0",
            nestedFileUrl:
                "./node_modules/can-stache-bindings/node_modules/can-attribute-observable/package.json",
            origFileUrl: "./node_modules/can-attribute-observable/package.json",
            fileUrl: "./node_modules/can-attribute-observable/package.json",
            _from: "can-attribute-observable@<2.0.0",
            _id: "can-attribute-observable@1.0.0",
            _inBundle: false,
            _integrity:
                "sha512-k51OxrHQiyEOTUfeRA4O9gCehe3+WCT+zOWlXptWF6TnwcEQwgX1AldFkOJJxDHBEnV/aUChElv5Hza5+vB7Jg==",
            _location: "/can-attribute-observable",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-attribute-observable@<2.0.0",
                name: "can-attribute-observable",
                escapedName: "can-attribute-observable",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: ["/can-stache-bindings", "/can-view-live"],
            _resolved:
                "https://registry.npmjs.org/can-attribute-observable/-/can-attribute-observable-1.0.0.tgz",
            _shasum: "587893daeb29743e3ccd3e1b0b9fa1bb77253d98",
            _spec: "can-attribute-observable@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-view-live",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bundleDependencies: false,
            dependencies: {
                "can-diff": "^1.0.1",
                "can-dom-data-state": "^1.0.1",
                "can-dom-events": "^1.1.2",
                "can-dom-mutate": "^1.0.3",
                "can-event-dom-radiochange": "^2.1.0",
                "can-globals": "^1.0.1",
                "can-observation": "^4.0.1",
                "can-observation-recorder": "^1.0.2",
                "can-queues": "^1.0.1",
                "can-reflect": "^1.13.3",
                "can-reflect-dependencies": "^1.0.1",
                "can-simple-observable": "^2.0.2"
            },
            deprecated: false,
            description: "Create observables from HTML attributes.",
            devDependencies: {
                "can-vdom": "^4.0.1",
                "detect-cyclic-packages": "^1.1.1",
                jshint: "^2.9.5",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                testee: "^0.8.0"
            },
            keywords: [],
            main: "can-attribute-observable",
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint ./*.js test/*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-control",
            version: "4.2.0",
            nestedFileUrl:
                "./node_modules/can-component/node_modules/can-control/package.json",
            origFileUrl: "./node_modules/can-control/package.json",
            fileUrl: "./node_modules/can-control/package.json",
            _from: "can-control@^4.0.0",
            _id: "can-control@4.2.0",
            _inBundle: false,
            _integrity:
                "sha512-cWRfHhKekzPDJLbR9wDqyf17nokhFbvsBx+VWp5hSlt/qlfzftKtVkJ2EcII1Yh0lgIEOV7Pr+V8a8TCRpa4SA==",
            _location: "/can-control",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-control@^4.0.0",
                name: "can-control",
                escapedName: "can-control",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: ["/can-component"],
            _resolved:
                "https://registry.npmjs.org/can-control/-/can-control-4.2.0.tgz",
            _shasum: "746817b695f5770985ebe36b37ff3ffbdf6e7a70",
            _spec: "can-control@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-component",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-control/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.1.1",
                "can-construct": "^3.2.0",
                "can-dom-events": "^1.1.0",
                "can-dom-mutate": "<2.0.0",
                "can-event-queue": "<2.0.0",
                "can-key": "<2.0.0",
                "can-log": "^1.0.0",
                "can-namespace": "1.0.0",
                "can-observation": "^4.0.0",
                "can-reflect": "^1.6.0",
                "can-stache-key": "^1.0.0",
                "can-string": "<2.0.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Declarative event bindings",
            devDependencies: {
                "can-define": "^2.0.0",
                "can-queues": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-util": "^3.9.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.8",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-control.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-control",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-control.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages",
                jshint: "jshint can-control.js can-control_test.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        },
        {
            name: "can-reflect-promise",
            version: "2.1.0",
            nestedFileUrl:
                "./node_modules/can-stache-key/node_modules/can-reflect-promise/package.json",
            origFileUrl: "./node_modules/can-reflect-promise/package.json",
            fileUrl: "./node_modules/can-reflect-promise/package.json",
            _from: "can-reflect-promise@^2.0.0",
            _id: "can-reflect-promise@2.1.0",
            _inBundle: false,
            _integrity:
                "sha512-j5QLya6dQcwmQP5qZgn6qX7on6TzY2oqYocKt+xaWaAqgjLT1x7DKI8Eo5/qWHpC7zwt2lAMVxSx6BbC9PpPxQ==",
            _location: "/can-reflect-promise",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-reflect-promise@^2.0.0",
                name: "can-reflect-promise",
                escapedName: "can-reflect-promise",
                rawSpec: "^2.0.0",
                saveSpec: null,
                fetchSpec: "^2.0.0"
            },
            _requiredBy: ["/can-stache-key"],
            _resolved:
                "https://registry.npmjs.org/can-reflect-promise/-/can-reflect-promise-2.1.0.tgz",
            _shasum: "fd9f230e482861495bd69c66dba6a8cb4ced6a2a",
            _spec: "can-reflect-promise@^2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-stache-key",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-reflect-promise/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-key-tree": "^1.0.0",
                "can-log": "^1.0.0",
                "can-observation": "^4.0.0",
                "can-observation-recorder": "^1.0.0",
                "can-queues": "^1.0.0",
                "can-reflect": "^1.1.0",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Reflection support for Promise types",
            devDependencies: {
                "can-globals": "^1.0.0",
                "can-jquery": "^3.2.0",
                "can-test-helpers": "^1.1.0",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.5.4",
                "steal-benchmark": "0.0.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.1.2",
                testee: "^0.5.0"
            },
            directories: { test: "test" },
            homepage: "https://canjs.com/doc/can-reflect-promise.html",
            keywords: ["canjs", "canjs-plugin", "donejs"],
            license: "MIT",
            main: "can-reflect-promise",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-reflect-promise.git"
            },
            scripts: {
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint *.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            },
            system: { npmAlgorithm: "flat" },
            steal: { npmAlgorithm: "flat" }
        },
        {
            name: "can-parse-uri",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-join-uris/node_modules/can-parse-uri/package.json",
            origFileUrl: "./node_modules/can-parse-uri/package.json",
            fileUrl: "./node_modules/can-parse-uri/package.json",
            _from: "can-parse-uri@^1.1.0",
            _id: "can-parse-uri@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-hPENXbAH5wGipbuj4lNluku/uTPh/oCV9pGUNpk2RjVKrRGUuzmr1vSXXwBtH+bhJVCWt4+bSye2SRPnnZWPHg==",
            _location: "/can-parse-uri",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-parse-uri@^1.1.0",
                name: "can-parse-uri",
                escapedName: "can-parse-uri",
                rawSpec: "^1.1.0",
                saveSpec: null,
                fetchSpec: "^1.1.0"
            },
            _requiredBy: [
                "/can-ajax",
                "/can-join-uris",
                "/can-util",
                "/can-util/can-ajax",
                "/shuttle-canstrap/can-ajax"
            ],
            _resolved:
                "https://registry.npmjs.org/can-parse-uri/-/can-parse-uri-1.2.0.tgz",
            _shasum: "f45dc9b97f62a21f05c358b102fcce6217f46013",
            _spec: "can-parse-uri@^1.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-join-uris",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "https://www.bitovi.com/"
            },
            bugs: { url: "https://github.com/canjs/can-parse-uri/issues" },
            bundleDependencies: false,
            dependencies: { "can-namespace": "^1.0.0" },
            deprecated: false,
            description: "Parse a URI into its components.",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.3.0"
            },
            homepage: "https://canjs.com/",
            keywords: ["canjs", "parse", "uri"],
            main: "can-parse-uri",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-parse-uri.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                main: "can-parse-uri"
            }
        },
        {
            name: "can-event-dom-radiochange",
            version: "2.2.0",
            nestedFileUrl:
                "./node_modules/can-attribute-observable/node_modules/can-event-dom-radiochange/package.json",
            origFileUrl:
                "./node_modules/can-event-dom-radiochange/package.json",
            fileUrl: "./node_modules/can-event-dom-radiochange/package.json",
            _from: "can-event-dom-radiochange@^2.1.0",
            _id: "can-event-dom-radiochange@2.2.0",
            _inBundle: false,
            _integrity:
                "sha512-Vpt0l3iwlK5wmXcZEb80pJF+diBJreY35WSLNvg2A+PkB+gqu1n8xIhMndkCB2nwi4tyunfKggA+ynDpWDKfBA==",
            _location: "/can-event-dom-radiochange",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-event-dom-radiochange@^2.1.0",
                name: "can-event-dom-radiochange",
                escapedName: "can-event-dom-radiochange",
                rawSpec: "^2.1.0",
                saveSpec: null,
                fetchSpec: "^2.1.0"
            },
            _requiredBy: ["/can-attribute-observable"],
            _resolved:
                "https://registry.npmjs.org/can-event-dom-radiochange/-/can-event-dom-radiochange-2.2.0.tgz",
            _shasum: "6d23a7869442a8da990f88ad7fde458652113327",
            _spec: "can-event-dom-radiochange@^2.1.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-attribute-observable",
            author: {
                name: "Chris Andrejewski",
                email: "core@donejs.com",
                url: "https://bitovi.com"
            },
            bugs: {
                url: "https://github.com/canjs/can-event-dom-radiochange/issues"
            },
            bundleDependencies: false,
            dependencies: {
                "can-dom-events": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-namespace": "1.0.0"
            },
            deprecated: false,
            description: "Custom radiochange event",
            devDependencies: {
                "detect-cyclic-packages": "^1.1.0",
                fixpack: "^2.3.1",
                jshint: "^2.9.1",
                steal: "^1.3.1",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.2.0",
                testee: "^0.6.0"
            },
            homepage: "https://canjs.com/doc/can-event-dom-radiochange.html",
            keywords: ["canjs", "change", "event", "radio"],
            license: "MIT",
            main: "can-event-dom-radiochange",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-event-dom-radiochange.git"
            },
            scripts: {
                build: "node build.js",
                "detect-cycle": "detect-cyclic-packages --ignore done-serve",
                "install-canary": "npm install --no-shrinkwrap",
                "install-locked": "npm install",
                jshint: "jshint ./*.js --config",
                lint: "fixpack && npm run jshint",
                postversion: "git push --follow-tags",
                preversion: "npm test && npm run build",
                test: "npm run detect-cycle && npm run lint && npm run testee",
                testee: "testee test.html --browsers firefox"
            },
            steal: {
                npmIgnore: { testee: true, "steal-tools": true },
                main: "can-event-dom-radiochange"
            }
        },
        {
            name: "can-key",
            version: "1.2.0",
            nestedFileUrl:
                "./node_modules/can-control/node_modules/can-key/package.json",
            origFileUrl: "./node_modules/can-key/package.json",
            fileUrl: "./node_modules/can-key/package.json",
            _from: "can-key@<2.0.0",
            _id: "can-key@1.2.0",
            _inBundle: false,
            _integrity:
                "sha512-Y4IA74QqyOdf0C0Ar2nppf0U+hJpqdxlUfTXn4aIRy5NArBhxilP11y+u3Cm398QNcBXRtQb6iALCOFsZlJt3g==",
            _location: "/can-key",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-key@<2.0.0",
                name: "can-key",
                escapedName: "can-key",
                rawSpec: "<2.0.0",
                saveSpec: null,
                fetchSpec: "<2.0.0"
            },
            _requiredBy: [
                "/can-compute",
                "/can-connect",
                "/can-control",
                "/can-query-logic",
                "/can-simple-observable"
            ],
            _resolved: "https://registry.npmjs.org/can-key/-/can-key-1.2.0.tgz",
            _shasum: "a148c8cb6d78823741d094a13bf95a5f31915e10",
            _spec: "can-key@<2.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\can-control",
            author: {
                name: "DoneJS",
                email: "core@donejs.com",
                url: "donejs.com"
            },
            bugs: { url: "https://github.com/canjs/can-key/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-namespace": "^1.0.0",
                "can-reflect": "^1.13.3",
                "can-symbol": "^1.0.0"
            },
            deprecated: false,
            description: "Read nested key values",
            devDependencies: {
                jshint: "^2.9.1",
                steal: "^1.6.5",
                "steal-qunit": "^1.0.1",
                "steal-tools": "^1.11.3",
                testee: "^0.7.0"
            },
            homepage: "http://canjs.com",
            keywords: ["canjs", "donejs-plugin"],
            license: "MIT",
            main: "can-key",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-key.git"
            },
            scripts: {
                build: "node build.js",
                develop: "done-serve --static --develop --port 8080",
                jshint: "jshint ./*.js --config",
                postpublish:
                    "git push --tags && git checkout master && git branch -D release && git push",
                preversion: "npm test && npm run build",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                test: "npm run jshint && npm run testee",
                testee: "testee test.html --browsers firefox",
                version:
                    'git commit -am "Update version number" && git checkout -b release && git add -f dist/'
            },
            steal: {
                npmIgnore: {
                    testee: true,
                    "generator-donejs": true,
                    "donejs-cli": true,
                    "steal-tools": true
                },
                plugins: ["steal-less", "steal-stache"],
                main: "can-key"
            }
        },
        {
            name: "can-view-import",
            version: "4.2.0",
            nestedFileUrl:
                "./node_modules/steal-stache/node_modules/can-view-import/package.json",
            origFileUrl: "./node_modules/can-view-import/package.json",
            fileUrl: "./node_modules/can-view-import/package.json",
            _from: "can-view-import@^4.0.0",
            _id: "can-view-import@4.2.0",
            _inBundle: false,
            _integrity:
                "sha512-xK7cfBW1+nnhpiz7ppXaw53WEJy1Gr+4fCIT8V+LWsjKEt92FymCDJKcGwUGmpotucjLzBdnakkkxwNWPKBOjA==",
            _location: "/can-view-import",
            _phantomChildren: {},
            _requested: {
                type: "range",
                registry: true,
                raw: "can-view-import@^4.0.0",
                name: "can-view-import",
                escapedName: "can-view-import",
                rawSpec: "^4.0.0",
                saveSpec: null,
                fetchSpec: "^4.0.0"
            },
            _requiredBy: ["/shuttle-canstrap/can-connect", "/steal-stache"],
            _resolved:
                "https://registry.npmjs.org/can-view-import/-/can-view-import-4.2.0.tgz",
            _shasum: "6e39503aebc38bc62e733d98bc2e7316709e2ef1",
            _spec: "can-view-import@^4.0.0",
            _where:
                "C:\\development.github\\shuttle\\Shuttle.Abacus\\Shuttle.Abacus.Site\\node_modules\\shuttle-canstrap\\node_modules\\can-connect",
            author: {
                name: "Bitovi",
                email: "contact@bitovi.com",
                url: "http://bitovi.com"
            },
            bugs: { url: "https://github.com/canjs/can-view-import/issues" },
            bundleDependencies: false,
            dependencies: {
                "can-assign": "^1.0.0",
                "can-child-nodes": "^1.0.0",
                "can-dom-data-state": "^1.0.0",
                "can-dom-mutate": "<2.0.0",
                "can-globals": "<2.0.0",
                "can-import-module": "^1.0.0",
                "can-log": "^1.0.0",
                "can-symbol": "^1.5.0",
                "can-view-callbacks": "^4.0.0",
                "can-view-nodelist": "^4.0.0"
            },
            deprecated: false,
            description: "Import dependencies in CanJS views",
            devDependencies: {
                "bit-docs": "0.0.7",
                "can-component": "^4.0.0",
                "can-observation": "^4.0.0",
                "can-queues": "<2.0.0",
                "can-simple-map": "^4.0.0",
                "can-simple-observable": "^2.0.0",
                "can-stache": "^4.0.0",
                "can-test-helpers": "^1.0.1",
                "detect-cyclic-packages": "^1.1.0",
                jshint: "^2.9.1",
                steal: "^1.2.0",
                "steal-qunit": "^1.0.0",
                "steal-stache": "^4.0.0",
                "steal-tools": "^1.0.0",
                testee: "^0.8.0"
            },
            homepage: "https://canjs.com/doc/can-view-import.html",
            keywords: [],
            main: "can-view-import",
            repository: {
                type: "git",
                url: "git://github.com/canjs/can-view-import.git"
            },
            scripts: {
                "detect-cycle":
                    "detect-cyclic-packages --ignore done-serve,steal-stache",
                jshint: "jshint ./*.js --config",
                postpublish: "git push --tags && git push",
                preversion: "npm test",
                "release:major": "npm version major && npm publish",
                "release:minor": "npm version minor && npm publish",
                "release:patch": "npm version patch && npm publish",
                "release:pre":
                    "npm version prerelease && npm publish --tag=pre",
                test:
                    "npm run detect-cycle && npm run jshint && npm run testee",
                testee: "testee test/test.html --browsers firefox"
            }
        }
    ]);
}
